// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2018.3
// Copyright (C) 1986-2018 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

module read_pixel_data (
        ap_clk,
        ap_rst,
        ap_start,
        start_full_n,
        ap_done,
        ap_continue,
        ap_idle,
        ap_ready,
        start_out,
        start_write,
        VideoIn_TDATA,
        VideoIn_TVALID,
        VideoIn_TREADY,
        VideoIn_TUSER,
        StreamOut_V_Data_V_din,
        StreamOut_V_Data_V_full_n,
        StreamOut_V_Data_V_write,
        StreamOut_V_User_V_din,
        StreamOut_V_User_V_full_n,
        StreamOut_V_User_V_write
);

parameter    ap_ST_fsm_state1 = 5'd1;
parameter    ap_ST_fsm_state2 = 5'd2;
parameter    ap_ST_fsm_state3 = 5'd4;
parameter    ap_ST_fsm_state4 = 5'd8;
parameter    ap_ST_fsm_state5 = 5'd16;

input   ap_clk;
input   ap_rst;
input   ap_start;
input   start_full_n;
output   ap_done;
input   ap_continue;
output   ap_idle;
output   ap_ready;
output   start_out;
output   start_write;
input  [127:0] VideoIn_TDATA;
input   VideoIn_TVALID;
output   VideoIn_TREADY;
input  [3:0] VideoIn_TUSER;
output  [127:0] StreamOut_V_Data_V_din;
input   StreamOut_V_Data_V_full_n;
output   StreamOut_V_Data_V_write;
output  [3:0] StreamOut_V_User_V_din;
input   StreamOut_V_User_V_full_n;
output   StreamOut_V_User_V_write;

reg ap_done;
reg ap_idle;
reg start_write;
reg VideoIn_TREADY;
reg[127:0] StreamOut_V_Data_V_din;
reg[3:0] StreamOut_V_User_V_din;

reg    real_start;
reg    start_once_reg;
reg    ap_done_reg;
(* fsm_encoding = "none" *) reg   [4:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
reg    internal_ap_ready;
reg   [127:0] DataBuf_Data_V;
reg    VideoIn_TDATA_blk_n;
wire    ap_CS_fsm_state2;
wire   [0:0] tmp_1_fu_186_p3;
wire    ap_CS_fsm_state4;
wire   [0:0] tmp_7_fu_222_p3;
reg    StreamOut_V_Data_V_blk_n;
wire   [0:0] tmp_3_fu_194_p3;
wire    ap_CS_fsm_state3;
wire   [0:0] tmp_4_fu_202_p1;
wire   [0:0] tmp_5_fu_206_p3;
reg    StreamOut_V_User_V_blk_n;
wire    StreamOut_V_Data_V1_status;
reg    ap_predicate_op23_write_state2;
reg    ap_block_state2;
wire   [0:0] tmp_6_fu_214_p3;
reg   [0:0] tmp_6_reg_247;
reg    ap_predicate_op33_write_state3;
reg    ap_block_state3;
reg    ap_block_state4;
reg   [3:0] p_Val2_3_reg_103;
reg    ap_block_state1;
reg   [3:0] ap_phi_mux_DataBuf_User_V_3_phi_fu_158_p4;
wire    ap_CS_fsm_state5;
reg   [0:0] inFrame_reg_128;
reg   [3:0] p_Val2_s_reg_116;
reg   [3:0] tmp_User_V_6_reg_142;
reg   [3:0] DataBuf_User_V_3_reg_154;
reg    StreamOut_V_Data_V1_update;
reg   [4:0] ap_NS_fsm;
reg    ap_condition_107;

// power-on initialization
initial begin
#0 start_once_reg = 1'b0;
#0 ap_done_reg = 1'b0;
#0 ap_CS_fsm = 5'd1;
#0 DataBuf_Data_V = 128'd0;
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_done_reg <= 1'b0;
    end else begin
        if ((ap_continue == 1'b1)) begin
            ap_done_reg <= 1'b0;
        end else if (((inFrame_reg_128 == 1'd0) & (1'b1 == ap_CS_fsm_state5))) begin
            ap_done_reg <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        start_once_reg <= 1'b0;
    end else begin
        if (((internal_ap_ready == 1'b0) & (real_start == 1'b1))) begin
            start_once_reg <= 1'b1;
        end else if ((internal_ap_ready == 1'b1)) begin
            start_once_reg <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if ((~((1'b0 == StreamOut_V_Data_V1_status) & (ap_predicate_op33_write_state3 == 1'b1)) & (tmp_6_fu_214_p3 == 1'd0) & (1'b1 == ap_CS_fsm_state3))) begin
        DataBuf_User_V_3_reg_154 <= p_Val2_s_reg_116;
    end else if (((tmp_6_reg_247 == 1'd1) & (1'b1 == ap_CS_fsm_state5))) begin
        DataBuf_User_V_3_reg_154 <= tmp_User_V_6_reg_142;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_condition_107)) begin
        if ((tmp_1_fu_186_p3 == 1'd0)) begin
            inFrame_reg_128 <= 1'd1;
        end else if ((tmp_1_fu_186_p3 == 1'd1)) begin
            inFrame_reg_128 <= 1'd0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((inFrame_reg_128 == 1'd1) & (1'b1 == ap_CS_fsm_state5))) begin
        p_Val2_3_reg_103 <= ap_phi_mux_DataBuf_User_V_3_phi_fu_158_p4;
    end else if ((~((real_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
        p_Val2_3_reg_103 <= 4'd0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_condition_107)) begin
        if ((tmp_1_fu_186_p3 == 1'd0)) begin
            p_Val2_s_reg_116 <= VideoIn_TUSER;
        end else if ((tmp_1_fu_186_p3 == 1'd1)) begin
            p_Val2_s_reg_116 <= p_Val2_3_reg_103;
        end
    end
end

always @ (posedge ap_clk) begin
    if ((~((1'b0 == StreamOut_V_Data_V1_status) & (ap_predicate_op33_write_state3 == 1'b1)) & (tmp_6_fu_214_p3 == 1'd1) & (1'b1 == ap_CS_fsm_state3))) begin
        tmp_User_V_6_reg_142 <= p_Val2_s_reg_116;
    end else if ((~((1'b0 == StreamOut_V_Data_V1_status) | ((tmp_7_fu_222_p3 == 1'd0) & (1'b0 == VideoIn_TVALID))) & (tmp_7_fu_222_p3 == 1'd0) & (1'b1 == ap_CS_fsm_state4))) begin
        tmp_User_V_6_reg_142 <= VideoIn_TUSER;
    end
end

always @ (posedge ap_clk) begin
    if (((~((1'b0 == StreamOut_V_Data_V1_status) | ((tmp_7_fu_222_p3 == 1'd0) & (1'b0 == VideoIn_TVALID))) & (tmp_7_fu_222_p3 == 1'd0) & (1'b1 == ap_CS_fsm_state4)) | (~(((tmp_1_fu_186_p3 == 1'd0) & (1'b0 == VideoIn_TVALID)) | ((1'b0 == StreamOut_V_Data_V1_status) & (ap_predicate_op23_write_state2 == 1'b1))) & (tmp_1_fu_186_p3 == 1'd0) & (1'b1 == ap_CS_fsm_state2)))) begin
        DataBuf_Data_V <= VideoIn_TDATA;
    end
end

always @ (posedge ap_clk) begin
    if ((~((1'b0 == StreamOut_V_Data_V1_status) & (ap_predicate_op33_write_state3 == 1'b1)) & (1'b1 == ap_CS_fsm_state3))) begin
        tmp_6_reg_247 <= p_Val2_s_reg_116[32'd1];
    end
end

always @ (*) begin
    if (((~((1'b0 == StreamOut_V_Data_V1_status) & (ap_predicate_op33_write_state3 == 1'b1)) & (1'b1 == ap_CS_fsm_state3) & (ap_predicate_op33_write_state3 == 1'b1)) | (~((1'b0 == StreamOut_V_Data_V1_status) | ((tmp_7_fu_222_p3 == 1'd0) & (1'b0 == VideoIn_TVALID))) & (1'b1 == ap_CS_fsm_state4)) | (~(((tmp_1_fu_186_p3 == 1'd0) & (1'b0 == VideoIn_TVALID)) | ((1'b0 == StreamOut_V_Data_V1_status) & (ap_predicate_op23_write_state2 == 1'b1))) & (1'b1 == ap_CS_fsm_state2) & (ap_predicate_op23_write_state2 == 1'b1)))) begin
        StreamOut_V_Data_V1_update = 1'b1;
    end else begin
        StreamOut_V_Data_V1_update = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state4) | ((tmp_4_fu_202_p1 == 1'd1) & (tmp_5_fu_206_p3 == 1'd0) & (1'b1 == ap_CS_fsm_state3)) | ((tmp_3_fu_194_p3 == 1'd0) & (tmp_1_fu_186_p3 == 1'd1) & (1'b1 == ap_CS_fsm_state2)))) begin
        StreamOut_V_Data_V_blk_n = StreamOut_V_Data_V_full_n;
    end else begin
        StreamOut_V_Data_V_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((~((1'b0 == StreamOut_V_Data_V1_status) & (ap_predicate_op33_write_state3 == 1'b1)) & (1'b1 == ap_CS_fsm_state3) & (ap_predicate_op33_write_state3 == 1'b1)) | (~((1'b0 == StreamOut_V_Data_V1_status) | ((tmp_7_fu_222_p3 == 1'd0) & (1'b0 == VideoIn_TVALID))) & (1'b1 == ap_CS_fsm_state4)))) begin
        StreamOut_V_Data_V_din = DataBuf_Data_V;
    end else if ((~(((tmp_1_fu_186_p3 == 1'd0) & (1'b0 == VideoIn_TVALID)) | ((1'b0 == StreamOut_V_Data_V1_status) & (ap_predicate_op23_write_state2 == 1'b1))) & (1'b1 == ap_CS_fsm_state2) & (ap_predicate_op23_write_state2 == 1'b1))) begin
        StreamOut_V_Data_V_din = 128'd0;
    end else begin
        StreamOut_V_Data_V_din = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state4) | ((tmp_4_fu_202_p1 == 1'd1) & (tmp_5_fu_206_p3 == 1'd0) & (1'b1 == ap_CS_fsm_state3)) | ((tmp_3_fu_194_p3 == 1'd0) & (tmp_1_fu_186_p3 == 1'd1) & (1'b1 == ap_CS_fsm_state2)))) begin
        StreamOut_V_User_V_blk_n = StreamOut_V_User_V_full_n;
    end else begin
        StreamOut_V_User_V_blk_n = 1'b1;
    end
end

always @ (*) begin
    if ((~((1'b0 == StreamOut_V_Data_V1_status) | ((tmp_7_fu_222_p3 == 1'd0) & (1'b0 == VideoIn_TVALID))) & (1'b1 == ap_CS_fsm_state4))) begin
        StreamOut_V_User_V_din = tmp_User_V_6_reg_142;
    end else if ((~((1'b0 == StreamOut_V_Data_V1_status) & (ap_predicate_op33_write_state3 == 1'b1)) & (1'b1 == ap_CS_fsm_state3) & (ap_predicate_op33_write_state3 == 1'b1))) begin
        StreamOut_V_User_V_din = p_Val2_s_reg_116;
    end else if ((~(((tmp_1_fu_186_p3 == 1'd0) & (1'b0 == VideoIn_TVALID)) | ((1'b0 == StreamOut_V_Data_V1_status) & (ap_predicate_op23_write_state2 == 1'b1))) & (1'b1 == ap_CS_fsm_state2) & (ap_predicate_op23_write_state2 == 1'b1))) begin
        StreamOut_V_User_V_din = p_Val2_3_reg_103;
    end else begin
        StreamOut_V_User_V_din = 'bx;
    end
end

always @ (*) begin
    if ((((tmp_7_fu_222_p3 == 1'd0) & (1'b1 == ap_CS_fsm_state4)) | ((tmp_1_fu_186_p3 == 1'd0) & (1'b1 == ap_CS_fsm_state2)))) begin
        VideoIn_TDATA_blk_n = VideoIn_TVALID;
    end else begin
        VideoIn_TDATA_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((~((1'b0 == StreamOut_V_Data_V1_status) | ((tmp_7_fu_222_p3 == 1'd0) & (1'b0 == VideoIn_TVALID))) & (tmp_7_fu_222_p3 == 1'd0) & (1'b1 == ap_CS_fsm_state4)) | (~(((tmp_1_fu_186_p3 == 1'd0) & (1'b0 == VideoIn_TVALID)) | ((1'b0 == StreamOut_V_Data_V1_status) & (ap_predicate_op23_write_state2 == 1'b1))) & (tmp_1_fu_186_p3 == 1'd0) & (1'b1 == ap_CS_fsm_state2)))) begin
        VideoIn_TREADY = 1'b1;
    end else begin
        VideoIn_TREADY = 1'b0;
    end
end

always @ (*) begin
    if (((inFrame_reg_128 == 1'd0) & (1'b1 == ap_CS_fsm_state5))) begin
        ap_done = 1'b1;
    end else begin
        ap_done = ap_done_reg;
    end
end

always @ (*) begin
    if (((real_start == 1'b0) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((tmp_6_reg_247 == 1'd1) & (1'b1 == ap_CS_fsm_state5))) begin
        ap_phi_mux_DataBuf_User_V_3_phi_fu_158_p4 = tmp_User_V_6_reg_142;
    end else begin
        ap_phi_mux_DataBuf_User_V_3_phi_fu_158_p4 = DataBuf_User_V_3_reg_154;
    end
end

always @ (*) begin
    if (((inFrame_reg_128 == 1'd0) & (1'b1 == ap_CS_fsm_state5))) begin
        internal_ap_ready = 1'b1;
    end else begin
        internal_ap_ready = 1'b0;
    end
end

always @ (*) begin
    if (((start_once_reg == 1'b0) & (start_full_n == 1'b0))) begin
        real_start = 1'b0;
    end else begin
        real_start = ap_start;
    end
end

always @ (*) begin
    if (((start_once_reg == 1'b0) & (real_start == 1'b1))) begin
        start_write = 1'b1;
    end else begin
        start_write = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if ((~((real_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_state2 : begin
            if ((~(((tmp_1_fu_186_p3 == 1'd0) & (1'b0 == VideoIn_TVALID)) | ((1'b0 == StreamOut_V_Data_V1_status) & (ap_predicate_op23_write_state2 == 1'b1))) & (1'b1 == ap_CS_fsm_state2))) begin
                ap_NS_fsm = ap_ST_fsm_state3;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end
        end
        ap_ST_fsm_state3 : begin
            if ((~((1'b0 == StreamOut_V_Data_V1_status) & (ap_predicate_op33_write_state3 == 1'b1)) & (tmp_6_fu_214_p3 == 1'd1) & (1'b1 == ap_CS_fsm_state3))) begin
                ap_NS_fsm = ap_ST_fsm_state4;
            end else if ((~((1'b0 == StreamOut_V_Data_V1_status) & (ap_predicate_op33_write_state3 == 1'b1)) & (tmp_6_fu_214_p3 == 1'd0) & (1'b1 == ap_CS_fsm_state3))) begin
                ap_NS_fsm = ap_ST_fsm_state5;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state3;
            end
        end
        ap_ST_fsm_state4 : begin
            if ((~((1'b0 == StreamOut_V_Data_V1_status) | ((tmp_7_fu_222_p3 == 1'd0) & (1'b0 == VideoIn_TVALID))) & (tmp_7_fu_222_p3 == 1'd0) & (1'b1 == ap_CS_fsm_state4))) begin
                ap_NS_fsm = ap_ST_fsm_state4;
            end else if ((~((1'b0 == StreamOut_V_Data_V1_status) | ((tmp_7_fu_222_p3 == 1'd0) & (1'b0 == VideoIn_TVALID))) & (tmp_7_fu_222_p3 == 1'd1) & (1'b1 == ap_CS_fsm_state4))) begin
                ap_NS_fsm = ap_ST_fsm_state5;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state4;
            end
        end
        ap_ST_fsm_state5 : begin
            if (((inFrame_reg_128 == 1'd0) & (1'b1 == ap_CS_fsm_state5))) begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign StreamOut_V_Data_V1_status = (StreamOut_V_User_V_full_n & StreamOut_V_Data_V_full_n);

assign StreamOut_V_Data_V_write = StreamOut_V_Data_V1_update;

assign StreamOut_V_User_V_write = StreamOut_V_Data_V1_update;

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state2 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_state3 = ap_CS_fsm[32'd2];

assign ap_CS_fsm_state4 = ap_CS_fsm[32'd3];

assign ap_CS_fsm_state5 = ap_CS_fsm[32'd4];

always @ (*) begin
    ap_block_state1 = ((real_start == 1'b0) | (ap_done_reg == 1'b1));
end

always @ (*) begin
    ap_block_state2 = (((tmp_1_fu_186_p3 == 1'd0) & (1'b0 == VideoIn_TVALID)) | ((1'b0 == StreamOut_V_Data_V1_status) & (ap_predicate_op23_write_state2 == 1'b1)));
end

always @ (*) begin
    ap_block_state3 = ((1'b0 == StreamOut_V_Data_V1_status) & (ap_predicate_op33_write_state3 == 1'b1));
end

always @ (*) begin
    ap_block_state4 = ((1'b0 == StreamOut_V_Data_V1_status) | ((tmp_7_fu_222_p3 == 1'd0) & (1'b0 == VideoIn_TVALID)));
end

always @ (*) begin
    ap_condition_107 = (~(((tmp_1_fu_186_p3 == 1'd0) & (1'b0 == VideoIn_TVALID)) | ((1'b0 == StreamOut_V_Data_V1_status) & (ap_predicate_op23_write_state2 == 1'b1))) & (1'b1 == ap_CS_fsm_state2));
end

always @ (*) begin
    ap_predicate_op23_write_state2 = ((tmp_3_fu_194_p3 == 1'd0) & (tmp_1_fu_186_p3 == 1'd1));
end

always @ (*) begin
    ap_predicate_op33_write_state3 = ((tmp_4_fu_202_p1 == 1'd1) & (tmp_5_fu_206_p3 == 1'd0));
end

assign ap_ready = internal_ap_ready;

assign start_out = real_start;

assign tmp_1_fu_186_p3 = p_Val2_3_reg_103[32'd3];

assign tmp_3_fu_194_p3 = p_Val2_3_reg_103[32'd2];

assign tmp_4_fu_202_p1 = p_Val2_s_reg_116[0:0];

assign tmp_5_fu_206_p3 = p_Val2_s_reg_116[32'd1];

assign tmp_6_fu_214_p3 = p_Val2_s_reg_116[32'd1];

assign tmp_7_fu_222_p3 = tmp_User_V_6_reg_142[32'd2];

endmodule //read_pixel_data
