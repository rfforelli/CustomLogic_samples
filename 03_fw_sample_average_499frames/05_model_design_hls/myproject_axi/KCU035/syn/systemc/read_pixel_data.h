// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2018.3
// Copyright (C) 1986-2018 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

#ifndef _read_pixel_data_HH_
#define _read_pixel_data_HH_

#include "systemc.h"
#include "AESL_pkg.h"


namespace ap_rtl {

struct read_pixel_data : public sc_module {
    // Port declarations 20
    sc_in_clk ap_clk;
    sc_in< sc_logic > ap_rst;
    sc_in< sc_logic > ap_start;
    sc_in< sc_logic > start_full_n;
    sc_out< sc_logic > ap_done;
    sc_in< sc_logic > ap_continue;
    sc_out< sc_logic > ap_idle;
    sc_out< sc_logic > ap_ready;
    sc_out< sc_logic > start_out;
    sc_out< sc_logic > start_write;
    sc_in< sc_lv<128> > VideoIn_TDATA;
    sc_in< sc_logic > VideoIn_TVALID;
    sc_out< sc_logic > VideoIn_TREADY;
    sc_in< sc_lv<4> > VideoIn_TUSER;
    sc_out< sc_lv<128> > StreamOut_V_Data_V_din;
    sc_in< sc_logic > StreamOut_V_Data_V_full_n;
    sc_out< sc_logic > StreamOut_V_Data_V_write;
    sc_out< sc_lv<4> > StreamOut_V_User_V_din;
    sc_in< sc_logic > StreamOut_V_User_V_full_n;
    sc_out< sc_logic > StreamOut_V_User_V_write;


    // Module declarations
    read_pixel_data(sc_module_name name);
    SC_HAS_PROCESS(read_pixel_data);

    ~read_pixel_data();

    sc_trace_file* mVcdFile;

    sc_signal< sc_logic > real_start;
    sc_signal< sc_logic > start_once_reg;
    sc_signal< sc_logic > ap_done_reg;
    sc_signal< sc_lv<5> > ap_CS_fsm;
    sc_signal< sc_logic > ap_CS_fsm_state1;
    sc_signal< sc_logic > internal_ap_ready;
    sc_signal< sc_lv<128> > DataBuf_Data_V;
    sc_signal< sc_logic > VideoIn_TDATA_blk_n;
    sc_signal< sc_logic > ap_CS_fsm_state2;
    sc_signal< sc_lv<1> > tmp_1_fu_186_p3;
    sc_signal< sc_logic > ap_CS_fsm_state4;
    sc_signal< sc_lv<1> > tmp_7_fu_222_p3;
    sc_signal< sc_logic > StreamOut_V_Data_V_blk_n;
    sc_signal< sc_lv<1> > tmp_3_fu_194_p3;
    sc_signal< sc_logic > ap_CS_fsm_state3;
    sc_signal< sc_lv<1> > tmp_4_fu_202_p1;
    sc_signal< sc_lv<1> > tmp_5_fu_206_p3;
    sc_signal< sc_logic > StreamOut_V_User_V_blk_n;
    sc_signal< sc_logic > StreamOut_V_Data_V1_status;
    sc_signal< bool > ap_predicate_op23_write_state2;
    sc_signal< bool > ap_block_state2;
    sc_signal< sc_lv<1> > tmp_6_fu_214_p3;
    sc_signal< sc_lv<1> > tmp_6_reg_247;
    sc_signal< bool > ap_predicate_op33_write_state3;
    sc_signal< bool > ap_block_state3;
    sc_signal< bool > ap_block_state4;
    sc_signal< sc_lv<4> > p_Val2_3_reg_103;
    sc_signal< bool > ap_block_state1;
    sc_signal< sc_lv<4> > ap_phi_mux_DataBuf_User_V_3_phi_fu_158_p4;
    sc_signal< sc_logic > ap_CS_fsm_state5;
    sc_signal< sc_lv<1> > inFrame_reg_128;
    sc_signal< sc_lv<4> > p_Val2_s_reg_116;
    sc_signal< sc_lv<4> > tmp_User_V_6_reg_142;
    sc_signal< sc_lv<4> > DataBuf_User_V_3_reg_154;
    sc_signal< sc_logic > StreamOut_V_Data_V1_update;
    sc_signal< sc_lv<5> > ap_NS_fsm;
    sc_signal< bool > ap_condition_107;
    static const sc_logic ap_const_logic_1;
    static const sc_logic ap_const_logic_0;
    static const sc_lv<5> ap_ST_fsm_state1;
    static const sc_lv<5> ap_ST_fsm_state2;
    static const sc_lv<5> ap_ST_fsm_state3;
    static const sc_lv<5> ap_ST_fsm_state4;
    static const sc_lv<5> ap_ST_fsm_state5;
    static const bool ap_const_boolean_1;
    static const sc_lv<32> ap_const_lv32_0;
    static const sc_lv<128> ap_const_lv128_lc_1;
    static const sc_lv<32> ap_const_lv32_1;
    static const sc_lv<1> ap_const_lv1_0;
    static const sc_lv<32> ap_const_lv32_3;
    static const sc_lv<1> ap_const_lv1_1;
    static const sc_lv<32> ap_const_lv32_2;
    static const sc_lv<4> ap_const_lv4_0;
    static const sc_lv<32> ap_const_lv32_4;
    // Thread declarations
    void thread_ap_clk_no_reset_();
    void thread_StreamOut_V_Data_V1_status();
    void thread_StreamOut_V_Data_V1_update();
    void thread_StreamOut_V_Data_V_blk_n();
    void thread_StreamOut_V_Data_V_din();
    void thread_StreamOut_V_Data_V_write();
    void thread_StreamOut_V_User_V_blk_n();
    void thread_StreamOut_V_User_V_din();
    void thread_StreamOut_V_User_V_write();
    void thread_VideoIn_TDATA_blk_n();
    void thread_VideoIn_TREADY();
    void thread_ap_CS_fsm_state1();
    void thread_ap_CS_fsm_state2();
    void thread_ap_CS_fsm_state3();
    void thread_ap_CS_fsm_state4();
    void thread_ap_CS_fsm_state5();
    void thread_ap_block_state1();
    void thread_ap_block_state2();
    void thread_ap_block_state3();
    void thread_ap_block_state4();
    void thread_ap_condition_107();
    void thread_ap_done();
    void thread_ap_idle();
    void thread_ap_phi_mux_DataBuf_User_V_3_phi_fu_158_p4();
    void thread_ap_predicate_op23_write_state2();
    void thread_ap_predicate_op33_write_state3();
    void thread_ap_ready();
    void thread_internal_ap_ready();
    void thread_real_start();
    void thread_start_out();
    void thread_start_write();
    void thread_tmp_1_fu_186_p3();
    void thread_tmp_3_fu_194_p3();
    void thread_tmp_4_fu_202_p1();
    void thread_tmp_5_fu_206_p3();
    void thread_tmp_6_fu_214_p3();
    void thread_tmp_7_fu_222_p3();
    void thread_ap_NS_fsm();
};

}

using namespace ap_rtl;

#endif
