-- ==============================================================
-- RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
-- Version: 2018.3
-- Copyright (C) 1986-2018 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity read_pixel_data is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    start_full_n : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_continue : IN STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    start_out : OUT STD_LOGIC;
    start_write : OUT STD_LOGIC;
    VideoIn_TDATA : IN STD_LOGIC_VECTOR (127 downto 0);
    VideoIn_TVALID : IN STD_LOGIC;
    VideoIn_TREADY : OUT STD_LOGIC;
    VideoIn_TUSER : IN STD_LOGIC_VECTOR (3 downto 0);
    StreamOut_V_Data_V_din : OUT STD_LOGIC_VECTOR (127 downto 0);
    StreamOut_V_Data_V_full_n : IN STD_LOGIC;
    StreamOut_V_Data_V_write : OUT STD_LOGIC;
    StreamOut_V_User_V_din : OUT STD_LOGIC_VECTOR (3 downto 0);
    StreamOut_V_User_V_full_n : IN STD_LOGIC;
    StreamOut_V_User_V_write : OUT STD_LOGIC );
end;


architecture behav of read_pixel_data is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_state1 : STD_LOGIC_VECTOR (4 downto 0) := "00001";
    constant ap_ST_fsm_state2 : STD_LOGIC_VECTOR (4 downto 0) := "00010";
    constant ap_ST_fsm_state3 : STD_LOGIC_VECTOR (4 downto 0) := "00100";
    constant ap_ST_fsm_state4 : STD_LOGIC_VECTOR (4 downto 0) := "01000";
    constant ap_ST_fsm_state5 : STD_LOGIC_VECTOR (4 downto 0) := "10000";
    constant ap_const_boolean_1 : BOOLEAN := true;
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_lv128_lc_1 : STD_LOGIC_VECTOR (127 downto 0) := "00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv32_3 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000011";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";
    constant ap_const_lv4_0 : STD_LOGIC_VECTOR (3 downto 0) := "0000";
    constant ap_const_lv32_4 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000100";

    signal real_start : STD_LOGIC;
    signal start_once_reg : STD_LOGIC := '0';
    signal ap_done_reg : STD_LOGIC := '0';
    signal ap_CS_fsm : STD_LOGIC_VECTOR (4 downto 0) := "00001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_state1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state1 : signal is "none";
    signal internal_ap_ready : STD_LOGIC;
    signal DataBuf_Data_V : STD_LOGIC_VECTOR (127 downto 0) := "00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    signal VideoIn_TDATA_blk_n : STD_LOGIC;
    signal ap_CS_fsm_state2 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state2 : signal is "none";
    signal tmp_1_fu_186_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_CS_fsm_state4 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state4 : signal is "none";
    signal tmp_7_fu_222_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal StreamOut_V_Data_V_blk_n : STD_LOGIC;
    signal tmp_3_fu_194_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_CS_fsm_state3 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state3 : signal is "none";
    signal tmp_4_fu_202_p1 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_5_fu_206_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal StreamOut_V_User_V_blk_n : STD_LOGIC;
    signal StreamOut_V_Data_V1_status : STD_LOGIC;
    signal ap_predicate_op23_write_state2 : BOOLEAN;
    signal ap_block_state2 : BOOLEAN;
    signal tmp_6_fu_214_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_6_reg_247 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_predicate_op33_write_state3 : BOOLEAN;
    signal ap_block_state3 : BOOLEAN;
    signal ap_block_state4 : BOOLEAN;
    signal p_Val2_3_reg_103 : STD_LOGIC_VECTOR (3 downto 0);
    signal ap_block_state1 : BOOLEAN;
    signal ap_phi_mux_DataBuf_User_V_3_phi_fu_158_p4 : STD_LOGIC_VECTOR (3 downto 0);
    signal ap_CS_fsm_state5 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state5 : signal is "none";
    signal inFrame_reg_128 : STD_LOGIC_VECTOR (0 downto 0);
    signal p_Val2_s_reg_116 : STD_LOGIC_VECTOR (3 downto 0);
    signal tmp_User_V_6_reg_142 : STD_LOGIC_VECTOR (3 downto 0);
    signal DataBuf_User_V_3_reg_154 : STD_LOGIC_VECTOR (3 downto 0);
    signal StreamOut_V_Data_V1_update : STD_LOGIC;
    signal ap_NS_fsm : STD_LOGIC_VECTOR (4 downto 0);
    signal ap_condition_107 : BOOLEAN;


begin




    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_state1;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    ap_done_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_done_reg <= ap_const_logic_0;
            else
                if ((ap_continue = ap_const_logic_1)) then 
                    ap_done_reg <= ap_const_logic_0;
                elsif (((inFrame_reg_128 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state5))) then 
                    ap_done_reg <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    start_once_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                start_once_reg <= ap_const_logic_0;
            else
                if (((internal_ap_ready = ap_const_logic_0) and (real_start = ap_const_logic_1))) then 
                    start_once_reg <= ap_const_logic_1;
                elsif ((internal_ap_ready = ap_const_logic_1)) then 
                    start_once_reg <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    DataBuf_User_V_3_reg_154_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((not(((ap_const_logic_0 = StreamOut_V_Data_V1_status) and (ap_predicate_op33_write_state3 = ap_const_boolean_1))) and (tmp_6_fu_214_p3 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state3))) then 
                DataBuf_User_V_3_reg_154 <= p_Val2_s_reg_116;
            elsif (((tmp_6_reg_247 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state5))) then 
                DataBuf_User_V_3_reg_154 <= tmp_User_V_6_reg_142;
            end if; 
        end if;
    end process;

    inFrame_reg_128_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_boolean_1 = ap_condition_107)) then
                if ((tmp_1_fu_186_p3 = ap_const_lv1_0)) then 
                    inFrame_reg_128 <= ap_const_lv1_1;
                elsif ((tmp_1_fu_186_p3 = ap_const_lv1_1)) then 
                    inFrame_reg_128 <= ap_const_lv1_0;
                end if;
            end if; 
        end if;
    end process;

    p_Val2_3_reg_103_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((inFrame_reg_128 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state5))) then 
                p_Val2_3_reg_103 <= ap_phi_mux_DataBuf_User_V_3_phi_fu_158_p4;
            elsif ((not(((real_start = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
                p_Val2_3_reg_103 <= ap_const_lv4_0;
            end if; 
        end if;
    end process;

    p_Val2_s_reg_116_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_boolean_1 = ap_condition_107)) then
                if ((tmp_1_fu_186_p3 = ap_const_lv1_0)) then 
                    p_Val2_s_reg_116 <= VideoIn_TUSER;
                elsif ((tmp_1_fu_186_p3 = ap_const_lv1_1)) then 
                    p_Val2_s_reg_116 <= p_Val2_3_reg_103;
                end if;
            end if; 
        end if;
    end process;

    tmp_User_V_6_reg_142_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((not(((ap_const_logic_0 = StreamOut_V_Data_V1_status) and (ap_predicate_op33_write_state3 = ap_const_boolean_1))) and (tmp_6_fu_214_p3 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state3))) then 
                tmp_User_V_6_reg_142 <= p_Val2_s_reg_116;
            elsif ((not(((ap_const_logic_0 = StreamOut_V_Data_V1_status) or ((tmp_7_fu_222_p3 = ap_const_lv1_0) and (ap_const_logic_0 = VideoIn_TVALID)))) and (tmp_7_fu_222_p3 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state4))) then 
                tmp_User_V_6_reg_142 <= VideoIn_TUSER;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((not(((ap_const_logic_0 = StreamOut_V_Data_V1_status) or ((tmp_7_fu_222_p3 = ap_const_lv1_0) and (ap_const_logic_0 = VideoIn_TVALID)))) and (tmp_7_fu_222_p3 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state4)) or (not((((tmp_1_fu_186_p3 = ap_const_lv1_0) and (ap_const_logic_0 = VideoIn_TVALID)) or ((ap_const_logic_0 = StreamOut_V_Data_V1_status) and (ap_predicate_op23_write_state2 = ap_const_boolean_1)))) and (tmp_1_fu_186_p3 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state2)))) then
                DataBuf_Data_V <= VideoIn_TDATA;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((not(((ap_const_logic_0 = StreamOut_V_Data_V1_status) and (ap_predicate_op33_write_state3 = ap_const_boolean_1))) and (ap_const_logic_1 = ap_CS_fsm_state3))) then
                tmp_6_reg_247 <= p_Val2_s_reg_116(1 downto 1);
            end if;
        end if;
    end process;

    ap_NS_fsm_assign_proc : process (real_start, ap_done_reg, ap_CS_fsm, ap_CS_fsm_state1, VideoIn_TVALID, ap_CS_fsm_state2, tmp_1_fu_186_p3, ap_CS_fsm_state4, tmp_7_fu_222_p3, ap_CS_fsm_state3, StreamOut_V_Data_V1_status, ap_predicate_op23_write_state2, tmp_6_fu_214_p3, ap_predicate_op33_write_state3, ap_CS_fsm_state5, inFrame_reg_128)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_state1 => 
                if ((not(((real_start = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state1;
                end if;
            when ap_ST_fsm_state2 => 
                if ((not((((tmp_1_fu_186_p3 = ap_const_lv1_0) and (ap_const_logic_0 = VideoIn_TVALID)) or ((ap_const_logic_0 = StreamOut_V_Data_V1_status) and (ap_predicate_op23_write_state2 = ap_const_boolean_1)))) and (ap_const_logic_1 = ap_CS_fsm_state2))) then
                    ap_NS_fsm <= ap_ST_fsm_state3;
                else
                    ap_NS_fsm <= ap_ST_fsm_state2;
                end if;
            when ap_ST_fsm_state3 => 
                if ((not(((ap_const_logic_0 = StreamOut_V_Data_V1_status) and (ap_predicate_op33_write_state3 = ap_const_boolean_1))) and (tmp_6_fu_214_p3 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state3))) then
                    ap_NS_fsm <= ap_ST_fsm_state4;
                elsif ((not(((ap_const_logic_0 = StreamOut_V_Data_V1_status) and (ap_predicate_op33_write_state3 = ap_const_boolean_1))) and (tmp_6_fu_214_p3 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state3))) then
                    ap_NS_fsm <= ap_ST_fsm_state5;
                else
                    ap_NS_fsm <= ap_ST_fsm_state3;
                end if;
            when ap_ST_fsm_state4 => 
                if ((not(((ap_const_logic_0 = StreamOut_V_Data_V1_status) or ((tmp_7_fu_222_p3 = ap_const_lv1_0) and (ap_const_logic_0 = VideoIn_TVALID)))) and (tmp_7_fu_222_p3 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state4))) then
                    ap_NS_fsm <= ap_ST_fsm_state4;
                elsif ((not(((ap_const_logic_0 = StreamOut_V_Data_V1_status) or ((tmp_7_fu_222_p3 = ap_const_lv1_0) and (ap_const_logic_0 = VideoIn_TVALID)))) and (tmp_7_fu_222_p3 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state4))) then
                    ap_NS_fsm <= ap_ST_fsm_state5;
                else
                    ap_NS_fsm <= ap_ST_fsm_state4;
                end if;
            when ap_ST_fsm_state5 => 
                if (((inFrame_reg_128 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state5))) then
                    ap_NS_fsm <= ap_ST_fsm_state1;
                else
                    ap_NS_fsm <= ap_ST_fsm_state2;
                end if;
            when others =>  
                ap_NS_fsm <= "XXXXX";
        end case;
    end process;
    StreamOut_V_Data_V1_status <= (StreamOut_V_User_V_full_n and StreamOut_V_Data_V_full_n);

    StreamOut_V_Data_V1_update_assign_proc : process(VideoIn_TVALID, ap_CS_fsm_state2, tmp_1_fu_186_p3, ap_CS_fsm_state4, tmp_7_fu_222_p3, ap_CS_fsm_state3, StreamOut_V_Data_V1_status, ap_predicate_op23_write_state2, ap_predicate_op33_write_state3)
    begin
        if (((not(((ap_const_logic_0 = StreamOut_V_Data_V1_status) and (ap_predicate_op33_write_state3 = ap_const_boolean_1))) and (ap_const_logic_1 = ap_CS_fsm_state3) and (ap_predicate_op33_write_state3 = ap_const_boolean_1)) or (not(((ap_const_logic_0 = StreamOut_V_Data_V1_status) or ((tmp_7_fu_222_p3 = ap_const_lv1_0) and (ap_const_logic_0 = VideoIn_TVALID)))) and (ap_const_logic_1 = ap_CS_fsm_state4)) or (not((((tmp_1_fu_186_p3 = ap_const_lv1_0) and (ap_const_logic_0 = VideoIn_TVALID)) or ((ap_const_logic_0 = StreamOut_V_Data_V1_status) and (ap_predicate_op23_write_state2 = ap_const_boolean_1)))) and (ap_const_logic_1 = ap_CS_fsm_state2) and (ap_predicate_op23_write_state2 = ap_const_boolean_1)))) then 
            StreamOut_V_Data_V1_update <= ap_const_logic_1;
        else 
            StreamOut_V_Data_V1_update <= ap_const_logic_0;
        end if; 
    end process;


    StreamOut_V_Data_V_blk_n_assign_proc : process(StreamOut_V_Data_V_full_n, ap_CS_fsm_state2, tmp_1_fu_186_p3, ap_CS_fsm_state4, tmp_3_fu_194_p3, ap_CS_fsm_state3, tmp_4_fu_202_p1, tmp_5_fu_206_p3)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state4) or ((tmp_4_fu_202_p1 = ap_const_lv1_1) and (tmp_5_fu_206_p3 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state3)) or ((tmp_3_fu_194_p3 = ap_const_lv1_0) and (tmp_1_fu_186_p3 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state2)))) then 
            StreamOut_V_Data_V_blk_n <= StreamOut_V_Data_V_full_n;
        else 
            StreamOut_V_Data_V_blk_n <= ap_const_logic_1;
        end if; 
    end process;


    StreamOut_V_Data_V_din_assign_proc : process(VideoIn_TVALID, DataBuf_Data_V, ap_CS_fsm_state2, tmp_1_fu_186_p3, ap_CS_fsm_state4, tmp_7_fu_222_p3, ap_CS_fsm_state3, StreamOut_V_Data_V1_status, ap_predicate_op23_write_state2, ap_predicate_op33_write_state3)
    begin
        if (((not(((ap_const_logic_0 = StreamOut_V_Data_V1_status) and (ap_predicate_op33_write_state3 = ap_const_boolean_1))) and (ap_const_logic_1 = ap_CS_fsm_state3) and (ap_predicate_op33_write_state3 = ap_const_boolean_1)) or (not(((ap_const_logic_0 = StreamOut_V_Data_V1_status) or ((tmp_7_fu_222_p3 = ap_const_lv1_0) and (ap_const_logic_0 = VideoIn_TVALID)))) and (ap_const_logic_1 = ap_CS_fsm_state4)))) then 
            StreamOut_V_Data_V_din <= DataBuf_Data_V;
        elsif ((not((((tmp_1_fu_186_p3 = ap_const_lv1_0) and (ap_const_logic_0 = VideoIn_TVALID)) or ((ap_const_logic_0 = StreamOut_V_Data_V1_status) and (ap_predicate_op23_write_state2 = ap_const_boolean_1)))) and (ap_const_logic_1 = ap_CS_fsm_state2) and (ap_predicate_op23_write_state2 = ap_const_boolean_1))) then 
            StreamOut_V_Data_V_din <= ap_const_lv128_lc_1;
        else 
            StreamOut_V_Data_V_din <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;

    StreamOut_V_Data_V_write <= StreamOut_V_Data_V1_update;

    StreamOut_V_User_V_blk_n_assign_proc : process(StreamOut_V_User_V_full_n, ap_CS_fsm_state2, tmp_1_fu_186_p3, ap_CS_fsm_state4, tmp_3_fu_194_p3, ap_CS_fsm_state3, tmp_4_fu_202_p1, tmp_5_fu_206_p3)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state4) or ((tmp_4_fu_202_p1 = ap_const_lv1_1) and (tmp_5_fu_206_p3 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state3)) or ((tmp_3_fu_194_p3 = ap_const_lv1_0) and (tmp_1_fu_186_p3 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state2)))) then 
            StreamOut_V_User_V_blk_n <= StreamOut_V_User_V_full_n;
        else 
            StreamOut_V_User_V_blk_n <= ap_const_logic_1;
        end if; 
    end process;


    StreamOut_V_User_V_din_assign_proc : process(VideoIn_TVALID, ap_CS_fsm_state2, tmp_1_fu_186_p3, ap_CS_fsm_state4, tmp_7_fu_222_p3, ap_CS_fsm_state3, StreamOut_V_Data_V1_status, ap_predicate_op23_write_state2, ap_predicate_op33_write_state3, p_Val2_3_reg_103, p_Val2_s_reg_116, tmp_User_V_6_reg_142)
    begin
        if ((not(((ap_const_logic_0 = StreamOut_V_Data_V1_status) or ((tmp_7_fu_222_p3 = ap_const_lv1_0) and (ap_const_logic_0 = VideoIn_TVALID)))) and (ap_const_logic_1 = ap_CS_fsm_state4))) then 
            StreamOut_V_User_V_din <= tmp_User_V_6_reg_142;
        elsif ((not(((ap_const_logic_0 = StreamOut_V_Data_V1_status) and (ap_predicate_op33_write_state3 = ap_const_boolean_1))) and (ap_const_logic_1 = ap_CS_fsm_state3) and (ap_predicate_op33_write_state3 = ap_const_boolean_1))) then 
            StreamOut_V_User_V_din <= p_Val2_s_reg_116;
        elsif ((not((((tmp_1_fu_186_p3 = ap_const_lv1_0) and (ap_const_logic_0 = VideoIn_TVALID)) or ((ap_const_logic_0 = StreamOut_V_Data_V1_status) and (ap_predicate_op23_write_state2 = ap_const_boolean_1)))) and (ap_const_logic_1 = ap_CS_fsm_state2) and (ap_predicate_op23_write_state2 = ap_const_boolean_1))) then 
            StreamOut_V_User_V_din <= p_Val2_3_reg_103;
        else 
            StreamOut_V_User_V_din <= "XXXX";
        end if; 
    end process;

    StreamOut_V_User_V_write <= StreamOut_V_Data_V1_update;

    VideoIn_TDATA_blk_n_assign_proc : process(VideoIn_TVALID, ap_CS_fsm_state2, tmp_1_fu_186_p3, ap_CS_fsm_state4, tmp_7_fu_222_p3)
    begin
        if ((((tmp_7_fu_222_p3 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state4)) or ((tmp_1_fu_186_p3 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state2)))) then 
            VideoIn_TDATA_blk_n <= VideoIn_TVALID;
        else 
            VideoIn_TDATA_blk_n <= ap_const_logic_1;
        end if; 
    end process;


    VideoIn_TREADY_assign_proc : process(VideoIn_TVALID, ap_CS_fsm_state2, tmp_1_fu_186_p3, ap_CS_fsm_state4, tmp_7_fu_222_p3, StreamOut_V_Data_V1_status, ap_predicate_op23_write_state2)
    begin
        if (((not(((ap_const_logic_0 = StreamOut_V_Data_V1_status) or ((tmp_7_fu_222_p3 = ap_const_lv1_0) and (ap_const_logic_0 = VideoIn_TVALID)))) and (tmp_7_fu_222_p3 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state4)) or (not((((tmp_1_fu_186_p3 = ap_const_lv1_0) and (ap_const_logic_0 = VideoIn_TVALID)) or ((ap_const_logic_0 = StreamOut_V_Data_V1_status) and (ap_predicate_op23_write_state2 = ap_const_boolean_1)))) and (tmp_1_fu_186_p3 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state2)))) then 
            VideoIn_TREADY <= ap_const_logic_1;
        else 
            VideoIn_TREADY <= ap_const_logic_0;
        end if; 
    end process;

    ap_CS_fsm_state1 <= ap_CS_fsm(0);
    ap_CS_fsm_state2 <= ap_CS_fsm(1);
    ap_CS_fsm_state3 <= ap_CS_fsm(2);
    ap_CS_fsm_state4 <= ap_CS_fsm(3);
    ap_CS_fsm_state5 <= ap_CS_fsm(4);

    ap_block_state1_assign_proc : process(real_start, ap_done_reg)
    begin
                ap_block_state1 <= ((real_start = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1));
    end process;


    ap_block_state2_assign_proc : process(VideoIn_TVALID, tmp_1_fu_186_p3, StreamOut_V_Data_V1_status, ap_predicate_op23_write_state2)
    begin
                ap_block_state2 <= (((tmp_1_fu_186_p3 = ap_const_lv1_0) and (ap_const_logic_0 = VideoIn_TVALID)) or ((ap_const_logic_0 = StreamOut_V_Data_V1_status) and (ap_predicate_op23_write_state2 = ap_const_boolean_1)));
    end process;


    ap_block_state3_assign_proc : process(StreamOut_V_Data_V1_status, ap_predicate_op33_write_state3)
    begin
                ap_block_state3 <= ((ap_const_logic_0 = StreamOut_V_Data_V1_status) and (ap_predicate_op33_write_state3 = ap_const_boolean_1));
    end process;


    ap_block_state4_assign_proc : process(VideoIn_TVALID, tmp_7_fu_222_p3, StreamOut_V_Data_V1_status)
    begin
                ap_block_state4 <= ((ap_const_logic_0 = StreamOut_V_Data_V1_status) or ((tmp_7_fu_222_p3 = ap_const_lv1_0) and (ap_const_logic_0 = VideoIn_TVALID)));
    end process;


    ap_condition_107_assign_proc : process(VideoIn_TVALID, ap_CS_fsm_state2, tmp_1_fu_186_p3, StreamOut_V_Data_V1_status, ap_predicate_op23_write_state2)
    begin
                ap_condition_107 <= (not((((tmp_1_fu_186_p3 = ap_const_lv1_0) and (ap_const_logic_0 = VideoIn_TVALID)) or ((ap_const_logic_0 = StreamOut_V_Data_V1_status) and (ap_predicate_op23_write_state2 = ap_const_boolean_1)))) and (ap_const_logic_1 = ap_CS_fsm_state2));
    end process;


    ap_done_assign_proc : process(ap_done_reg, ap_CS_fsm_state5, inFrame_reg_128)
    begin
        if (((inFrame_reg_128 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state5))) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_done_reg;
        end if; 
    end process;


    ap_idle_assign_proc : process(real_start, ap_CS_fsm_state1)
    begin
        if (((real_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_phi_mux_DataBuf_User_V_3_phi_fu_158_p4_assign_proc : process(tmp_6_reg_247, ap_CS_fsm_state5, tmp_User_V_6_reg_142, DataBuf_User_V_3_reg_154)
    begin
        if (((tmp_6_reg_247 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state5))) then 
            ap_phi_mux_DataBuf_User_V_3_phi_fu_158_p4 <= tmp_User_V_6_reg_142;
        else 
            ap_phi_mux_DataBuf_User_V_3_phi_fu_158_p4 <= DataBuf_User_V_3_reg_154;
        end if; 
    end process;


    ap_predicate_op23_write_state2_assign_proc : process(tmp_1_fu_186_p3, tmp_3_fu_194_p3)
    begin
                ap_predicate_op23_write_state2 <= ((tmp_3_fu_194_p3 = ap_const_lv1_0) and (tmp_1_fu_186_p3 = ap_const_lv1_1));
    end process;


    ap_predicate_op33_write_state3_assign_proc : process(tmp_4_fu_202_p1, tmp_5_fu_206_p3)
    begin
                ap_predicate_op33_write_state3 <= ((tmp_4_fu_202_p1 = ap_const_lv1_1) and (tmp_5_fu_206_p3 = ap_const_lv1_0));
    end process;

    ap_ready <= internal_ap_ready;

    internal_ap_ready_assign_proc : process(ap_CS_fsm_state5, inFrame_reg_128)
    begin
        if (((inFrame_reg_128 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state5))) then 
            internal_ap_ready <= ap_const_logic_1;
        else 
            internal_ap_ready <= ap_const_logic_0;
        end if; 
    end process;


    real_start_assign_proc : process(ap_start, start_full_n, start_once_reg)
    begin
        if (((start_once_reg = ap_const_logic_0) and (start_full_n = ap_const_logic_0))) then 
            real_start <= ap_const_logic_0;
        else 
            real_start <= ap_start;
        end if; 
    end process;

    start_out <= real_start;

    start_write_assign_proc : process(real_start, start_once_reg)
    begin
        if (((start_once_reg = ap_const_logic_0) and (real_start = ap_const_logic_1))) then 
            start_write <= ap_const_logic_1;
        else 
            start_write <= ap_const_logic_0;
        end if; 
    end process;

    tmp_1_fu_186_p3 <= p_Val2_3_reg_103(3 downto 3);
    tmp_3_fu_194_p3 <= p_Val2_3_reg_103(2 downto 2);
    tmp_4_fu_202_p1 <= p_Val2_s_reg_116(1 - 1 downto 0);
    tmp_5_fu_206_p3 <= p_Val2_s_reg_116(1 downto 1);
    tmp_6_fu_214_p3 <= p_Val2_s_reg_116(1 downto 1);
    tmp_7_fu_222_p3 <= tmp_User_V_6_reg_142(2 downto 2);
end behav;
