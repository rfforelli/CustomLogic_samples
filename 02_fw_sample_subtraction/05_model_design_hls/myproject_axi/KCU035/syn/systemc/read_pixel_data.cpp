// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2018.3
// Copyright (C) 1986-2018 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

#include "read_pixel_data.h"
#include "AESL_pkg.h"

using namespace std;

namespace ap_rtl {

const sc_logic read_pixel_data::ap_const_logic_1 = sc_dt::Log_1;
const sc_logic read_pixel_data::ap_const_logic_0 = sc_dt::Log_0;
const sc_lv<5> read_pixel_data::ap_ST_fsm_state1 = "1";
const sc_lv<5> read_pixel_data::ap_ST_fsm_state2 = "10";
const sc_lv<5> read_pixel_data::ap_ST_fsm_state3 = "100";
const sc_lv<5> read_pixel_data::ap_ST_fsm_state4 = "1000";
const sc_lv<5> read_pixel_data::ap_ST_fsm_state5 = "10000";
const bool read_pixel_data::ap_const_boolean_1 = true;
const sc_lv<32> read_pixel_data::ap_const_lv32_0 = "00000000000000000000000000000000";
const sc_lv<128> read_pixel_data::ap_const_lv128_lc_1 = "00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
const sc_lv<32> read_pixel_data::ap_const_lv32_1 = "1";
const sc_lv<1> read_pixel_data::ap_const_lv1_0 = "0";
const sc_lv<32> read_pixel_data::ap_const_lv32_3 = "11";
const sc_lv<1> read_pixel_data::ap_const_lv1_1 = "1";
const sc_lv<32> read_pixel_data::ap_const_lv32_2 = "10";
const sc_lv<4> read_pixel_data::ap_const_lv4_0 = "0000";
const sc_lv<32> read_pixel_data::ap_const_lv32_4 = "100";

read_pixel_data::read_pixel_data(sc_module_name name) : sc_module(name), mVcdFile(0) {

    SC_METHOD(thread_ap_clk_no_reset_);
    dont_initialize();
    sensitive << ( ap_clk.pos() );

    SC_METHOD(thread_StreamOut_V_Data_V1_status);
    sensitive << ( StreamOut_V_Data_V_full_n );
    sensitive << ( StreamOut_V_User_V_full_n );

    SC_METHOD(thread_StreamOut_V_Data_V1_update);
    sensitive << ( VideoIn_TVALID );
    sensitive << ( ap_CS_fsm_state2 );
    sensitive << ( tmp_1_fu_186_p3 );
    sensitive << ( ap_CS_fsm_state4 );
    sensitive << ( tmp_7_fu_222_p3 );
    sensitive << ( ap_CS_fsm_state3 );
    sensitive << ( StreamOut_V_Data_V1_status );
    sensitive << ( ap_predicate_op23_write_state2 );
    sensitive << ( ap_predicate_op33_write_state3 );

    SC_METHOD(thread_StreamOut_V_Data_V_blk_n);
    sensitive << ( StreamOut_V_Data_V_full_n );
    sensitive << ( ap_CS_fsm_state2 );
    sensitive << ( tmp_1_fu_186_p3 );
    sensitive << ( ap_CS_fsm_state4 );
    sensitive << ( tmp_3_fu_194_p3 );
    sensitive << ( ap_CS_fsm_state3 );
    sensitive << ( tmp_4_fu_202_p1 );
    sensitive << ( tmp_5_fu_206_p3 );

    SC_METHOD(thread_StreamOut_V_Data_V_din);
    sensitive << ( VideoIn_TVALID );
    sensitive << ( DataBuf_Data_V );
    sensitive << ( ap_CS_fsm_state2 );
    sensitive << ( tmp_1_fu_186_p3 );
    sensitive << ( ap_CS_fsm_state4 );
    sensitive << ( tmp_7_fu_222_p3 );
    sensitive << ( ap_CS_fsm_state3 );
    sensitive << ( StreamOut_V_Data_V1_status );
    sensitive << ( ap_predicate_op23_write_state2 );
    sensitive << ( ap_predicate_op33_write_state3 );

    SC_METHOD(thread_StreamOut_V_Data_V_write);
    sensitive << ( StreamOut_V_Data_V1_update );

    SC_METHOD(thread_StreamOut_V_User_V_blk_n);
    sensitive << ( StreamOut_V_User_V_full_n );
    sensitive << ( ap_CS_fsm_state2 );
    sensitive << ( tmp_1_fu_186_p3 );
    sensitive << ( ap_CS_fsm_state4 );
    sensitive << ( tmp_3_fu_194_p3 );
    sensitive << ( ap_CS_fsm_state3 );
    sensitive << ( tmp_4_fu_202_p1 );
    sensitive << ( tmp_5_fu_206_p3 );

    SC_METHOD(thread_StreamOut_V_User_V_din);
    sensitive << ( VideoIn_TVALID );
    sensitive << ( ap_CS_fsm_state2 );
    sensitive << ( tmp_1_fu_186_p3 );
    sensitive << ( ap_CS_fsm_state4 );
    sensitive << ( tmp_7_fu_222_p3 );
    sensitive << ( ap_CS_fsm_state3 );
    sensitive << ( StreamOut_V_Data_V1_status );
    sensitive << ( ap_predicate_op23_write_state2 );
    sensitive << ( ap_predicate_op33_write_state3 );
    sensitive << ( p_Val2_3_reg_103 );
    sensitive << ( p_Val2_s_reg_116 );
    sensitive << ( tmp_User_V_6_reg_142 );

    SC_METHOD(thread_StreamOut_V_User_V_write);
    sensitive << ( StreamOut_V_Data_V1_update );

    SC_METHOD(thread_VideoIn_TDATA_blk_n);
    sensitive << ( VideoIn_TVALID );
    sensitive << ( ap_CS_fsm_state2 );
    sensitive << ( tmp_1_fu_186_p3 );
    sensitive << ( ap_CS_fsm_state4 );
    sensitive << ( tmp_7_fu_222_p3 );

    SC_METHOD(thread_VideoIn_TREADY);
    sensitive << ( VideoIn_TVALID );
    sensitive << ( ap_CS_fsm_state2 );
    sensitive << ( tmp_1_fu_186_p3 );
    sensitive << ( ap_CS_fsm_state4 );
    sensitive << ( tmp_7_fu_222_p3 );
    sensitive << ( StreamOut_V_Data_V1_status );
    sensitive << ( ap_predicate_op23_write_state2 );

    SC_METHOD(thread_ap_CS_fsm_state1);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state2);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state3);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state4);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state5);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_block_state1);
    sensitive << ( real_start );
    sensitive << ( ap_done_reg );

    SC_METHOD(thread_ap_block_state2);
    sensitive << ( VideoIn_TVALID );
    sensitive << ( tmp_1_fu_186_p3 );
    sensitive << ( StreamOut_V_Data_V1_status );
    sensitive << ( ap_predicate_op23_write_state2 );

    SC_METHOD(thread_ap_block_state3);
    sensitive << ( StreamOut_V_Data_V1_status );
    sensitive << ( ap_predicate_op33_write_state3 );

    SC_METHOD(thread_ap_block_state4);
    sensitive << ( VideoIn_TVALID );
    sensitive << ( tmp_7_fu_222_p3 );
    sensitive << ( StreamOut_V_Data_V1_status );

    SC_METHOD(thread_ap_condition_107);
    sensitive << ( VideoIn_TVALID );
    sensitive << ( ap_CS_fsm_state2 );
    sensitive << ( tmp_1_fu_186_p3 );
    sensitive << ( StreamOut_V_Data_V1_status );
    sensitive << ( ap_predicate_op23_write_state2 );

    SC_METHOD(thread_ap_done);
    sensitive << ( ap_done_reg );
    sensitive << ( ap_CS_fsm_state5 );
    sensitive << ( inFrame_reg_128 );

    SC_METHOD(thread_ap_idle);
    sensitive << ( real_start );
    sensitive << ( ap_CS_fsm_state1 );

    SC_METHOD(thread_ap_phi_mux_DataBuf_User_V_3_phi_fu_158_p4);
    sensitive << ( tmp_6_reg_247 );
    sensitive << ( ap_CS_fsm_state5 );
    sensitive << ( tmp_User_V_6_reg_142 );
    sensitive << ( DataBuf_User_V_3_reg_154 );

    SC_METHOD(thread_ap_predicate_op23_write_state2);
    sensitive << ( tmp_1_fu_186_p3 );
    sensitive << ( tmp_3_fu_194_p3 );

    SC_METHOD(thread_ap_predicate_op33_write_state3);
    sensitive << ( tmp_4_fu_202_p1 );
    sensitive << ( tmp_5_fu_206_p3 );

    SC_METHOD(thread_ap_ready);
    sensitive << ( internal_ap_ready );

    SC_METHOD(thread_internal_ap_ready);
    sensitive << ( ap_CS_fsm_state5 );
    sensitive << ( inFrame_reg_128 );

    SC_METHOD(thread_real_start);
    sensitive << ( ap_start );
    sensitive << ( start_full_n );
    sensitive << ( start_once_reg );

    SC_METHOD(thread_start_out);
    sensitive << ( real_start );

    SC_METHOD(thread_start_write);
    sensitive << ( real_start );
    sensitive << ( start_once_reg );

    SC_METHOD(thread_tmp_1_fu_186_p3);
    sensitive << ( p_Val2_3_reg_103 );

    SC_METHOD(thread_tmp_3_fu_194_p3);
    sensitive << ( p_Val2_3_reg_103 );

    SC_METHOD(thread_tmp_4_fu_202_p1);
    sensitive << ( p_Val2_s_reg_116 );

    SC_METHOD(thread_tmp_5_fu_206_p3);
    sensitive << ( p_Val2_s_reg_116 );

    SC_METHOD(thread_tmp_6_fu_214_p3);
    sensitive << ( p_Val2_s_reg_116 );

    SC_METHOD(thread_tmp_7_fu_222_p3);
    sensitive << ( tmp_User_V_6_reg_142 );

    SC_METHOD(thread_ap_NS_fsm);
    sensitive << ( real_start );
    sensitive << ( ap_done_reg );
    sensitive << ( ap_CS_fsm );
    sensitive << ( ap_CS_fsm_state1 );
    sensitive << ( VideoIn_TVALID );
    sensitive << ( ap_CS_fsm_state2 );
    sensitive << ( tmp_1_fu_186_p3 );
    sensitive << ( ap_CS_fsm_state4 );
    sensitive << ( tmp_7_fu_222_p3 );
    sensitive << ( ap_CS_fsm_state3 );
    sensitive << ( StreamOut_V_Data_V1_status );
    sensitive << ( ap_predicate_op23_write_state2 );
    sensitive << ( tmp_6_fu_214_p3 );
    sensitive << ( ap_predicate_op33_write_state3 );
    sensitive << ( ap_CS_fsm_state5 );
    sensitive << ( inFrame_reg_128 );

    start_once_reg = SC_LOGIC_0;
    ap_done_reg = SC_LOGIC_0;
    ap_CS_fsm = "00001";
    DataBuf_Data_V = "00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    static int apTFileNum = 0;
    stringstream apTFilenSS;
    apTFilenSS << "read_pixel_data_sc_trace_" << apTFileNum ++;
    string apTFn = apTFilenSS.str();
    mVcdFile = sc_create_vcd_trace_file(apTFn.c_str());
    mVcdFile->set_time_unit(1, SC_PS);
    if (1) {
#ifdef __HLS_TRACE_LEVEL_PORT_HIER__
    sc_trace(mVcdFile, ap_clk, "(port)ap_clk");
    sc_trace(mVcdFile, ap_rst, "(port)ap_rst");
    sc_trace(mVcdFile, ap_start, "(port)ap_start");
    sc_trace(mVcdFile, start_full_n, "(port)start_full_n");
    sc_trace(mVcdFile, ap_done, "(port)ap_done");
    sc_trace(mVcdFile, ap_continue, "(port)ap_continue");
    sc_trace(mVcdFile, ap_idle, "(port)ap_idle");
    sc_trace(mVcdFile, ap_ready, "(port)ap_ready");
    sc_trace(mVcdFile, start_out, "(port)start_out");
    sc_trace(mVcdFile, start_write, "(port)start_write");
    sc_trace(mVcdFile, VideoIn_TDATA, "(port)VideoIn_TDATA");
    sc_trace(mVcdFile, VideoIn_TVALID, "(port)VideoIn_TVALID");
    sc_trace(mVcdFile, VideoIn_TREADY, "(port)VideoIn_TREADY");
    sc_trace(mVcdFile, VideoIn_TUSER, "(port)VideoIn_TUSER");
    sc_trace(mVcdFile, StreamOut_V_Data_V_din, "(port)StreamOut_V_Data_V_din");
    sc_trace(mVcdFile, StreamOut_V_Data_V_full_n, "(port)StreamOut_V_Data_V_full_n");
    sc_trace(mVcdFile, StreamOut_V_Data_V_write, "(port)StreamOut_V_Data_V_write");
    sc_trace(mVcdFile, StreamOut_V_User_V_din, "(port)StreamOut_V_User_V_din");
    sc_trace(mVcdFile, StreamOut_V_User_V_full_n, "(port)StreamOut_V_User_V_full_n");
    sc_trace(mVcdFile, StreamOut_V_User_V_write, "(port)StreamOut_V_User_V_write");
#endif
#ifdef __HLS_TRACE_LEVEL_INT__
    sc_trace(mVcdFile, real_start, "real_start");
    sc_trace(mVcdFile, start_once_reg, "start_once_reg");
    sc_trace(mVcdFile, ap_done_reg, "ap_done_reg");
    sc_trace(mVcdFile, ap_CS_fsm, "ap_CS_fsm");
    sc_trace(mVcdFile, ap_CS_fsm_state1, "ap_CS_fsm_state1");
    sc_trace(mVcdFile, internal_ap_ready, "internal_ap_ready");
    sc_trace(mVcdFile, DataBuf_Data_V, "DataBuf_Data_V");
    sc_trace(mVcdFile, VideoIn_TDATA_blk_n, "VideoIn_TDATA_blk_n");
    sc_trace(mVcdFile, ap_CS_fsm_state2, "ap_CS_fsm_state2");
    sc_trace(mVcdFile, tmp_1_fu_186_p3, "tmp_1_fu_186_p3");
    sc_trace(mVcdFile, ap_CS_fsm_state4, "ap_CS_fsm_state4");
    sc_trace(mVcdFile, tmp_7_fu_222_p3, "tmp_7_fu_222_p3");
    sc_trace(mVcdFile, StreamOut_V_Data_V_blk_n, "StreamOut_V_Data_V_blk_n");
    sc_trace(mVcdFile, tmp_3_fu_194_p3, "tmp_3_fu_194_p3");
    sc_trace(mVcdFile, ap_CS_fsm_state3, "ap_CS_fsm_state3");
    sc_trace(mVcdFile, tmp_4_fu_202_p1, "tmp_4_fu_202_p1");
    sc_trace(mVcdFile, tmp_5_fu_206_p3, "tmp_5_fu_206_p3");
    sc_trace(mVcdFile, StreamOut_V_User_V_blk_n, "StreamOut_V_User_V_blk_n");
    sc_trace(mVcdFile, StreamOut_V_Data_V1_status, "StreamOut_V_Data_V1_status");
    sc_trace(mVcdFile, ap_predicate_op23_write_state2, "ap_predicate_op23_write_state2");
    sc_trace(mVcdFile, ap_block_state2, "ap_block_state2");
    sc_trace(mVcdFile, tmp_6_fu_214_p3, "tmp_6_fu_214_p3");
    sc_trace(mVcdFile, tmp_6_reg_247, "tmp_6_reg_247");
    sc_trace(mVcdFile, ap_predicate_op33_write_state3, "ap_predicate_op33_write_state3");
    sc_trace(mVcdFile, ap_block_state3, "ap_block_state3");
    sc_trace(mVcdFile, ap_block_state4, "ap_block_state4");
    sc_trace(mVcdFile, p_Val2_3_reg_103, "p_Val2_3_reg_103");
    sc_trace(mVcdFile, ap_block_state1, "ap_block_state1");
    sc_trace(mVcdFile, ap_phi_mux_DataBuf_User_V_3_phi_fu_158_p4, "ap_phi_mux_DataBuf_User_V_3_phi_fu_158_p4");
    sc_trace(mVcdFile, ap_CS_fsm_state5, "ap_CS_fsm_state5");
    sc_trace(mVcdFile, inFrame_reg_128, "inFrame_reg_128");
    sc_trace(mVcdFile, p_Val2_s_reg_116, "p_Val2_s_reg_116");
    sc_trace(mVcdFile, tmp_User_V_6_reg_142, "tmp_User_V_6_reg_142");
    sc_trace(mVcdFile, DataBuf_User_V_3_reg_154, "DataBuf_User_V_3_reg_154");
    sc_trace(mVcdFile, StreamOut_V_Data_V1_update, "StreamOut_V_Data_V1_update");
    sc_trace(mVcdFile, ap_NS_fsm, "ap_NS_fsm");
    sc_trace(mVcdFile, ap_condition_107, "ap_condition_107");
#endif

    }
}

read_pixel_data::~read_pixel_data() {
    if (mVcdFile) 
        sc_close_vcd_trace_file(mVcdFile);

}

void read_pixel_data::thread_ap_clk_no_reset_() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state3.read()) && 
         !(esl_seteq<1,1,1>(ap_const_logic_0, StreamOut_V_Data_V1_status.read()) && esl_seteq<1,1,1>(ap_const_boolean_1, ap_predicate_op33_write_state3.read())) && 
         esl_seteq<1,1,1>(ap_const_lv1_0, tmp_6_fu_214_p3.read()))) {
        DataBuf_User_V_3_reg_154 = p_Val2_s_reg_116.read();
    } else if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state5.read()) && 
                esl_seteq<1,1,1>(ap_const_lv1_1, tmp_6_reg_247.read()))) {
        DataBuf_User_V_3_reg_154 = tmp_User_V_6_reg_142.read();
    }
    if ( ap_rst.read() == ap_const_logic_1) {
        ap_CS_fsm = ap_ST_fsm_state1;
    } else {
        ap_CS_fsm = ap_NS_fsm.read();
    }
    if ( ap_rst.read() == ap_const_logic_1) {
        ap_done_reg = ap_const_logic_0;
    } else {
        if (esl_seteq<1,1,1>(ap_const_logic_1, ap_continue.read())) {
            ap_done_reg = ap_const_logic_0;
        } else if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state5.read()) && 
                    esl_seteq<1,1,1>(ap_const_lv1_0, inFrame_reg_128.read()))) {
            ap_done_reg = ap_const_logic_1;
        }
    }
    if (esl_seteq<1,1,1>(ap_condition_107.read(), ap_const_boolean_1)) {
        if (esl_seteq<1,1,1>(tmp_1_fu_186_p3.read(), ap_const_lv1_0)) {
            inFrame_reg_128 = ap_const_lv1_1;
        } else if (esl_seteq<1,1,1>(tmp_1_fu_186_p3.read(), ap_const_lv1_1)) {
            inFrame_reg_128 = ap_const_lv1_0;
        }
    }
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state5.read()) && 
         esl_seteq<1,1,1>(ap_const_lv1_1, inFrame_reg_128.read()))) {
        p_Val2_3_reg_103 = ap_phi_mux_DataBuf_User_V_3_phi_fu_158_p4.read();
    } else if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read()) && 
                !(esl_seteq<1,1,1>(ap_const_logic_0, real_start.read()) || esl_seteq<1,1,1>(ap_done_reg.read(), ap_const_logic_1)))) {
        p_Val2_3_reg_103 = ap_const_lv4_0;
    }
    if (esl_seteq<1,1,1>(ap_condition_107.read(), ap_const_boolean_1)) {
        if (esl_seteq<1,1,1>(tmp_1_fu_186_p3.read(), ap_const_lv1_0)) {
            p_Val2_s_reg_116 = VideoIn_TUSER.read();
        } else if (esl_seteq<1,1,1>(tmp_1_fu_186_p3.read(), ap_const_lv1_1)) {
            p_Val2_s_reg_116 = p_Val2_3_reg_103.read();
        }
    }
    if ( ap_rst.read() == ap_const_logic_1) {
        start_once_reg = ap_const_logic_0;
    } else {
        if ((esl_seteq<1,1,1>(ap_const_logic_1, real_start.read()) && 
             esl_seteq<1,1,1>(ap_const_logic_0, internal_ap_ready.read()))) {
            start_once_reg = ap_const_logic_1;
        } else if (esl_seteq<1,1,1>(ap_const_logic_1, internal_ap_ready.read())) {
            start_once_reg = ap_const_logic_0;
        }
    }
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state3.read()) && 
         !(esl_seteq<1,1,1>(ap_const_logic_0, StreamOut_V_Data_V1_status.read()) && esl_seteq<1,1,1>(ap_const_boolean_1, ap_predicate_op33_write_state3.read())) && 
         esl_seteq<1,1,1>(ap_const_lv1_1, tmp_6_fu_214_p3.read()))) {
        tmp_User_V_6_reg_142 = p_Val2_s_reg_116.read();
    } else if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state4.read()) && 
                esl_seteq<1,1,1>(ap_const_lv1_0, tmp_7_fu_222_p3.read()) && 
                !(esl_seteq<1,1,1>(ap_const_logic_0, StreamOut_V_Data_V1_status.read()) || (esl_seteq<1,1,1>(ap_const_lv1_0, tmp_7_fu_222_p3.read()) && 
  esl_seteq<1,1,1>(ap_const_logic_0, VideoIn_TVALID.read()))))) {
        tmp_User_V_6_reg_142 = VideoIn_TUSER.read();
    }
    if (((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state2.read()) && 
  esl_seteq<1,1,1>(tmp_1_fu_186_p3.read(), ap_const_lv1_0) && 
  !((esl_seteq<1,1,1>(tmp_1_fu_186_p3.read(), ap_const_lv1_0) && 
  esl_seteq<1,1,1>(ap_const_logic_0, VideoIn_TVALID.read())) || (esl_seteq<1,1,1>(ap_const_logic_0, StreamOut_V_Data_V1_status.read()) && 
  esl_seteq<1,1,1>(ap_const_boolean_1, ap_predicate_op23_write_state2.read())))) || (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state4.read()) && 
  esl_seteq<1,1,1>(ap_const_lv1_0, tmp_7_fu_222_p3.read()) && 
  !(esl_seteq<1,1,1>(ap_const_logic_0, StreamOut_V_Data_V1_status.read()) || (esl_seteq<1,1,1>(ap_const_lv1_0, tmp_7_fu_222_p3.read()) && 
  esl_seteq<1,1,1>(ap_const_logic_0, VideoIn_TVALID.read())))))) {
        DataBuf_Data_V = VideoIn_TDATA.read();
    }
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state3.read()) && !(esl_seteq<1,1,1>(ap_const_logic_0, StreamOut_V_Data_V1_status.read()) && esl_seteq<1,1,1>(ap_const_boolean_1, ap_predicate_op33_write_state3.read())))) {
        tmp_6_reg_247 = p_Val2_s_reg_116.read().range(1, 1);
    }
}

void read_pixel_data::thread_StreamOut_V_Data_V1_status() {
    StreamOut_V_Data_V1_status = (StreamOut_V_Data_V_full_n.read() & StreamOut_V_User_V_full_n.read());
}

void read_pixel_data::thread_StreamOut_V_Data_V1_update() {
    if (((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state4.read()) && 
          !(esl_seteq<1,1,1>(ap_const_logic_0, StreamOut_V_Data_V1_status.read()) || (esl_seteq<1,1,1>(ap_const_lv1_0, tmp_7_fu_222_p3.read()) && 
  esl_seteq<1,1,1>(ap_const_logic_0, VideoIn_TVALID.read())))) || 
         (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state2.read()) && 
          esl_seteq<1,1,1>(ap_const_boolean_1, ap_predicate_op23_write_state2.read()) && 
          !((esl_seteq<1,1,1>(tmp_1_fu_186_p3.read(), ap_const_lv1_0) && 
  esl_seteq<1,1,1>(ap_const_logic_0, VideoIn_TVALID.read())) || (esl_seteq<1,1,1>(ap_const_logic_0, StreamOut_V_Data_V1_status.read()) && 
  esl_seteq<1,1,1>(ap_const_boolean_1, ap_predicate_op23_write_state2.read())))) || 
         (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state3.read()) && 
          esl_seteq<1,1,1>(ap_const_boolean_1, ap_predicate_op33_write_state3.read()) && 
          !(esl_seteq<1,1,1>(ap_const_logic_0, StreamOut_V_Data_V1_status.read()) && esl_seteq<1,1,1>(ap_const_boolean_1, ap_predicate_op33_write_state3.read()))))) {
        StreamOut_V_Data_V1_update = ap_const_logic_1;
    } else {
        StreamOut_V_Data_V1_update = ap_const_logic_0;
    }
}

void read_pixel_data::thread_StreamOut_V_Data_V_blk_n() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state4.read()) || 
         (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state2.read()) && 
          esl_seteq<1,1,1>(tmp_1_fu_186_p3.read(), ap_const_lv1_1) && 
          esl_seteq<1,1,1>(ap_const_lv1_0, tmp_3_fu_194_p3.read())) || 
         (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state3.read()) && 
          esl_seteq<1,1,1>(ap_const_lv1_1, tmp_4_fu_202_p1.read()) && 
          esl_seteq<1,1,1>(ap_const_lv1_0, tmp_5_fu_206_p3.read())))) {
        StreamOut_V_Data_V_blk_n = StreamOut_V_Data_V_full_n.read();
    } else {
        StreamOut_V_Data_V_blk_n = ap_const_logic_1;
    }
}

void read_pixel_data::thread_StreamOut_V_Data_V_din() {
    if (((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state4.read()) && 
          !(esl_seteq<1,1,1>(ap_const_logic_0, StreamOut_V_Data_V1_status.read()) || (esl_seteq<1,1,1>(ap_const_lv1_0, tmp_7_fu_222_p3.read()) && 
  esl_seteq<1,1,1>(ap_const_logic_0, VideoIn_TVALID.read())))) || 
         (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state3.read()) && 
          esl_seteq<1,1,1>(ap_const_boolean_1, ap_predicate_op33_write_state3.read()) && 
          !(esl_seteq<1,1,1>(ap_const_logic_0, StreamOut_V_Data_V1_status.read()) && esl_seteq<1,1,1>(ap_const_boolean_1, ap_predicate_op33_write_state3.read()))))) {
        StreamOut_V_Data_V_din = DataBuf_Data_V.read();
    } else if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state2.read()) && 
                esl_seteq<1,1,1>(ap_const_boolean_1, ap_predicate_op23_write_state2.read()) && 
                !((esl_seteq<1,1,1>(tmp_1_fu_186_p3.read(), ap_const_lv1_0) && 
  esl_seteq<1,1,1>(ap_const_logic_0, VideoIn_TVALID.read())) || (esl_seteq<1,1,1>(ap_const_logic_0, StreamOut_V_Data_V1_status.read()) && 
  esl_seteq<1,1,1>(ap_const_boolean_1, ap_predicate_op23_write_state2.read()))))) {
        StreamOut_V_Data_V_din = ap_const_lv128_lc_1;
    } else {
        StreamOut_V_Data_V_din = "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
    }
}

void read_pixel_data::thread_StreamOut_V_Data_V_write() {
    StreamOut_V_Data_V_write = StreamOut_V_Data_V1_update.read();
}

void read_pixel_data::thread_StreamOut_V_User_V_blk_n() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state4.read()) || 
         (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state2.read()) && 
          esl_seteq<1,1,1>(tmp_1_fu_186_p3.read(), ap_const_lv1_1) && 
          esl_seteq<1,1,1>(ap_const_lv1_0, tmp_3_fu_194_p3.read())) || 
         (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state3.read()) && 
          esl_seteq<1,1,1>(ap_const_lv1_1, tmp_4_fu_202_p1.read()) && 
          esl_seteq<1,1,1>(ap_const_lv1_0, tmp_5_fu_206_p3.read())))) {
        StreamOut_V_User_V_blk_n = StreamOut_V_User_V_full_n.read();
    } else {
        StreamOut_V_User_V_blk_n = ap_const_logic_1;
    }
}

void read_pixel_data::thread_StreamOut_V_User_V_din() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state4.read()) && 
         !(esl_seteq<1,1,1>(ap_const_logic_0, StreamOut_V_Data_V1_status.read()) || (esl_seteq<1,1,1>(ap_const_lv1_0, tmp_7_fu_222_p3.read()) && 
  esl_seteq<1,1,1>(ap_const_logic_0, VideoIn_TVALID.read()))))) {
        StreamOut_V_User_V_din = tmp_User_V_6_reg_142.read();
    } else if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state3.read()) && 
                esl_seteq<1,1,1>(ap_const_boolean_1, ap_predicate_op33_write_state3.read()) && 
                !(esl_seteq<1,1,1>(ap_const_logic_0, StreamOut_V_Data_V1_status.read()) && esl_seteq<1,1,1>(ap_const_boolean_1, ap_predicate_op33_write_state3.read())))) {
        StreamOut_V_User_V_din = p_Val2_s_reg_116.read();
    } else if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state2.read()) && 
                esl_seteq<1,1,1>(ap_const_boolean_1, ap_predicate_op23_write_state2.read()) && 
                !((esl_seteq<1,1,1>(tmp_1_fu_186_p3.read(), ap_const_lv1_0) && 
  esl_seteq<1,1,1>(ap_const_logic_0, VideoIn_TVALID.read())) || (esl_seteq<1,1,1>(ap_const_logic_0, StreamOut_V_Data_V1_status.read()) && 
  esl_seteq<1,1,1>(ap_const_boolean_1, ap_predicate_op23_write_state2.read()))))) {
        StreamOut_V_User_V_din = p_Val2_3_reg_103.read();
    } else {
        StreamOut_V_User_V_din =  (sc_lv<4>) ("XXXX");
    }
}

void read_pixel_data::thread_StreamOut_V_User_V_write() {
    StreamOut_V_User_V_write = StreamOut_V_Data_V1_update.read();
}

void read_pixel_data::thread_VideoIn_TDATA_blk_n() {
    if (((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state2.read()) && 
          esl_seteq<1,1,1>(tmp_1_fu_186_p3.read(), ap_const_lv1_0)) || 
         (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state4.read()) && 
          esl_seteq<1,1,1>(ap_const_lv1_0, tmp_7_fu_222_p3.read())))) {
        VideoIn_TDATA_blk_n = VideoIn_TVALID.read();
    } else {
        VideoIn_TDATA_blk_n = ap_const_logic_1;
    }
}

void read_pixel_data::thread_VideoIn_TREADY() {
    if (((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state2.read()) && 
          esl_seteq<1,1,1>(tmp_1_fu_186_p3.read(), ap_const_lv1_0) && 
          !((esl_seteq<1,1,1>(tmp_1_fu_186_p3.read(), ap_const_lv1_0) && 
  esl_seteq<1,1,1>(ap_const_logic_0, VideoIn_TVALID.read())) || (esl_seteq<1,1,1>(ap_const_logic_0, StreamOut_V_Data_V1_status.read()) && 
  esl_seteq<1,1,1>(ap_const_boolean_1, ap_predicate_op23_write_state2.read())))) || 
         (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state4.read()) && 
          esl_seteq<1,1,1>(ap_const_lv1_0, tmp_7_fu_222_p3.read()) && 
          !(esl_seteq<1,1,1>(ap_const_logic_0, StreamOut_V_Data_V1_status.read()) || (esl_seteq<1,1,1>(ap_const_lv1_0, tmp_7_fu_222_p3.read()) && 
  esl_seteq<1,1,1>(ap_const_logic_0, VideoIn_TVALID.read())))))) {
        VideoIn_TREADY = ap_const_logic_1;
    } else {
        VideoIn_TREADY = ap_const_logic_0;
    }
}

void read_pixel_data::thread_ap_CS_fsm_state1() {
    ap_CS_fsm_state1 = ap_CS_fsm.read()[0];
}

void read_pixel_data::thread_ap_CS_fsm_state2() {
    ap_CS_fsm_state2 = ap_CS_fsm.read()[1];
}

void read_pixel_data::thread_ap_CS_fsm_state3() {
    ap_CS_fsm_state3 = ap_CS_fsm.read()[2];
}

void read_pixel_data::thread_ap_CS_fsm_state4() {
    ap_CS_fsm_state4 = ap_CS_fsm.read()[3];
}

void read_pixel_data::thread_ap_CS_fsm_state5() {
    ap_CS_fsm_state5 = ap_CS_fsm.read()[4];
}

void read_pixel_data::thread_ap_block_state1() {
    ap_block_state1 = (esl_seteq<1,1,1>(ap_const_logic_0, real_start.read()) || esl_seteq<1,1,1>(ap_done_reg.read(), ap_const_logic_1));
}

void read_pixel_data::thread_ap_block_state2() {
    ap_block_state2 = ((esl_seteq<1,1,1>(tmp_1_fu_186_p3.read(), ap_const_lv1_0) && 
  esl_seteq<1,1,1>(ap_const_logic_0, VideoIn_TVALID.read())) || (esl_seteq<1,1,1>(ap_const_logic_0, StreamOut_V_Data_V1_status.read()) && 
  esl_seteq<1,1,1>(ap_const_boolean_1, ap_predicate_op23_write_state2.read())));
}

void read_pixel_data::thread_ap_block_state3() {
    ap_block_state3 = (esl_seteq<1,1,1>(ap_const_logic_0, StreamOut_V_Data_V1_status.read()) && esl_seteq<1,1,1>(ap_const_boolean_1, ap_predicate_op33_write_state3.read()));
}

void read_pixel_data::thread_ap_block_state4() {
    ap_block_state4 = (esl_seteq<1,1,1>(ap_const_logic_0, StreamOut_V_Data_V1_status.read()) || (esl_seteq<1,1,1>(ap_const_lv1_0, tmp_7_fu_222_p3.read()) && 
  esl_seteq<1,1,1>(ap_const_logic_0, VideoIn_TVALID.read())));
}

void read_pixel_data::thread_ap_condition_107() {
    ap_condition_107 = (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state2.read()) && !((esl_seteq<1,1,1>(tmp_1_fu_186_p3.read(), ap_const_lv1_0) && 
  esl_seteq<1,1,1>(ap_const_logic_0, VideoIn_TVALID.read())) || (esl_seteq<1,1,1>(ap_const_logic_0, StreamOut_V_Data_V1_status.read()) && 
  esl_seteq<1,1,1>(ap_const_boolean_1, ap_predicate_op23_write_state2.read()))));
}

void read_pixel_data::thread_ap_done() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state5.read()) && 
         esl_seteq<1,1,1>(ap_const_lv1_0, inFrame_reg_128.read()))) {
        ap_done = ap_const_logic_1;
    } else {
        ap_done = ap_done_reg.read();
    }
}

void read_pixel_data::thread_ap_idle() {
    if ((esl_seteq<1,1,1>(ap_const_logic_0, real_start.read()) && 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read()))) {
        ap_idle = ap_const_logic_1;
    } else {
        ap_idle = ap_const_logic_0;
    }
}

void read_pixel_data::thread_ap_phi_mux_DataBuf_User_V_3_phi_fu_158_p4() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state5.read()) && 
         esl_seteq<1,1,1>(ap_const_lv1_1, tmp_6_reg_247.read()))) {
        ap_phi_mux_DataBuf_User_V_3_phi_fu_158_p4 = tmp_User_V_6_reg_142.read();
    } else {
        ap_phi_mux_DataBuf_User_V_3_phi_fu_158_p4 = DataBuf_User_V_3_reg_154.read();
    }
}

void read_pixel_data::thread_ap_predicate_op23_write_state2() {
    ap_predicate_op23_write_state2 = (esl_seteq<1,1,1>(tmp_1_fu_186_p3.read(), ap_const_lv1_1) && esl_seteq<1,1,1>(ap_const_lv1_0, tmp_3_fu_194_p3.read()));
}

void read_pixel_data::thread_ap_predicate_op33_write_state3() {
    ap_predicate_op33_write_state3 = (esl_seteq<1,1,1>(ap_const_lv1_1, tmp_4_fu_202_p1.read()) && esl_seteq<1,1,1>(ap_const_lv1_0, tmp_5_fu_206_p3.read()));
}

void read_pixel_data::thread_ap_ready() {
    ap_ready = internal_ap_ready.read();
}

void read_pixel_data::thread_internal_ap_ready() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state5.read()) && 
         esl_seteq<1,1,1>(ap_const_lv1_0, inFrame_reg_128.read()))) {
        internal_ap_ready = ap_const_logic_1;
    } else {
        internal_ap_ready = ap_const_logic_0;
    }
}

void read_pixel_data::thread_real_start() {
    if ((esl_seteq<1,1,1>(ap_const_logic_0, start_full_n.read()) && 
         esl_seteq<1,1,1>(ap_const_logic_0, start_once_reg.read()))) {
        real_start = ap_const_logic_0;
    } else {
        real_start = ap_start.read();
    }
}

void read_pixel_data::thread_start_out() {
    start_out = real_start.read();
}

void read_pixel_data::thread_start_write() {
    if ((esl_seteq<1,1,1>(ap_const_logic_0, start_once_reg.read()) && 
         esl_seteq<1,1,1>(ap_const_logic_1, real_start.read()))) {
        start_write = ap_const_logic_1;
    } else {
        start_write = ap_const_logic_0;
    }
}

void read_pixel_data::thread_tmp_1_fu_186_p3() {
    tmp_1_fu_186_p3 = p_Val2_3_reg_103.read().range(3, 3);
}

void read_pixel_data::thread_tmp_3_fu_194_p3() {
    tmp_3_fu_194_p3 = p_Val2_3_reg_103.read().range(2, 2);
}

void read_pixel_data::thread_tmp_4_fu_202_p1() {
    tmp_4_fu_202_p1 = p_Val2_s_reg_116.read().range(1-1, 0);
}

void read_pixel_data::thread_tmp_5_fu_206_p3() {
    tmp_5_fu_206_p3 = p_Val2_s_reg_116.read().range(1, 1);
}

void read_pixel_data::thread_tmp_6_fu_214_p3() {
    tmp_6_fu_214_p3 = p_Val2_s_reg_116.read().range(1, 1);
}

void read_pixel_data::thread_tmp_7_fu_222_p3() {
    tmp_7_fu_222_p3 = tmp_User_V_6_reg_142.read().range(2, 2);
}

void read_pixel_data::thread_ap_NS_fsm() {
    switch (ap_CS_fsm.read().to_uint64()) {
        case 1 : 
            if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read()) && !(esl_seteq<1,1,1>(ap_const_logic_0, real_start.read()) || esl_seteq<1,1,1>(ap_done_reg.read(), ap_const_logic_1)))) {
                ap_NS_fsm = ap_ST_fsm_state2;
            } else {
                ap_NS_fsm = ap_ST_fsm_state1;
            }
            break;
        case 2 : 
            if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state2.read()) && !((esl_seteq<1,1,1>(tmp_1_fu_186_p3.read(), ap_const_lv1_0) && 
  esl_seteq<1,1,1>(ap_const_logic_0, VideoIn_TVALID.read())) || (esl_seteq<1,1,1>(ap_const_logic_0, StreamOut_V_Data_V1_status.read()) && 
  esl_seteq<1,1,1>(ap_const_boolean_1, ap_predicate_op23_write_state2.read()))))) {
                ap_NS_fsm = ap_ST_fsm_state3;
            } else {
                ap_NS_fsm = ap_ST_fsm_state2;
            }
            break;
        case 4 : 
            if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state3.read()) && !(esl_seteq<1,1,1>(ap_const_logic_0, StreamOut_V_Data_V1_status.read()) && esl_seteq<1,1,1>(ap_const_boolean_1, ap_predicate_op33_write_state3.read())) && esl_seteq<1,1,1>(ap_const_lv1_1, tmp_6_fu_214_p3.read()))) {
                ap_NS_fsm = ap_ST_fsm_state4;
            } else if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state3.read()) && !(esl_seteq<1,1,1>(ap_const_logic_0, StreamOut_V_Data_V1_status.read()) && esl_seteq<1,1,1>(ap_const_boolean_1, ap_predicate_op33_write_state3.read())) && esl_seteq<1,1,1>(ap_const_lv1_0, tmp_6_fu_214_p3.read()))) {
                ap_NS_fsm = ap_ST_fsm_state5;
            } else {
                ap_NS_fsm = ap_ST_fsm_state3;
            }
            break;
        case 8 : 
            if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state4.read()) && esl_seteq<1,1,1>(ap_const_lv1_0, tmp_7_fu_222_p3.read()) && !(esl_seteq<1,1,1>(ap_const_logic_0, StreamOut_V_Data_V1_status.read()) || (esl_seteq<1,1,1>(ap_const_lv1_0, tmp_7_fu_222_p3.read()) && 
  esl_seteq<1,1,1>(ap_const_logic_0, VideoIn_TVALID.read()))))) {
                ap_NS_fsm = ap_ST_fsm_state4;
            } else if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state4.read()) && !(esl_seteq<1,1,1>(ap_const_logic_0, StreamOut_V_Data_V1_status.read()) || (esl_seteq<1,1,1>(ap_const_lv1_0, tmp_7_fu_222_p3.read()) && 
  esl_seteq<1,1,1>(ap_const_logic_0, VideoIn_TVALID.read()))) && esl_seteq<1,1,1>(tmp_7_fu_222_p3.read(), ap_const_lv1_1))) {
                ap_NS_fsm = ap_ST_fsm_state5;
            } else {
                ap_NS_fsm = ap_ST_fsm_state4;
            }
            break;
        case 16 : 
            if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state5.read()) && esl_seteq<1,1,1>(ap_const_lv1_0, inFrame_reg_128.read()))) {
                ap_NS_fsm = ap_ST_fsm_state1;
            } else {
                ap_NS_fsm = ap_ST_fsm_state2;
            }
            break;
        default : 
            ap_NS_fsm =  (sc_lv<5>) ("XXXXX");
            break;
    }
}

}

