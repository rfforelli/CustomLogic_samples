// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2018.3
// Copyright (C) 1986-2018 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

#include "myproject.h"
#include "AESL_pkg.h"

using namespace std;

namespace ap_rtl {

const sc_lv<128> myproject::ap_const_lv128_lc_1 = "00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
const sc_lv<4> myproject::ap_const_lv4_0 = "0000";
const sc_logic myproject::ap_const_logic_1 = sc_dt::Log_1;
const sc_logic myproject::ap_const_logic_0 = sc_dt::Log_0;

myproject::myproject(sc_module_name name) : sc_module(name), mVcdFile(0) {
    read_pixel_data_U0 = new read_pixel_data("read_pixel_data_U0");
    read_pixel_data_U0->ap_clk(ap_clk);
    read_pixel_data_U0->ap_rst(ap_rst);
    read_pixel_data_U0->ap_start(read_pixel_data_U0_ap_start);
    read_pixel_data_U0->start_full_n(start_for_pix_subtract_U0_full_n);
    read_pixel_data_U0->ap_done(read_pixel_data_U0_ap_done);
    read_pixel_data_U0->ap_continue(read_pixel_data_U0_ap_continue);
    read_pixel_data_U0->ap_idle(read_pixel_data_U0_ap_idle);
    read_pixel_data_U0->ap_ready(read_pixel_data_U0_ap_ready);
    read_pixel_data_U0->start_out(read_pixel_data_U0_start_out);
    read_pixel_data_U0->start_write(read_pixel_data_U0_start_write);
    read_pixel_data_U0->VideoIn_TDATA(VideoIn_TDATA);
    read_pixel_data_U0->VideoIn_TVALID(VideoIn_TVALID);
    read_pixel_data_U0->VideoIn_TREADY(read_pixel_data_U0_VideoIn_TREADY);
    read_pixel_data_U0->VideoIn_TUSER(VideoIn_TUSER);
    read_pixel_data_U0->StreamOut_V_Data_V_din(read_pixel_data_U0_StreamOut_V_Data_V_din);
    read_pixel_data_U0->StreamOut_V_Data_V_full_n(VideoBuffer_V_Data_V_full_n);
    read_pixel_data_U0->StreamOut_V_Data_V_write(read_pixel_data_U0_StreamOut_V_Data_V_write);
    read_pixel_data_U0->StreamOut_V_User_V_din(read_pixel_data_U0_StreamOut_V_User_V_din);
    read_pixel_data_U0->StreamOut_V_User_V_full_n(VideoBuffer_V_User_V_full_n);
    read_pixel_data_U0->StreamOut_V_User_V_write(read_pixel_data_U0_StreamOut_V_User_V_write);
    pix_subtract_U0 = new pix_subtract("pix_subtract_U0");
    pix_subtract_U0->ap_clk(ap_clk);
    pix_subtract_U0->ap_rst(ap_rst);
    pix_subtract_U0->ap_start(pix_subtract_U0_ap_start);
    pix_subtract_U0->start_full_n(start_for_send_output_U0_full_n);
    pix_subtract_U0->ap_done(pix_subtract_U0_ap_done);
    pix_subtract_U0->ap_continue(pix_subtract_U0_ap_continue);
    pix_subtract_U0->ap_idle(pix_subtract_U0_ap_idle);
    pix_subtract_U0->ap_ready(pix_subtract_U0_ap_ready);
    pix_subtract_U0->start_out(pix_subtract_U0_start_out);
    pix_subtract_U0->start_write(pix_subtract_U0_start_write);
    pix_subtract_U0->StreamIn_V_Data_V_dout(VideoBuffer_V_Data_V_dout);
    pix_subtract_U0->StreamIn_V_Data_V_empty_n(VideoBuffer_V_Data_V_empty_n);
    pix_subtract_U0->StreamIn_V_Data_V_read(pix_subtract_U0_StreamIn_V_Data_V_read);
    pix_subtract_U0->StreamIn_V_User_V_dout(VideoBuffer_V_User_V_dout);
    pix_subtract_U0->StreamIn_V_User_V_empty_n(VideoBuffer_V_User_V_empty_n);
    pix_subtract_U0->StreamIn_V_User_V_read(pix_subtract_U0_StreamIn_V_User_V_read);
    pix_subtract_U0->StreamOut_V_Data_V_din(pix_subtract_U0_StreamOut_V_Data_V_din);
    pix_subtract_U0->StreamOut_V_Data_V_full_n(SubtractionOut_V_Dat_full_n);
    pix_subtract_U0->StreamOut_V_Data_V_write(pix_subtract_U0_StreamOut_V_Data_V_write);
    pix_subtract_U0->StreamOut_V_User_V_din(pix_subtract_U0_StreamOut_V_User_V_din);
    pix_subtract_U0->StreamOut_V_User_V_full_n(SubtractionOut_V_Use_full_n);
    pix_subtract_U0->StreamOut_V_User_V_write(pix_subtract_U0_StreamOut_V_User_V_write);
    send_output_U0 = new send_output("send_output_U0");
    send_output_U0->ap_clk(ap_clk);
    send_output_U0->ap_rst(ap_rst);
    send_output_U0->ap_start(send_output_U0_ap_start);
    send_output_U0->ap_done(send_output_U0_ap_done);
    send_output_U0->ap_continue(send_output_U0_ap_continue);
    send_output_U0->ap_idle(send_output_U0_ap_idle);
    send_output_U0->ap_ready(send_output_U0_ap_ready);
    send_output_U0->StreamIn_V_Data_V_dout(SubtractionOut_V_Dat_dout);
    send_output_U0->StreamIn_V_Data_V_empty_n(SubtractionOut_V_Dat_empty_n);
    send_output_U0->StreamIn_V_Data_V_read(send_output_U0_StreamIn_V_Data_V_read);
    send_output_U0->StreamIn_V_User_V_dout(SubtractionOut_V_Use_dout);
    send_output_U0->StreamIn_V_User_V_empty_n(SubtractionOut_V_Use_empty_n);
    send_output_U0->StreamIn_V_User_V_read(send_output_U0_StreamIn_V_User_V_read);
    send_output_U0->VideoOut_TDATA(send_output_U0_VideoOut_TDATA);
    send_output_U0->VideoOut_TVALID(send_output_U0_VideoOut_TVALID);
    send_output_U0->VideoOut_TREADY(VideoOut_TREADY);
    send_output_U0->VideoOut_TUSER(send_output_U0_VideoOut_TUSER);
    VideoBuffer_V_Data_V_U = new fifo_w128_d10240_A("VideoBuffer_V_Data_V_U");
    VideoBuffer_V_Data_V_U->clk(ap_clk);
    VideoBuffer_V_Data_V_U->reset(ap_rst);
    VideoBuffer_V_Data_V_U->if_read_ce(ap_var_for_const0);
    VideoBuffer_V_Data_V_U->if_write_ce(ap_var_for_const0);
    VideoBuffer_V_Data_V_U->if_din(read_pixel_data_U0_StreamOut_V_Data_V_din);
    VideoBuffer_V_Data_V_U->if_full_n(VideoBuffer_V_Data_V_full_n);
    VideoBuffer_V_Data_V_U->if_write(read_pixel_data_U0_StreamOut_V_Data_V_write);
    VideoBuffer_V_Data_V_U->if_dout(VideoBuffer_V_Data_V_dout);
    VideoBuffer_V_Data_V_U->if_empty_n(VideoBuffer_V_Data_V_empty_n);
    VideoBuffer_V_Data_V_U->if_read(pix_subtract_U0_StreamIn_V_Data_V_read);
    VideoBuffer_V_User_V_U = new fifo_w4_d10240_A("VideoBuffer_V_User_V_U");
    VideoBuffer_V_User_V_U->clk(ap_clk);
    VideoBuffer_V_User_V_U->reset(ap_rst);
    VideoBuffer_V_User_V_U->if_read_ce(ap_var_for_const0);
    VideoBuffer_V_User_V_U->if_write_ce(ap_var_for_const0);
    VideoBuffer_V_User_V_U->if_din(read_pixel_data_U0_StreamOut_V_User_V_din);
    VideoBuffer_V_User_V_U->if_full_n(VideoBuffer_V_User_V_full_n);
    VideoBuffer_V_User_V_U->if_write(read_pixel_data_U0_StreamOut_V_User_V_write);
    VideoBuffer_V_User_V_U->if_dout(VideoBuffer_V_User_V_dout);
    VideoBuffer_V_User_V_U->if_empty_n(VideoBuffer_V_User_V_empty_n);
    VideoBuffer_V_User_V_U->if_read(pix_subtract_U0_StreamIn_V_User_V_read);
    SubtractionOut_V_Dat_U = new fifo_w128_d10240_A("SubtractionOut_V_Dat_U");
    SubtractionOut_V_Dat_U->clk(ap_clk);
    SubtractionOut_V_Dat_U->reset(ap_rst);
    SubtractionOut_V_Dat_U->if_read_ce(ap_var_for_const0);
    SubtractionOut_V_Dat_U->if_write_ce(ap_var_for_const0);
    SubtractionOut_V_Dat_U->if_din(pix_subtract_U0_StreamOut_V_Data_V_din);
    SubtractionOut_V_Dat_U->if_full_n(SubtractionOut_V_Dat_full_n);
    SubtractionOut_V_Dat_U->if_write(pix_subtract_U0_StreamOut_V_Data_V_write);
    SubtractionOut_V_Dat_U->if_dout(SubtractionOut_V_Dat_dout);
    SubtractionOut_V_Dat_U->if_empty_n(SubtractionOut_V_Dat_empty_n);
    SubtractionOut_V_Dat_U->if_read(send_output_U0_StreamIn_V_Data_V_read);
    SubtractionOut_V_Use_U = new fifo_w4_d10240_A("SubtractionOut_V_Use_U");
    SubtractionOut_V_Use_U->clk(ap_clk);
    SubtractionOut_V_Use_U->reset(ap_rst);
    SubtractionOut_V_Use_U->if_read_ce(ap_var_for_const0);
    SubtractionOut_V_Use_U->if_write_ce(ap_var_for_const0);
    SubtractionOut_V_Use_U->if_din(pix_subtract_U0_StreamOut_V_User_V_din);
    SubtractionOut_V_Use_U->if_full_n(SubtractionOut_V_Use_full_n);
    SubtractionOut_V_Use_U->if_write(pix_subtract_U0_StreamOut_V_User_V_write);
    SubtractionOut_V_Use_U->if_dout(SubtractionOut_V_Use_dout);
    SubtractionOut_V_Use_U->if_empty_n(SubtractionOut_V_Use_empty_n);
    SubtractionOut_V_Use_U->if_read(send_output_U0_StreamIn_V_User_V_read);
    start_for_pix_subtract_U0_U = new start_for_pix_subtract_U0("start_for_pix_subtract_U0_U");
    start_for_pix_subtract_U0_U->clk(ap_clk);
    start_for_pix_subtract_U0_U->reset(ap_rst);
    start_for_pix_subtract_U0_U->if_read_ce(ap_var_for_const0);
    start_for_pix_subtract_U0_U->if_write_ce(ap_var_for_const0);
    start_for_pix_subtract_U0_U->if_din(start_for_pix_subtract_U0_din);
    start_for_pix_subtract_U0_U->if_full_n(start_for_pix_subtract_U0_full_n);
    start_for_pix_subtract_U0_U->if_write(read_pixel_data_U0_start_write);
    start_for_pix_subtract_U0_U->if_dout(start_for_pix_subtract_U0_dout);
    start_for_pix_subtract_U0_U->if_empty_n(start_for_pix_subtract_U0_empty_n);
    start_for_pix_subtract_U0_U->if_read(pix_subtract_U0_ap_ready);
    start_for_send_output_U0_U = new start_for_send_output_U0("start_for_send_output_U0_U");
    start_for_send_output_U0_U->clk(ap_clk);
    start_for_send_output_U0_U->reset(ap_rst);
    start_for_send_output_U0_U->if_read_ce(ap_var_for_const0);
    start_for_send_output_U0_U->if_write_ce(ap_var_for_const0);
    start_for_send_output_U0_U->if_din(start_for_send_output_U0_din);
    start_for_send_output_U0_U->if_full_n(start_for_send_output_U0_full_n);
    start_for_send_output_U0_U->if_write(pix_subtract_U0_start_write);
    start_for_send_output_U0_U->if_dout(start_for_send_output_U0_dout);
    start_for_send_output_U0_U->if_empty_n(start_for_send_output_U0_empty_n);
    start_for_send_output_U0_U->if_read(send_output_U0_ap_ready);

    SC_METHOD(thread_VideoIn_TREADY);
    sensitive << ( read_pixel_data_U0_VideoIn_TREADY );

    SC_METHOD(thread_VideoOut_TDATA);
    sensitive << ( send_output_U0_VideoOut_TDATA );

    SC_METHOD(thread_VideoOut_TUSER);
    sensitive << ( send_output_U0_VideoOut_TUSER );

    SC_METHOD(thread_VideoOut_TVALID);
    sensitive << ( send_output_U0_VideoOut_TVALID );

    SC_METHOD(thread_ap_done);
    sensitive << ( send_output_U0_ap_done );

    SC_METHOD(thread_ap_idle);
    sensitive << ( read_pixel_data_U0_ap_idle );
    sensitive << ( pix_subtract_U0_ap_idle );
    sensitive << ( send_output_U0_ap_idle );

    SC_METHOD(thread_ap_ready);
    sensitive << ( read_pixel_data_U0_ap_ready );

    SC_METHOD(thread_ap_sync_continue);
    sensitive << ( ap_continue );

    SC_METHOD(thread_ap_sync_done);
    sensitive << ( send_output_U0_ap_done );

    SC_METHOD(thread_ap_sync_ready);
    sensitive << ( read_pixel_data_U0_ap_ready );

    SC_METHOD(thread_pix_subtract_U0_ap_continue);

    SC_METHOD(thread_pix_subtract_U0_ap_start);
    sensitive << ( start_for_pix_subtract_U0_empty_n );

    SC_METHOD(thread_read_pixel_data_U0_ap_continue);

    SC_METHOD(thread_read_pixel_data_U0_ap_start);
    sensitive << ( ap_start );

    SC_METHOD(thread_send_output_U0_ap_continue);
    sensitive << ( ap_continue );

    SC_METHOD(thread_send_output_U0_ap_start);
    sensitive << ( start_for_send_output_U0_empty_n );

    SC_METHOD(thread_send_output_U0_start_full_n);

    SC_METHOD(thread_send_output_U0_start_write);

    SC_METHOD(thread_start_for_pix_subtract_U0_din);

    SC_METHOD(thread_start_for_send_output_U0_din);

    SC_THREAD(thread_ap_var_for_const0);

    static int apTFileNum = 0;
    stringstream apTFilenSS;
    apTFilenSS << "myproject_sc_trace_" << apTFileNum ++;
    string apTFn = apTFilenSS.str();
    mVcdFile = sc_create_vcd_trace_file(apTFn.c_str());
    mVcdFile->set_time_unit(1, SC_PS);
    if (1) {
#ifdef __HLS_TRACE_LEVEL_PORT_HIER__
    sc_trace(mVcdFile, VideoIn_TDATA, "(port)VideoIn_TDATA");
    sc_trace(mVcdFile, VideoIn_TUSER, "(port)VideoIn_TUSER");
    sc_trace(mVcdFile, VideoOut_TDATA, "(port)VideoOut_TDATA");
    sc_trace(mVcdFile, VideoOut_TUSER, "(port)VideoOut_TUSER");
    sc_trace(mVcdFile, ap_clk, "(port)ap_clk");
    sc_trace(mVcdFile, ap_rst, "(port)ap_rst");
    sc_trace(mVcdFile, VideoIn_TVALID, "(port)VideoIn_TVALID");
    sc_trace(mVcdFile, VideoIn_TREADY, "(port)VideoIn_TREADY");
    sc_trace(mVcdFile, ap_start, "(port)ap_start");
    sc_trace(mVcdFile, VideoOut_TVALID, "(port)VideoOut_TVALID");
    sc_trace(mVcdFile, VideoOut_TREADY, "(port)VideoOut_TREADY");
    sc_trace(mVcdFile, ap_done, "(port)ap_done");
    sc_trace(mVcdFile, ap_ready, "(port)ap_ready");
    sc_trace(mVcdFile, ap_idle, "(port)ap_idle");
    sc_trace(mVcdFile, ap_continue, "(port)ap_continue");
#endif
#ifdef __HLS_TRACE_LEVEL_INT__
    sc_trace(mVcdFile, read_pixel_data_U0_ap_start, "read_pixel_data_U0_ap_start");
    sc_trace(mVcdFile, read_pixel_data_U0_ap_done, "read_pixel_data_U0_ap_done");
    sc_trace(mVcdFile, read_pixel_data_U0_ap_continue, "read_pixel_data_U0_ap_continue");
    sc_trace(mVcdFile, read_pixel_data_U0_ap_idle, "read_pixel_data_U0_ap_idle");
    sc_trace(mVcdFile, read_pixel_data_U0_ap_ready, "read_pixel_data_U0_ap_ready");
    sc_trace(mVcdFile, read_pixel_data_U0_start_out, "read_pixel_data_U0_start_out");
    sc_trace(mVcdFile, read_pixel_data_U0_start_write, "read_pixel_data_U0_start_write");
    sc_trace(mVcdFile, read_pixel_data_U0_VideoIn_TREADY, "read_pixel_data_U0_VideoIn_TREADY");
    sc_trace(mVcdFile, read_pixel_data_U0_StreamOut_V_Data_V_din, "read_pixel_data_U0_StreamOut_V_Data_V_din");
    sc_trace(mVcdFile, read_pixel_data_U0_StreamOut_V_Data_V_write, "read_pixel_data_U0_StreamOut_V_Data_V_write");
    sc_trace(mVcdFile, read_pixel_data_U0_StreamOut_V_User_V_din, "read_pixel_data_U0_StreamOut_V_User_V_din");
    sc_trace(mVcdFile, read_pixel_data_U0_StreamOut_V_User_V_write, "read_pixel_data_U0_StreamOut_V_User_V_write");
    sc_trace(mVcdFile, pix_subtract_U0_ap_start, "pix_subtract_U0_ap_start");
    sc_trace(mVcdFile, pix_subtract_U0_ap_done, "pix_subtract_U0_ap_done");
    sc_trace(mVcdFile, pix_subtract_U0_ap_continue, "pix_subtract_U0_ap_continue");
    sc_trace(mVcdFile, pix_subtract_U0_ap_idle, "pix_subtract_U0_ap_idle");
    sc_trace(mVcdFile, pix_subtract_U0_ap_ready, "pix_subtract_U0_ap_ready");
    sc_trace(mVcdFile, pix_subtract_U0_start_out, "pix_subtract_U0_start_out");
    sc_trace(mVcdFile, pix_subtract_U0_start_write, "pix_subtract_U0_start_write");
    sc_trace(mVcdFile, pix_subtract_U0_StreamIn_V_Data_V_read, "pix_subtract_U0_StreamIn_V_Data_V_read");
    sc_trace(mVcdFile, pix_subtract_U0_StreamIn_V_User_V_read, "pix_subtract_U0_StreamIn_V_User_V_read");
    sc_trace(mVcdFile, pix_subtract_U0_StreamOut_V_Data_V_din, "pix_subtract_U0_StreamOut_V_Data_V_din");
    sc_trace(mVcdFile, pix_subtract_U0_StreamOut_V_Data_V_write, "pix_subtract_U0_StreamOut_V_Data_V_write");
    sc_trace(mVcdFile, pix_subtract_U0_StreamOut_V_User_V_din, "pix_subtract_U0_StreamOut_V_User_V_din");
    sc_trace(mVcdFile, pix_subtract_U0_StreamOut_V_User_V_write, "pix_subtract_U0_StreamOut_V_User_V_write");
    sc_trace(mVcdFile, send_output_U0_ap_start, "send_output_U0_ap_start");
    sc_trace(mVcdFile, send_output_U0_ap_done, "send_output_U0_ap_done");
    sc_trace(mVcdFile, send_output_U0_ap_continue, "send_output_U0_ap_continue");
    sc_trace(mVcdFile, send_output_U0_ap_idle, "send_output_U0_ap_idle");
    sc_trace(mVcdFile, send_output_U0_ap_ready, "send_output_U0_ap_ready");
    sc_trace(mVcdFile, send_output_U0_StreamIn_V_Data_V_read, "send_output_U0_StreamIn_V_Data_V_read");
    sc_trace(mVcdFile, send_output_U0_StreamIn_V_User_V_read, "send_output_U0_StreamIn_V_User_V_read");
    sc_trace(mVcdFile, send_output_U0_VideoOut_TDATA, "send_output_U0_VideoOut_TDATA");
    sc_trace(mVcdFile, send_output_U0_VideoOut_TVALID, "send_output_U0_VideoOut_TVALID");
    sc_trace(mVcdFile, send_output_U0_VideoOut_TUSER, "send_output_U0_VideoOut_TUSER");
    sc_trace(mVcdFile, ap_sync_continue, "ap_sync_continue");
    sc_trace(mVcdFile, VideoBuffer_V_Data_V_full_n, "VideoBuffer_V_Data_V_full_n");
    sc_trace(mVcdFile, VideoBuffer_V_Data_V_dout, "VideoBuffer_V_Data_V_dout");
    sc_trace(mVcdFile, VideoBuffer_V_Data_V_empty_n, "VideoBuffer_V_Data_V_empty_n");
    sc_trace(mVcdFile, VideoBuffer_V_User_V_full_n, "VideoBuffer_V_User_V_full_n");
    sc_trace(mVcdFile, VideoBuffer_V_User_V_dout, "VideoBuffer_V_User_V_dout");
    sc_trace(mVcdFile, VideoBuffer_V_User_V_empty_n, "VideoBuffer_V_User_V_empty_n");
    sc_trace(mVcdFile, SubtractionOut_V_Dat_full_n, "SubtractionOut_V_Dat_full_n");
    sc_trace(mVcdFile, SubtractionOut_V_Dat_dout, "SubtractionOut_V_Dat_dout");
    sc_trace(mVcdFile, SubtractionOut_V_Dat_empty_n, "SubtractionOut_V_Dat_empty_n");
    sc_trace(mVcdFile, SubtractionOut_V_Use_full_n, "SubtractionOut_V_Use_full_n");
    sc_trace(mVcdFile, SubtractionOut_V_Use_dout, "SubtractionOut_V_Use_dout");
    sc_trace(mVcdFile, SubtractionOut_V_Use_empty_n, "SubtractionOut_V_Use_empty_n");
    sc_trace(mVcdFile, ap_sync_done, "ap_sync_done");
    sc_trace(mVcdFile, ap_sync_ready, "ap_sync_ready");
    sc_trace(mVcdFile, start_for_pix_subtract_U0_din, "start_for_pix_subtract_U0_din");
    sc_trace(mVcdFile, start_for_pix_subtract_U0_full_n, "start_for_pix_subtract_U0_full_n");
    sc_trace(mVcdFile, start_for_pix_subtract_U0_dout, "start_for_pix_subtract_U0_dout");
    sc_trace(mVcdFile, start_for_pix_subtract_U0_empty_n, "start_for_pix_subtract_U0_empty_n");
    sc_trace(mVcdFile, start_for_send_output_U0_din, "start_for_send_output_U0_din");
    sc_trace(mVcdFile, start_for_send_output_U0_full_n, "start_for_send_output_U0_full_n");
    sc_trace(mVcdFile, start_for_send_output_U0_dout, "start_for_send_output_U0_dout");
    sc_trace(mVcdFile, start_for_send_output_U0_empty_n, "start_for_send_output_U0_empty_n");
    sc_trace(mVcdFile, send_output_U0_start_full_n, "send_output_U0_start_full_n");
    sc_trace(mVcdFile, send_output_U0_start_write, "send_output_U0_start_write");
#endif

    }
}

myproject::~myproject() {
    if (mVcdFile) 
        sc_close_vcd_trace_file(mVcdFile);

    delete read_pixel_data_U0;
    delete pix_subtract_U0;
    delete send_output_U0;
    delete VideoBuffer_V_Data_V_U;
    delete VideoBuffer_V_User_V_U;
    delete SubtractionOut_V_Dat_U;
    delete SubtractionOut_V_Use_U;
    delete start_for_pix_subtract_U0_U;
    delete start_for_send_output_U0_U;
}

void myproject::thread_ap_var_for_const0() {
    ap_var_for_const0 = ap_const_logic_1;
}

void myproject::thread_VideoIn_TREADY() {
    VideoIn_TREADY = read_pixel_data_U0_VideoIn_TREADY.read();
}

void myproject::thread_VideoOut_TDATA() {
    VideoOut_TDATA = send_output_U0_VideoOut_TDATA.read();
}

void myproject::thread_VideoOut_TUSER() {
    VideoOut_TUSER = send_output_U0_VideoOut_TUSER.read();
}

void myproject::thread_VideoOut_TVALID() {
    VideoOut_TVALID = send_output_U0_VideoOut_TVALID.read();
}

void myproject::thread_ap_done() {
    ap_done = send_output_U0_ap_done.read();
}

void myproject::thread_ap_idle() {
    ap_idle = (read_pixel_data_U0_ap_idle.read() & pix_subtract_U0_ap_idle.read() & send_output_U0_ap_idle.read());
}

void myproject::thread_ap_ready() {
    ap_ready = read_pixel_data_U0_ap_ready.read();
}

void myproject::thread_ap_sync_continue() {
    ap_sync_continue = ap_continue.read();
}

void myproject::thread_ap_sync_done() {
    ap_sync_done = send_output_U0_ap_done.read();
}

void myproject::thread_ap_sync_ready() {
    ap_sync_ready = read_pixel_data_U0_ap_ready.read();
}

void myproject::thread_pix_subtract_U0_ap_continue() {
    pix_subtract_U0_ap_continue = ap_const_logic_1;
}

void myproject::thread_pix_subtract_U0_ap_start() {
    pix_subtract_U0_ap_start = start_for_pix_subtract_U0_empty_n.read();
}

void myproject::thread_read_pixel_data_U0_ap_continue() {
    read_pixel_data_U0_ap_continue = ap_const_logic_1;
}

void myproject::thread_read_pixel_data_U0_ap_start() {
    read_pixel_data_U0_ap_start = ap_start.read();
}

void myproject::thread_send_output_U0_ap_continue() {
    send_output_U0_ap_continue = ap_continue.read();
}

void myproject::thread_send_output_U0_ap_start() {
    send_output_U0_ap_start = start_for_send_output_U0_empty_n.read();
}

void myproject::thread_send_output_U0_start_full_n() {
    send_output_U0_start_full_n = ap_const_logic_1;
}

void myproject::thread_send_output_U0_start_write() {
    send_output_U0_start_write = ap_const_logic_0;
}

void myproject::thread_start_for_pix_subtract_U0_din() {
    start_for_pix_subtract_U0_din =  (sc_lv<1>) (ap_const_logic_1);
}

void myproject::thread_start_for_send_output_U0_din() {
    start_for_send_output_U0_din =  (sc_lv<1>) (ap_const_logic_1);
}

}

