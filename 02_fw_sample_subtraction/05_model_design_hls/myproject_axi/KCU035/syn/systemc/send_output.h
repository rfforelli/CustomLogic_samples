// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2018.3
// Copyright (C) 1986-2018 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

#ifndef _send_output_HH_
#define _send_output_HH_

#include "systemc.h"
#include "AESL_pkg.h"


namespace ap_rtl {

struct send_output : public sc_module {
    // Port declarations 17
    sc_in_clk ap_clk;
    sc_in< sc_logic > ap_rst;
    sc_in< sc_logic > ap_start;
    sc_out< sc_logic > ap_done;
    sc_in< sc_logic > ap_continue;
    sc_out< sc_logic > ap_idle;
    sc_out< sc_logic > ap_ready;
    sc_in< sc_lv<128> > StreamIn_V_Data_V_dout;
    sc_in< sc_logic > StreamIn_V_Data_V_empty_n;
    sc_out< sc_logic > StreamIn_V_Data_V_read;
    sc_in< sc_lv<4> > StreamIn_V_User_V_dout;
    sc_in< sc_logic > StreamIn_V_User_V_empty_n;
    sc_out< sc_logic > StreamIn_V_User_V_read;
    sc_out< sc_lv<128> > VideoOut_TDATA;
    sc_out< sc_logic > VideoOut_TVALID;
    sc_in< sc_logic > VideoOut_TREADY;
    sc_out< sc_lv<4> > VideoOut_TUSER;


    // Module declarations
    send_output(sc_module_name name);
    SC_HAS_PROCESS(send_output);

    ~send_output();

    sc_trace_file* mVcdFile;

    sc_signal< sc_logic > ap_done_reg;
    sc_signal< sc_lv<3> > ap_CS_fsm;
    sc_signal< sc_logic > ap_CS_fsm_state1;
    sc_signal< sc_logic > StreamIn_V_Data_V_blk_n;
    sc_signal< sc_logic > ap_CS_fsm_pp0_stage0;
    sc_signal< sc_logic > ap_enable_reg_pp0_iter1;
    sc_signal< bool > ap_block_pp0_stage0;
    sc_signal< sc_lv<1> > tmp_reg_127;
    sc_signal< sc_logic > StreamIn_V_User_V_blk_n;
    sc_signal< sc_logic > VideoOut_TDATA_blk_n;
    sc_signal< sc_lv<14> > i_reg_94;
    sc_signal< sc_lv<1> > tmp_fu_105_p2;
    sc_signal< bool > ap_block_state2_pp0_stage0_iter0;
    sc_signal< sc_logic > StreamIn_V_Data_V0_status;
    sc_signal< bool > ap_block_state3_pp0_stage0_iter1;
    sc_signal< bool > ap_block_state3_io;
    sc_signal< bool > ap_block_pp0_stage0_11001;
    sc_signal< sc_lv<14> > i_1_fu_111_p2;
    sc_signal< sc_logic > ap_enable_reg_pp0_iter0;
    sc_signal< bool > ap_block_state1;
    sc_signal< bool > ap_block_pp0_stage0_subdone;
    sc_signal< sc_logic > ap_condition_pp0_exit_iter0_state2;
    sc_signal< sc_logic > StreamIn_V_Data_V0_update;
    sc_signal< bool > ap_block_pp0_stage0_01001;
    sc_signal< sc_logic > ap_CS_fsm_state4;
    sc_signal< sc_lv<3> > ap_NS_fsm;
    sc_signal< sc_logic > ap_idle_pp0;
    sc_signal< sc_logic > ap_enable_pp0;
    static const sc_logic ap_const_logic_1;
    static const sc_logic ap_const_logic_0;
    static const sc_lv<3> ap_ST_fsm_state1;
    static const sc_lv<3> ap_ST_fsm_pp0_stage0;
    static const sc_lv<3> ap_ST_fsm_state4;
    static const sc_lv<32> ap_const_lv32_0;
    static const bool ap_const_boolean_1;
    static const sc_lv<32> ap_const_lv32_1;
    static const bool ap_const_boolean_0;
    static const sc_lv<1> ap_const_lv1_0;
    static const sc_lv<1> ap_const_lv1_1;
    static const sc_lv<14> ap_const_lv14_0;
    static const sc_lv<14> ap_const_lv14_2800;
    static const sc_lv<14> ap_const_lv14_1;
    static const sc_lv<32> ap_const_lv32_2;
    // Thread declarations
    void thread_ap_clk_no_reset_();
    void thread_StreamIn_V_Data_V0_status();
    void thread_StreamIn_V_Data_V0_update();
    void thread_StreamIn_V_Data_V_blk_n();
    void thread_StreamIn_V_Data_V_read();
    void thread_StreamIn_V_User_V_blk_n();
    void thread_StreamIn_V_User_V_read();
    void thread_VideoOut_TDATA();
    void thread_VideoOut_TDATA_blk_n();
    void thread_VideoOut_TUSER();
    void thread_VideoOut_TVALID();
    void thread_ap_CS_fsm_pp0_stage0();
    void thread_ap_CS_fsm_state1();
    void thread_ap_CS_fsm_state4();
    void thread_ap_block_pp0_stage0();
    void thread_ap_block_pp0_stage0_01001();
    void thread_ap_block_pp0_stage0_11001();
    void thread_ap_block_pp0_stage0_subdone();
    void thread_ap_block_state1();
    void thread_ap_block_state2_pp0_stage0_iter0();
    void thread_ap_block_state3_io();
    void thread_ap_block_state3_pp0_stage0_iter1();
    void thread_ap_condition_pp0_exit_iter0_state2();
    void thread_ap_done();
    void thread_ap_enable_pp0();
    void thread_ap_idle();
    void thread_ap_idle_pp0();
    void thread_ap_ready();
    void thread_i_1_fu_111_p2();
    void thread_tmp_fu_105_p2();
    void thread_ap_NS_fsm();
};

}

using namespace ap_rtl;

#endif
