// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2018.3
// Copyright (C) 1986-2018 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

#include "myproject_axi.h"
#include "AESL_pkg.h"

using namespace std;

namespace ap_rtl {

const sc_logic myproject_axi::ap_const_logic_1 = sc_dt::Log_1;
const sc_logic myproject_axi::ap_const_logic_0 = sc_dt::Log_0;
const sc_lv<4> myproject_axi::ap_ST_fsm_state1 = "1";
const sc_lv<4> myproject_axi::ap_ST_fsm_state2 = "10";
const sc_lv<4> myproject_axi::ap_ST_fsm_state3 = "100";
const sc_lv<4> myproject_axi::ap_ST_fsm_state4 = "1000";
const sc_lv<32> myproject_axi::ap_const_lv32_0 = "00000000000000000000000000000000";
const sc_lv<1> myproject_axi::ap_const_lv1_0 = "0";
const sc_lv<1> myproject_axi::ap_const_lv1_1 = "1";
const sc_lv<2> myproject_axi::ap_const_lv2_0 = "00";
const sc_lv<2> myproject_axi::ap_const_lv2_2 = "10";
const sc_lv<2> myproject_axi::ap_const_lv2_3 = "11";
const sc_lv<2> myproject_axi::ap_const_lv2_1 = "1";
const sc_lv<8> myproject_axi::ap_const_lv8_0 = "00000000";
const sc_lv<16> myproject_axi::ap_const_lv16_0 = "0000000000000000";
const sc_lv<24> myproject_axi::ap_const_lv24_0 = "000000000000000000000000";
const sc_lv<32> myproject_axi::ap_const_lv32_1 = "1";
const sc_lv<32> myproject_axi::ap_const_lv32_2 = "10";
const bool myproject_axi::ap_const_boolean_0 = false;
const sc_lv<32> myproject_axi::ap_const_lv32_3 = "11";
const bool myproject_axi::ap_const_boolean_1 = true;

myproject_axi::myproject_axi(sc_module_name name) : sc_module(name), mVcdFile(0) {
    grp_myproject_fu_302 = new myproject("grp_myproject_fu_302");
    grp_myproject_fu_302->VideoIn_TDATA(VideoIn_V_Data_V_0_data_out);
    grp_myproject_fu_302->VideoIn_TUSER(VideoIn_V_User_V_0_data_out);
    grp_myproject_fu_302->VideoOut_TDATA(grp_myproject_fu_302_VideoOut_TDATA);
    grp_myproject_fu_302->VideoOut_TUSER(grp_myproject_fu_302_VideoOut_TUSER);
    grp_myproject_fu_302->ap_clk(ap_clk);
    grp_myproject_fu_302->ap_rst(ap_rst_n_inv);
    grp_myproject_fu_302->VideoIn_TVALID(grp_myproject_fu_302_VideoIn_TVALID);
    grp_myproject_fu_302->VideoIn_TREADY(grp_myproject_fu_302_VideoIn_TREADY);
    grp_myproject_fu_302->ap_start(grp_myproject_fu_302_ap_start);
    grp_myproject_fu_302->VideoOut_TVALID(grp_myproject_fu_302_VideoOut_TVALID);
    grp_myproject_fu_302->VideoOut_TREADY(grp_myproject_fu_302_VideoOut_TREADY);
    grp_myproject_fu_302->ap_done(grp_myproject_fu_302_ap_done);
    grp_myproject_fu_302->ap_ready(grp_myproject_fu_302_ap_ready);
    grp_myproject_fu_302->ap_idle(grp_myproject_fu_302_ap_idle);
    grp_myproject_fu_302->ap_continue(grp_myproject_fu_302_ap_continue);

    SC_METHOD(thread_ap_clk_no_reset_);
    dont_initialize();
    sensitive << ( ap_clk.pos() );

    SC_METHOD(thread_MetaIn_DsizeL_V_blk_n);
    sensitive << ( ap_CS_fsm_state2 );

    SC_METHOD(thread_MetaIn_Flags_blk_n);
    sensitive << ( ap_CS_fsm_state2 );

    SC_METHOD(thread_MetaIn_ModPixelF_blk_n);
    sensitive << ( ap_CS_fsm_state2 );

    SC_METHOD(thread_MetaIn_PixProcessingFlgs_blk_n);
    sensitive << ( ap_CS_fsm_state2 );

    SC_METHOD(thread_MetaIn_PixelF_blk_n);
    sensitive << ( ap_CS_fsm_state2 );

    SC_METHOD(thread_MetaIn_SourceTag_blk_n);
    sensitive << ( ap_CS_fsm_state2 );

    SC_METHOD(thread_MetaIn_Status_blk_n);
    sensitive << ( ap_CS_fsm_state2 );

    SC_METHOD(thread_MetaIn_StreamId_blk_n);
    sensitive << ( ap_CS_fsm_state2 );

    SC_METHOD(thread_MetaIn_TapG_blk_n);
    sensitive << ( ap_CS_fsm_state2 );

    SC_METHOD(thread_MetaIn_Timestamp_blk_n);
    sensitive << ( ap_CS_fsm_state2 );

    SC_METHOD(thread_MetaIn_Xoffs_V_blk_n);
    sensitive << ( ap_CS_fsm_state2 );

    SC_METHOD(thread_MetaIn_Xsize_V_blk_n);
    sensitive << ( ap_CS_fsm_state2 );

    SC_METHOD(thread_MetaIn_Yoffs_V_blk_n);
    sensitive << ( ap_CS_fsm_state2 );

    SC_METHOD(thread_MetaIn_Ysize_V_blk_n);
    sensitive << ( ap_CS_fsm_state2 );

    SC_METHOD(thread_MetaOut_DsizeL_V);
    sensitive << ( MetaIn_StreamId_ap_vld_preg );
    sensitive << ( MetaIn_SourceTag_ap_vld_preg );
    sensitive << ( MetaIn_Xsize_V_ap_vld_preg );
    sensitive << ( MetaIn_Xoffs_V_ap_vld_preg );
    sensitive << ( MetaIn_Ysize_V_ap_vld_preg );
    sensitive << ( MetaIn_Yoffs_V_ap_vld_preg );
    sensitive << ( MetaIn_DsizeL_V_preg );
    sensitive << ( MetaIn_DsizeL_V_ap_vld_preg );
    sensitive << ( MetaIn_PixelF_ap_vld_preg );
    sensitive << ( MetaIn_TapG_ap_vld_preg );
    sensitive << ( MetaIn_Flags_ap_vld_preg );
    sensitive << ( MetaIn_Timestamp_ap_vld_preg );
    sensitive << ( MetaIn_PixProcessingFlgs_ap_vld_preg );
    sensitive << ( MetaIn_ModPixelF_ap_vld_preg );
    sensitive << ( MetaIn_Status_ap_vld_preg );
    sensitive << ( ap_CS_fsm_state2 );
    sensitive << ( MetaOut_DsizeL_V_preg );

    SC_METHOD(thread_MetaOut_Flags);
    sensitive << ( MetaIn_StreamId_ap_vld_preg );
    sensitive << ( MetaIn_SourceTag_ap_vld_preg );
    sensitive << ( MetaIn_Xsize_V_ap_vld_preg );
    sensitive << ( MetaIn_Xoffs_V_ap_vld_preg );
    sensitive << ( MetaIn_Ysize_V_ap_vld_preg );
    sensitive << ( MetaIn_Yoffs_V_ap_vld_preg );
    sensitive << ( MetaIn_DsizeL_V_ap_vld_preg );
    sensitive << ( MetaIn_PixelF_ap_vld_preg );
    sensitive << ( MetaIn_TapG_ap_vld_preg );
    sensitive << ( MetaIn_Flags_preg );
    sensitive << ( MetaIn_Flags_ap_vld_preg );
    sensitive << ( MetaIn_Timestamp_ap_vld_preg );
    sensitive << ( MetaIn_PixProcessingFlgs_ap_vld_preg );
    sensitive << ( MetaIn_ModPixelF_ap_vld_preg );
    sensitive << ( MetaIn_Status_ap_vld_preg );
    sensitive << ( ap_CS_fsm_state2 );
    sensitive << ( MetaOut_Flags_preg );

    SC_METHOD(thread_MetaOut_ModPixelF);
    sensitive << ( MetaIn_StreamId_ap_vld_preg );
    sensitive << ( MetaIn_SourceTag_ap_vld_preg );
    sensitive << ( MetaIn_Xsize_V_ap_vld_preg );
    sensitive << ( MetaIn_Xoffs_V_ap_vld_preg );
    sensitive << ( MetaIn_Ysize_V_ap_vld_preg );
    sensitive << ( MetaIn_Yoffs_V_ap_vld_preg );
    sensitive << ( MetaIn_DsizeL_V_ap_vld_preg );
    sensitive << ( MetaIn_PixelF_ap_vld_preg );
    sensitive << ( MetaIn_TapG_ap_vld_preg );
    sensitive << ( MetaIn_Flags_ap_vld_preg );
    sensitive << ( MetaIn_Timestamp_ap_vld_preg );
    sensitive << ( MetaIn_PixProcessingFlgs_ap_vld_preg );
    sensitive << ( MetaIn_ModPixelF_preg );
    sensitive << ( MetaIn_ModPixelF_ap_vld_preg );
    sensitive << ( MetaIn_Status_ap_vld_preg );
    sensitive << ( ap_CS_fsm_state2 );
    sensitive << ( MetaOut_ModPixelF_preg );

    SC_METHOD(thread_MetaOut_PixProcessingFlgs);
    sensitive << ( MetaIn_StreamId_ap_vld_preg );
    sensitive << ( MetaIn_SourceTag_ap_vld_preg );
    sensitive << ( MetaIn_Xsize_V_ap_vld_preg );
    sensitive << ( MetaIn_Xoffs_V_ap_vld_preg );
    sensitive << ( MetaIn_Ysize_V_ap_vld_preg );
    sensitive << ( MetaIn_Yoffs_V_ap_vld_preg );
    sensitive << ( MetaIn_DsizeL_V_ap_vld_preg );
    sensitive << ( MetaIn_PixelF_ap_vld_preg );
    sensitive << ( MetaIn_TapG_ap_vld_preg );
    sensitive << ( MetaIn_Flags_ap_vld_preg );
    sensitive << ( MetaIn_Timestamp_ap_vld_preg );
    sensitive << ( MetaIn_PixProcessingFlgs_preg );
    sensitive << ( MetaIn_PixProcessingFlgs_ap_vld_preg );
    sensitive << ( MetaIn_ModPixelF_ap_vld_preg );
    sensitive << ( MetaIn_Status_ap_vld_preg );
    sensitive << ( ap_CS_fsm_state2 );
    sensitive << ( MetaOut_PixProcessingFlgs_preg );

    SC_METHOD(thread_MetaOut_PixelF);
    sensitive << ( MetaIn_StreamId_ap_vld_preg );
    sensitive << ( MetaIn_SourceTag_ap_vld_preg );
    sensitive << ( MetaIn_Xsize_V_ap_vld_preg );
    sensitive << ( MetaIn_Xoffs_V_ap_vld_preg );
    sensitive << ( MetaIn_Ysize_V_ap_vld_preg );
    sensitive << ( MetaIn_Yoffs_V_ap_vld_preg );
    sensitive << ( MetaIn_DsizeL_V_ap_vld_preg );
    sensitive << ( MetaIn_PixelF_preg );
    sensitive << ( MetaIn_PixelF_ap_vld_preg );
    sensitive << ( MetaIn_TapG_ap_vld_preg );
    sensitive << ( MetaIn_Flags_ap_vld_preg );
    sensitive << ( MetaIn_Timestamp_ap_vld_preg );
    sensitive << ( MetaIn_PixProcessingFlgs_ap_vld_preg );
    sensitive << ( MetaIn_ModPixelF_ap_vld_preg );
    sensitive << ( MetaIn_Status_ap_vld_preg );
    sensitive << ( ap_CS_fsm_state2 );
    sensitive << ( MetaOut_PixelF_preg );

    SC_METHOD(thread_MetaOut_SourceTag);
    sensitive << ( MetaIn_StreamId_ap_vld_preg );
    sensitive << ( MetaIn_SourceTag_preg );
    sensitive << ( MetaIn_SourceTag_ap_vld_preg );
    sensitive << ( MetaIn_Xsize_V_ap_vld_preg );
    sensitive << ( MetaIn_Xoffs_V_ap_vld_preg );
    sensitive << ( MetaIn_Ysize_V_ap_vld_preg );
    sensitive << ( MetaIn_Yoffs_V_ap_vld_preg );
    sensitive << ( MetaIn_DsizeL_V_ap_vld_preg );
    sensitive << ( MetaIn_PixelF_ap_vld_preg );
    sensitive << ( MetaIn_TapG_ap_vld_preg );
    sensitive << ( MetaIn_Flags_ap_vld_preg );
    sensitive << ( MetaIn_Timestamp_ap_vld_preg );
    sensitive << ( MetaIn_PixProcessingFlgs_ap_vld_preg );
    sensitive << ( MetaIn_ModPixelF_ap_vld_preg );
    sensitive << ( MetaIn_Status_ap_vld_preg );
    sensitive << ( ap_CS_fsm_state2 );
    sensitive << ( MetaOut_SourceTag_preg );

    SC_METHOD(thread_MetaOut_Status);
    sensitive << ( MetaIn_StreamId_ap_vld_preg );
    sensitive << ( MetaIn_SourceTag_ap_vld_preg );
    sensitive << ( MetaIn_Xsize_V_ap_vld_preg );
    sensitive << ( MetaIn_Xoffs_V_ap_vld_preg );
    sensitive << ( MetaIn_Ysize_V_ap_vld_preg );
    sensitive << ( MetaIn_Yoffs_V_ap_vld_preg );
    sensitive << ( MetaIn_DsizeL_V_ap_vld_preg );
    sensitive << ( MetaIn_PixelF_ap_vld_preg );
    sensitive << ( MetaIn_TapG_ap_vld_preg );
    sensitive << ( MetaIn_Flags_ap_vld_preg );
    sensitive << ( MetaIn_Timestamp_ap_vld_preg );
    sensitive << ( MetaIn_PixProcessingFlgs_ap_vld_preg );
    sensitive << ( MetaIn_ModPixelF_ap_vld_preg );
    sensitive << ( MetaIn_Status_preg );
    sensitive << ( MetaIn_Status_ap_vld_preg );
    sensitive << ( ap_CS_fsm_state2 );
    sensitive << ( MetaOut_Status_preg );

    SC_METHOD(thread_MetaOut_StreamId);
    sensitive << ( MetaIn_StreamId_preg );
    sensitive << ( MetaIn_StreamId_ap_vld_preg );
    sensitive << ( MetaIn_SourceTag_ap_vld_preg );
    sensitive << ( MetaIn_Xsize_V_ap_vld_preg );
    sensitive << ( MetaIn_Xoffs_V_ap_vld_preg );
    sensitive << ( MetaIn_Ysize_V_ap_vld_preg );
    sensitive << ( MetaIn_Yoffs_V_ap_vld_preg );
    sensitive << ( MetaIn_DsizeL_V_ap_vld_preg );
    sensitive << ( MetaIn_PixelF_ap_vld_preg );
    sensitive << ( MetaIn_TapG_ap_vld_preg );
    sensitive << ( MetaIn_Flags_ap_vld_preg );
    sensitive << ( MetaIn_Timestamp_ap_vld_preg );
    sensitive << ( MetaIn_PixProcessingFlgs_ap_vld_preg );
    sensitive << ( MetaIn_ModPixelF_ap_vld_preg );
    sensitive << ( MetaIn_Status_ap_vld_preg );
    sensitive << ( ap_CS_fsm_state2 );
    sensitive << ( MetaOut_StreamId_preg );

    SC_METHOD(thread_MetaOut_TapG);
    sensitive << ( MetaIn_StreamId_ap_vld_preg );
    sensitive << ( MetaIn_SourceTag_ap_vld_preg );
    sensitive << ( MetaIn_Xsize_V_ap_vld_preg );
    sensitive << ( MetaIn_Xoffs_V_ap_vld_preg );
    sensitive << ( MetaIn_Ysize_V_ap_vld_preg );
    sensitive << ( MetaIn_Yoffs_V_ap_vld_preg );
    sensitive << ( MetaIn_DsizeL_V_ap_vld_preg );
    sensitive << ( MetaIn_PixelF_ap_vld_preg );
    sensitive << ( MetaIn_TapG_preg );
    sensitive << ( MetaIn_TapG_ap_vld_preg );
    sensitive << ( MetaIn_Flags_ap_vld_preg );
    sensitive << ( MetaIn_Timestamp_ap_vld_preg );
    sensitive << ( MetaIn_PixProcessingFlgs_ap_vld_preg );
    sensitive << ( MetaIn_ModPixelF_ap_vld_preg );
    sensitive << ( MetaIn_Status_ap_vld_preg );
    sensitive << ( ap_CS_fsm_state2 );
    sensitive << ( MetaOut_TapG_preg );

    SC_METHOD(thread_MetaOut_Timestamp);
    sensitive << ( MetaIn_StreamId_ap_vld_preg );
    sensitive << ( MetaIn_SourceTag_ap_vld_preg );
    sensitive << ( MetaIn_Xsize_V_ap_vld_preg );
    sensitive << ( MetaIn_Xoffs_V_ap_vld_preg );
    sensitive << ( MetaIn_Ysize_V_ap_vld_preg );
    sensitive << ( MetaIn_Yoffs_V_ap_vld_preg );
    sensitive << ( MetaIn_DsizeL_V_ap_vld_preg );
    sensitive << ( MetaIn_PixelF_ap_vld_preg );
    sensitive << ( MetaIn_TapG_ap_vld_preg );
    sensitive << ( MetaIn_Flags_ap_vld_preg );
    sensitive << ( MetaIn_Timestamp_preg );
    sensitive << ( MetaIn_Timestamp_ap_vld_preg );
    sensitive << ( MetaIn_PixProcessingFlgs_ap_vld_preg );
    sensitive << ( MetaIn_ModPixelF_ap_vld_preg );
    sensitive << ( MetaIn_Status_ap_vld_preg );
    sensitive << ( ap_CS_fsm_state2 );
    sensitive << ( MetaOut_Timestamp_preg );

    SC_METHOD(thread_MetaOut_Xoffs_V);
    sensitive << ( MetaIn_StreamId_ap_vld_preg );
    sensitive << ( MetaIn_SourceTag_ap_vld_preg );
    sensitive << ( MetaIn_Xsize_V_ap_vld_preg );
    sensitive << ( MetaIn_Xoffs_V_preg );
    sensitive << ( MetaIn_Xoffs_V_ap_vld_preg );
    sensitive << ( MetaIn_Ysize_V_ap_vld_preg );
    sensitive << ( MetaIn_Yoffs_V_ap_vld_preg );
    sensitive << ( MetaIn_DsizeL_V_ap_vld_preg );
    sensitive << ( MetaIn_PixelF_ap_vld_preg );
    sensitive << ( MetaIn_TapG_ap_vld_preg );
    sensitive << ( MetaIn_Flags_ap_vld_preg );
    sensitive << ( MetaIn_Timestamp_ap_vld_preg );
    sensitive << ( MetaIn_PixProcessingFlgs_ap_vld_preg );
    sensitive << ( MetaIn_ModPixelF_ap_vld_preg );
    sensitive << ( MetaIn_Status_ap_vld_preg );
    sensitive << ( ap_CS_fsm_state2 );
    sensitive << ( MetaOut_Xoffs_V_preg );

    SC_METHOD(thread_MetaOut_Xsize_V);
    sensitive << ( MetaIn_StreamId_ap_vld_preg );
    sensitive << ( MetaIn_SourceTag_ap_vld_preg );
    sensitive << ( MetaIn_Xsize_V_preg );
    sensitive << ( MetaIn_Xsize_V_ap_vld_preg );
    sensitive << ( MetaIn_Xoffs_V_ap_vld_preg );
    sensitive << ( MetaIn_Ysize_V_ap_vld_preg );
    sensitive << ( MetaIn_Yoffs_V_ap_vld_preg );
    sensitive << ( MetaIn_DsizeL_V_ap_vld_preg );
    sensitive << ( MetaIn_PixelF_ap_vld_preg );
    sensitive << ( MetaIn_TapG_ap_vld_preg );
    sensitive << ( MetaIn_Flags_ap_vld_preg );
    sensitive << ( MetaIn_Timestamp_ap_vld_preg );
    sensitive << ( MetaIn_PixProcessingFlgs_ap_vld_preg );
    sensitive << ( MetaIn_ModPixelF_ap_vld_preg );
    sensitive << ( MetaIn_Status_ap_vld_preg );
    sensitive << ( ap_CS_fsm_state2 );
    sensitive << ( MetaOut_Xsize_V_preg );

    SC_METHOD(thread_MetaOut_Yoffs_V);
    sensitive << ( MetaIn_StreamId_ap_vld_preg );
    sensitive << ( MetaIn_SourceTag_ap_vld_preg );
    sensitive << ( MetaIn_Xsize_V_ap_vld_preg );
    sensitive << ( MetaIn_Xoffs_V_ap_vld_preg );
    sensitive << ( MetaIn_Ysize_V_ap_vld_preg );
    sensitive << ( MetaIn_Yoffs_V_preg );
    sensitive << ( MetaIn_Yoffs_V_ap_vld_preg );
    sensitive << ( MetaIn_DsizeL_V_ap_vld_preg );
    sensitive << ( MetaIn_PixelF_ap_vld_preg );
    sensitive << ( MetaIn_TapG_ap_vld_preg );
    sensitive << ( MetaIn_Flags_ap_vld_preg );
    sensitive << ( MetaIn_Timestamp_ap_vld_preg );
    sensitive << ( MetaIn_PixProcessingFlgs_ap_vld_preg );
    sensitive << ( MetaIn_ModPixelF_ap_vld_preg );
    sensitive << ( MetaIn_Status_ap_vld_preg );
    sensitive << ( ap_CS_fsm_state2 );
    sensitive << ( MetaOut_Yoffs_V_preg );

    SC_METHOD(thread_MetaOut_Ysize_V);
    sensitive << ( MetaIn_StreamId_ap_vld_preg );
    sensitive << ( MetaIn_SourceTag_ap_vld_preg );
    sensitive << ( MetaIn_Xsize_V_ap_vld_preg );
    sensitive << ( MetaIn_Xoffs_V_ap_vld_preg );
    sensitive << ( MetaIn_Ysize_V_preg );
    sensitive << ( MetaIn_Ysize_V_ap_vld_preg );
    sensitive << ( MetaIn_Yoffs_V_ap_vld_preg );
    sensitive << ( MetaIn_DsizeL_V_ap_vld_preg );
    sensitive << ( MetaIn_PixelF_ap_vld_preg );
    sensitive << ( MetaIn_TapG_ap_vld_preg );
    sensitive << ( MetaIn_Flags_ap_vld_preg );
    sensitive << ( MetaIn_Timestamp_ap_vld_preg );
    sensitive << ( MetaIn_PixProcessingFlgs_ap_vld_preg );
    sensitive << ( MetaIn_ModPixelF_ap_vld_preg );
    sensitive << ( MetaIn_Status_ap_vld_preg );
    sensitive << ( ap_CS_fsm_state2 );
    sensitive << ( MetaOut_Ysize_V_preg );

    SC_METHOD(thread_VideoIn_TREADY);
    sensitive << ( VideoIn_V_User_V_0_state );

    SC_METHOD(thread_VideoIn_V_Data_V_0_ack_in);
    sensitive << ( VideoIn_V_Data_V_0_state );

    SC_METHOD(thread_VideoIn_V_Data_V_0_ack_out);
    sensitive << ( grp_myproject_fu_302_VideoIn_TREADY );
    sensitive << ( ap_CS_fsm_state3 );

    SC_METHOD(thread_VideoIn_V_Data_V_0_data_out);
    sensitive << ( VideoIn_V_Data_V_0_payload_A );
    sensitive << ( VideoIn_V_Data_V_0_payload_B );
    sensitive << ( VideoIn_V_Data_V_0_sel );

    SC_METHOD(thread_VideoIn_V_Data_V_0_load_A);
    sensitive << ( VideoIn_V_Data_V_0_sel_wr );
    sensitive << ( VideoIn_V_Data_V_0_state_cmp_full );

    SC_METHOD(thread_VideoIn_V_Data_V_0_load_B);
    sensitive << ( VideoIn_V_Data_V_0_sel_wr );
    sensitive << ( VideoIn_V_Data_V_0_state_cmp_full );

    SC_METHOD(thread_VideoIn_V_Data_V_0_sel);
    sensitive << ( VideoIn_V_Data_V_0_sel_rd );

    SC_METHOD(thread_VideoIn_V_Data_V_0_state_cmp_full);
    sensitive << ( VideoIn_V_Data_V_0_state );

    SC_METHOD(thread_VideoIn_V_Data_V_0_vld_in);
    sensitive << ( VideoIn_TVALID );

    SC_METHOD(thread_VideoIn_V_Data_V_0_vld_out);
    sensitive << ( VideoIn_V_Data_V_0_state );

    SC_METHOD(thread_VideoIn_V_User_V_0_ack_in);
    sensitive << ( VideoIn_V_User_V_0_state );

    SC_METHOD(thread_VideoIn_V_User_V_0_ack_out);
    sensitive << ( grp_myproject_fu_302_VideoIn_TREADY );
    sensitive << ( ap_CS_fsm_state3 );

    SC_METHOD(thread_VideoIn_V_User_V_0_data_out);
    sensitive << ( VideoIn_V_User_V_0_payload_A );
    sensitive << ( VideoIn_V_User_V_0_payload_B );
    sensitive << ( VideoIn_V_User_V_0_sel );

    SC_METHOD(thread_VideoIn_V_User_V_0_load_A);
    sensitive << ( VideoIn_V_User_V_0_sel_wr );
    sensitive << ( VideoIn_V_User_V_0_state_cmp_full );

    SC_METHOD(thread_VideoIn_V_User_V_0_load_B);
    sensitive << ( VideoIn_V_User_V_0_sel_wr );
    sensitive << ( VideoIn_V_User_V_0_state_cmp_full );

    SC_METHOD(thread_VideoIn_V_User_V_0_sel);
    sensitive << ( VideoIn_V_User_V_0_sel_rd );

    SC_METHOD(thread_VideoIn_V_User_V_0_state_cmp_full);
    sensitive << ( VideoIn_V_User_V_0_state );

    SC_METHOD(thread_VideoIn_V_User_V_0_vld_in);
    sensitive << ( VideoIn_TVALID );

    SC_METHOD(thread_VideoIn_V_User_V_0_vld_out);
    sensitive << ( VideoIn_V_User_V_0_state );

    SC_METHOD(thread_VideoOut_TDATA);
    sensitive << ( VideoOut_V_Data_V_1_data_out );

    SC_METHOD(thread_VideoOut_TUSER);
    sensitive << ( VideoOut_V_User_V_1_data_out );

    SC_METHOD(thread_VideoOut_TVALID);
    sensitive << ( VideoOut_V_User_V_1_state );

    SC_METHOD(thread_VideoOut_V_Data_V_1_ack_in);
    sensitive << ( VideoOut_V_Data_V_1_state );

    SC_METHOD(thread_VideoOut_V_Data_V_1_ack_out);
    sensitive << ( VideoOut_TREADY );

    SC_METHOD(thread_VideoOut_V_Data_V_1_data_out);
    sensitive << ( VideoOut_V_Data_V_1_payload_A );
    sensitive << ( VideoOut_V_Data_V_1_payload_B );
    sensitive << ( VideoOut_V_Data_V_1_sel );

    SC_METHOD(thread_VideoOut_V_Data_V_1_load_A);
    sensitive << ( VideoOut_V_Data_V_1_sel_wr );
    sensitive << ( VideoOut_V_Data_V_1_state_cmp_full );

    SC_METHOD(thread_VideoOut_V_Data_V_1_load_B);
    sensitive << ( VideoOut_V_Data_V_1_sel_wr );
    sensitive << ( VideoOut_V_Data_V_1_state_cmp_full );

    SC_METHOD(thread_VideoOut_V_Data_V_1_sel);
    sensitive << ( VideoOut_V_Data_V_1_sel_rd );

    SC_METHOD(thread_VideoOut_V_Data_V_1_state_cmp_full);
    sensitive << ( VideoOut_V_Data_V_1_state );

    SC_METHOD(thread_VideoOut_V_Data_V_1_vld_in);
    sensitive << ( grp_myproject_fu_302_VideoOut_TVALID );
    sensitive << ( ap_CS_fsm_state3 );

    SC_METHOD(thread_VideoOut_V_Data_V_1_vld_out);
    sensitive << ( VideoOut_V_Data_V_1_state );

    SC_METHOD(thread_VideoOut_V_User_V_1_ack_in);
    sensitive << ( VideoOut_V_User_V_1_state );

    SC_METHOD(thread_VideoOut_V_User_V_1_ack_out);
    sensitive << ( VideoOut_TREADY );

    SC_METHOD(thread_VideoOut_V_User_V_1_data_out);
    sensitive << ( VideoOut_V_User_V_1_payload_A );
    sensitive << ( VideoOut_V_User_V_1_payload_B );
    sensitive << ( VideoOut_V_User_V_1_sel );

    SC_METHOD(thread_VideoOut_V_User_V_1_load_A);
    sensitive << ( VideoOut_V_User_V_1_sel_wr );
    sensitive << ( VideoOut_V_User_V_1_state_cmp_full );

    SC_METHOD(thread_VideoOut_V_User_V_1_load_B);
    sensitive << ( VideoOut_V_User_V_1_sel_wr );
    sensitive << ( VideoOut_V_User_V_1_state_cmp_full );

    SC_METHOD(thread_VideoOut_V_User_V_1_sel);
    sensitive << ( VideoOut_V_User_V_1_sel_rd );

    SC_METHOD(thread_VideoOut_V_User_V_1_state_cmp_full);
    sensitive << ( VideoOut_V_User_V_1_state );

    SC_METHOD(thread_VideoOut_V_User_V_1_vld_in);
    sensitive << ( grp_myproject_fu_302_VideoOut_TVALID );
    sensitive << ( ap_CS_fsm_state3 );

    SC_METHOD(thread_VideoOut_V_User_V_1_vld_out);
    sensitive << ( VideoOut_V_User_V_1_state );

    SC_METHOD(thread_ap_CS_fsm_state1);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state2);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state3);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state4);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_block_state2);
    sensitive << ( MetaIn_StreamId_ap_vld_preg );
    sensitive << ( MetaIn_SourceTag_ap_vld_preg );
    sensitive << ( MetaIn_Xsize_V_ap_vld_preg );
    sensitive << ( MetaIn_Xoffs_V_ap_vld_preg );
    sensitive << ( MetaIn_Ysize_V_ap_vld_preg );
    sensitive << ( MetaIn_Yoffs_V_ap_vld_preg );
    sensitive << ( MetaIn_DsizeL_V_ap_vld_preg );
    sensitive << ( MetaIn_PixelF_ap_vld_preg );
    sensitive << ( MetaIn_TapG_ap_vld_preg );
    sensitive << ( MetaIn_Flags_ap_vld_preg );
    sensitive << ( MetaIn_Timestamp_ap_vld_preg );
    sensitive << ( MetaIn_PixProcessingFlgs_ap_vld_preg );
    sensitive << ( MetaIn_ModPixelF_ap_vld_preg );
    sensitive << ( MetaIn_Status_ap_vld_preg );

    SC_METHOD(thread_ap_block_state2_ignore_call65);
    sensitive << ( MetaIn_StreamId_ap_vld_preg );
    sensitive << ( MetaIn_SourceTag_ap_vld_preg );
    sensitive << ( MetaIn_Xsize_V_ap_vld_preg );
    sensitive << ( MetaIn_Xoffs_V_ap_vld_preg );
    sensitive << ( MetaIn_Ysize_V_ap_vld_preg );
    sensitive << ( MetaIn_Yoffs_V_ap_vld_preg );
    sensitive << ( MetaIn_DsizeL_V_ap_vld_preg );
    sensitive << ( MetaIn_PixelF_ap_vld_preg );
    sensitive << ( MetaIn_TapG_ap_vld_preg );
    sensitive << ( MetaIn_Flags_ap_vld_preg );
    sensitive << ( MetaIn_Timestamp_ap_vld_preg );
    sensitive << ( MetaIn_PixProcessingFlgs_ap_vld_preg );
    sensitive << ( MetaIn_ModPixelF_ap_vld_preg );
    sensitive << ( MetaIn_Status_ap_vld_preg );

    SC_METHOD(thread_ap_block_state3_on_subcall_done);
    sensitive << ( ap_sync_grp_myproject_fu_302_ap_ready );
    sensitive << ( ap_sync_grp_myproject_fu_302_ap_done );

    SC_METHOD(thread_ap_block_state4);
    sensitive << ( VideoOut_V_Data_V_1_ack_in );
    sensitive << ( VideoOut_V_User_V_1_ack_in );

    SC_METHOD(thread_ap_done);
    sensitive << ( VideoOut_V_Data_V_1_ack_in );
    sensitive << ( VideoOut_V_Data_V_1_state );
    sensitive << ( VideoOut_V_User_V_1_ack_in );
    sensitive << ( VideoOut_V_User_V_1_state );
    sensitive << ( ap_CS_fsm_state4 );

    SC_METHOD(thread_ap_idle);
    sensitive << ( ap_start );
    sensitive << ( ap_CS_fsm_state1 );

    SC_METHOD(thread_ap_ready);
    sensitive << ( VideoOut_V_Data_V_1_ack_in );
    sensitive << ( VideoOut_V_Data_V_1_state );
    sensitive << ( VideoOut_V_User_V_1_ack_in );
    sensitive << ( VideoOut_V_User_V_1_state );
    sensitive << ( ap_CS_fsm_state4 );

    SC_METHOD(thread_ap_rst_n_inv);
    sensitive << ( ap_rst_n );

    SC_METHOD(thread_ap_sync_grp_myproject_fu_302_ap_done);
    sensitive << ( grp_myproject_fu_302_ap_done );
    sensitive << ( ap_sync_reg_grp_myproject_fu_302_ap_done );

    SC_METHOD(thread_ap_sync_grp_myproject_fu_302_ap_ready);
    sensitive << ( grp_myproject_fu_302_ap_ready );
    sensitive << ( ap_sync_reg_grp_myproject_fu_302_ap_ready );

    SC_METHOD(thread_grp_myproject_fu_302_VideoIn_TVALID);
    sensitive << ( VideoIn_V_User_V_0_state );

    SC_METHOD(thread_grp_myproject_fu_302_VideoOut_TREADY);
    sensitive << ( VideoOut_V_Data_V_1_ack_in );
    sensitive << ( VideoOut_V_User_V_1_ack_in );
    sensitive << ( ap_CS_fsm_state3 );

    SC_METHOD(thread_grp_myproject_fu_302_ap_continue);
    sensitive << ( ap_CS_fsm_state3 );
    sensitive << ( ap_block_state3_on_subcall_done );

    SC_METHOD(thread_grp_myproject_fu_302_ap_start);
    sensitive << ( grp_myproject_fu_302_ap_start_reg );

    SC_METHOD(thread_ap_NS_fsm);
    sensitive << ( ap_start );
    sensitive << ( ap_CS_fsm );
    sensitive << ( ap_CS_fsm_state1 );
    sensitive << ( VideoOut_V_Data_V_1_ack_in );
    sensitive << ( VideoOut_V_Data_V_1_state );
    sensitive << ( VideoOut_V_User_V_1_ack_in );
    sensitive << ( VideoOut_V_User_V_1_state );
    sensitive << ( MetaIn_StreamId_ap_vld_preg );
    sensitive << ( MetaIn_SourceTag_ap_vld_preg );
    sensitive << ( MetaIn_Xsize_V_ap_vld_preg );
    sensitive << ( MetaIn_Xoffs_V_ap_vld_preg );
    sensitive << ( MetaIn_Ysize_V_ap_vld_preg );
    sensitive << ( MetaIn_Yoffs_V_ap_vld_preg );
    sensitive << ( MetaIn_DsizeL_V_ap_vld_preg );
    sensitive << ( MetaIn_PixelF_ap_vld_preg );
    sensitive << ( MetaIn_TapG_ap_vld_preg );
    sensitive << ( MetaIn_Flags_ap_vld_preg );
    sensitive << ( MetaIn_Timestamp_ap_vld_preg );
    sensitive << ( MetaIn_PixProcessingFlgs_ap_vld_preg );
    sensitive << ( MetaIn_ModPixelF_ap_vld_preg );
    sensitive << ( MetaIn_Status_ap_vld_preg );
    sensitive << ( ap_CS_fsm_state2 );
    sensitive << ( ap_CS_fsm_state3 );
    sensitive << ( ap_block_state3_on_subcall_done );
    sensitive << ( ap_CS_fsm_state4 );

    SC_THREAD(thread_hdltv_gen);
    sensitive << ( ap_clk.pos() );

    ap_CS_fsm = "0001";
    VideoIn_V_Data_V_0_sel_rd = SC_LOGIC_0;
    VideoIn_V_Data_V_0_sel_wr = SC_LOGIC_0;
    VideoIn_V_Data_V_0_state = "00";
    VideoIn_V_User_V_0_sel_rd = SC_LOGIC_0;
    VideoIn_V_User_V_0_sel_wr = SC_LOGIC_0;
    VideoIn_V_User_V_0_state = "00";
    VideoOut_V_Data_V_1_sel_rd = SC_LOGIC_0;
    VideoOut_V_Data_V_1_sel_wr = SC_LOGIC_0;
    VideoOut_V_Data_V_1_state = "00";
    VideoOut_V_User_V_1_sel_rd = SC_LOGIC_0;
    VideoOut_V_User_V_1_sel_wr = SC_LOGIC_0;
    VideoOut_V_User_V_1_state = "00";
    MetaIn_StreamId_preg = "00000000";
    MetaIn_StreamId_ap_vld_preg = SC_LOGIC_0;
    MetaIn_SourceTag_preg = "0000000000000000";
    MetaIn_SourceTag_ap_vld_preg = SC_LOGIC_0;
    MetaIn_Xsize_V_preg = "000000000000000000000000";
    MetaIn_Xsize_V_ap_vld_preg = SC_LOGIC_0;
    MetaIn_Xoffs_V_preg = "000000000000000000000000";
    MetaIn_Xoffs_V_ap_vld_preg = SC_LOGIC_0;
    MetaIn_Ysize_V_preg = "000000000000000000000000";
    MetaIn_Ysize_V_ap_vld_preg = SC_LOGIC_0;
    MetaIn_Yoffs_V_preg = "000000000000000000000000";
    MetaIn_Yoffs_V_ap_vld_preg = SC_LOGIC_0;
    MetaIn_DsizeL_V_preg = "000000000000000000000000";
    MetaIn_DsizeL_V_ap_vld_preg = SC_LOGIC_0;
    MetaIn_PixelF_preg = "0000000000000000";
    MetaIn_PixelF_ap_vld_preg = SC_LOGIC_0;
    MetaIn_TapG_preg = "0000000000000000";
    MetaIn_TapG_ap_vld_preg = SC_LOGIC_0;
    MetaIn_Flags_preg = "00000000";
    MetaIn_Flags_ap_vld_preg = SC_LOGIC_0;
    MetaIn_Timestamp_preg = "00000000000000000000000000000000";
    MetaIn_Timestamp_ap_vld_preg = SC_LOGIC_0;
    MetaIn_PixProcessingFlgs_preg = "00000000";
    MetaIn_PixProcessingFlgs_ap_vld_preg = SC_LOGIC_0;
    MetaIn_ModPixelF_preg = "00000000000000000000000000000000";
    MetaIn_ModPixelF_ap_vld_preg = SC_LOGIC_0;
    MetaIn_Status_preg = "00000000000000000000000000000000";
    MetaIn_Status_ap_vld_preg = SC_LOGIC_0;
    grp_myproject_fu_302_ap_start_reg = SC_LOGIC_0;
    ap_sync_reg_grp_myproject_fu_302_ap_ready = SC_LOGIC_0;
    ap_sync_reg_grp_myproject_fu_302_ap_done = SC_LOGIC_0;
    MetaOut_StreamId_preg = "00000000";
    MetaOut_SourceTag_preg = "0000000000000000";
    MetaOut_Xsize_V_preg = "000000000000000000000000";
    MetaOut_Xoffs_V_preg = "000000000000000000000000";
    MetaOut_Ysize_V_preg = "000000000000000000000000";
    MetaOut_Yoffs_V_preg = "000000000000000000000000";
    MetaOut_DsizeL_V_preg = "000000000000000000000000";
    MetaOut_PixelF_preg = "0000000000000000";
    MetaOut_TapG_preg = "0000000000000000";
    MetaOut_Flags_preg = "00000000";
    MetaOut_Timestamp_preg = "00000000000000000000000000000000";
    MetaOut_PixProcessingFlgs_preg = "00000000";
    MetaOut_ModPixelF_preg = "00000000000000000000000000000000";
    MetaOut_Status_preg = "00000000000000000000000000000000";
    static int apTFileNum = 0;
    stringstream apTFilenSS;
    apTFilenSS << "myproject_axi_sc_trace_" << apTFileNum ++;
    string apTFn = apTFilenSS.str();
    mVcdFile = sc_create_vcd_trace_file(apTFn.c_str());
    mVcdFile->set_time_unit(1, SC_PS);
    if (1) {
#ifdef __HLS_TRACE_LEVEL_PORT__
    sc_trace(mVcdFile, ap_clk, "(port)ap_clk");
    sc_trace(mVcdFile, ap_rst_n, "(port)ap_rst_n");
    sc_trace(mVcdFile, ap_start, "(port)ap_start");
    sc_trace(mVcdFile, ap_done, "(port)ap_done");
    sc_trace(mVcdFile, ap_idle, "(port)ap_idle");
    sc_trace(mVcdFile, ap_ready, "(port)ap_ready");
    sc_trace(mVcdFile, VideoIn_TDATA, "(port)VideoIn_TDATA");
    sc_trace(mVcdFile, VideoIn_TVALID, "(port)VideoIn_TVALID");
    sc_trace(mVcdFile, VideoIn_TREADY, "(port)VideoIn_TREADY");
    sc_trace(mVcdFile, VideoIn_TUSER, "(port)VideoIn_TUSER");
    sc_trace(mVcdFile, VideoOut_TDATA, "(port)VideoOut_TDATA");
    sc_trace(mVcdFile, VideoOut_TVALID, "(port)VideoOut_TVALID");
    sc_trace(mVcdFile, VideoOut_TREADY, "(port)VideoOut_TREADY");
    sc_trace(mVcdFile, VideoOut_TUSER, "(port)VideoOut_TUSER");
    sc_trace(mVcdFile, MetaIn_StreamId, "(port)MetaIn_StreamId");
    sc_trace(mVcdFile, MetaIn_StreamId_ap_vld, "(port)MetaIn_StreamId_ap_vld");
    sc_trace(mVcdFile, MetaIn_SourceTag, "(port)MetaIn_SourceTag");
    sc_trace(mVcdFile, MetaIn_SourceTag_ap_vld, "(port)MetaIn_SourceTag_ap_vld");
    sc_trace(mVcdFile, MetaIn_Xsize_V, "(port)MetaIn_Xsize_V");
    sc_trace(mVcdFile, MetaIn_Xsize_V_ap_vld, "(port)MetaIn_Xsize_V_ap_vld");
    sc_trace(mVcdFile, MetaIn_Xoffs_V, "(port)MetaIn_Xoffs_V");
    sc_trace(mVcdFile, MetaIn_Xoffs_V_ap_vld, "(port)MetaIn_Xoffs_V_ap_vld");
    sc_trace(mVcdFile, MetaIn_Ysize_V, "(port)MetaIn_Ysize_V");
    sc_trace(mVcdFile, MetaIn_Ysize_V_ap_vld, "(port)MetaIn_Ysize_V_ap_vld");
    sc_trace(mVcdFile, MetaIn_Yoffs_V, "(port)MetaIn_Yoffs_V");
    sc_trace(mVcdFile, MetaIn_Yoffs_V_ap_vld, "(port)MetaIn_Yoffs_V_ap_vld");
    sc_trace(mVcdFile, MetaIn_DsizeL_V, "(port)MetaIn_DsizeL_V");
    sc_trace(mVcdFile, MetaIn_DsizeL_V_ap_vld, "(port)MetaIn_DsizeL_V_ap_vld");
    sc_trace(mVcdFile, MetaIn_PixelF, "(port)MetaIn_PixelF");
    sc_trace(mVcdFile, MetaIn_PixelF_ap_vld, "(port)MetaIn_PixelF_ap_vld");
    sc_trace(mVcdFile, MetaIn_TapG, "(port)MetaIn_TapG");
    sc_trace(mVcdFile, MetaIn_TapG_ap_vld, "(port)MetaIn_TapG_ap_vld");
    sc_trace(mVcdFile, MetaIn_Flags, "(port)MetaIn_Flags");
    sc_trace(mVcdFile, MetaIn_Flags_ap_vld, "(port)MetaIn_Flags_ap_vld");
    sc_trace(mVcdFile, MetaIn_Timestamp, "(port)MetaIn_Timestamp");
    sc_trace(mVcdFile, MetaIn_Timestamp_ap_vld, "(port)MetaIn_Timestamp_ap_vld");
    sc_trace(mVcdFile, MetaIn_PixProcessingFlgs, "(port)MetaIn_PixProcessingFlgs");
    sc_trace(mVcdFile, MetaIn_PixProcessingFlgs_ap_vld, "(port)MetaIn_PixProcessingFlgs_ap_vld");
    sc_trace(mVcdFile, MetaIn_ModPixelF, "(port)MetaIn_ModPixelF");
    sc_trace(mVcdFile, MetaIn_ModPixelF_ap_vld, "(port)MetaIn_ModPixelF_ap_vld");
    sc_trace(mVcdFile, MetaIn_Status, "(port)MetaIn_Status");
    sc_trace(mVcdFile, MetaIn_Status_ap_vld, "(port)MetaIn_Status_ap_vld");
    sc_trace(mVcdFile, MetaOut_StreamId, "(port)MetaOut_StreamId");
    sc_trace(mVcdFile, MetaOut_SourceTag, "(port)MetaOut_SourceTag");
    sc_trace(mVcdFile, MetaOut_Xsize_V, "(port)MetaOut_Xsize_V");
    sc_trace(mVcdFile, MetaOut_Xoffs_V, "(port)MetaOut_Xoffs_V");
    sc_trace(mVcdFile, MetaOut_Ysize_V, "(port)MetaOut_Ysize_V");
    sc_trace(mVcdFile, MetaOut_Yoffs_V, "(port)MetaOut_Yoffs_V");
    sc_trace(mVcdFile, MetaOut_DsizeL_V, "(port)MetaOut_DsizeL_V");
    sc_trace(mVcdFile, MetaOut_PixelF, "(port)MetaOut_PixelF");
    sc_trace(mVcdFile, MetaOut_TapG, "(port)MetaOut_TapG");
    sc_trace(mVcdFile, MetaOut_Flags, "(port)MetaOut_Flags");
    sc_trace(mVcdFile, MetaOut_Timestamp, "(port)MetaOut_Timestamp");
    sc_trace(mVcdFile, MetaOut_PixProcessingFlgs, "(port)MetaOut_PixProcessingFlgs");
    sc_trace(mVcdFile, MetaOut_ModPixelF, "(port)MetaOut_ModPixelF");
    sc_trace(mVcdFile, MetaOut_Status, "(port)MetaOut_Status");
#endif
#ifdef __HLS_TRACE_LEVEL_INT__
    sc_trace(mVcdFile, ap_rst_n_inv, "ap_rst_n_inv");
    sc_trace(mVcdFile, ap_CS_fsm, "ap_CS_fsm");
    sc_trace(mVcdFile, ap_CS_fsm_state1, "ap_CS_fsm_state1");
    sc_trace(mVcdFile, VideoIn_V_Data_V_0_data_out, "VideoIn_V_Data_V_0_data_out");
    sc_trace(mVcdFile, VideoIn_V_Data_V_0_vld_in, "VideoIn_V_Data_V_0_vld_in");
    sc_trace(mVcdFile, VideoIn_V_Data_V_0_vld_out, "VideoIn_V_Data_V_0_vld_out");
    sc_trace(mVcdFile, VideoIn_V_Data_V_0_ack_in, "VideoIn_V_Data_V_0_ack_in");
    sc_trace(mVcdFile, VideoIn_V_Data_V_0_ack_out, "VideoIn_V_Data_V_0_ack_out");
    sc_trace(mVcdFile, VideoIn_V_Data_V_0_payload_A, "VideoIn_V_Data_V_0_payload_A");
    sc_trace(mVcdFile, VideoIn_V_Data_V_0_payload_B, "VideoIn_V_Data_V_0_payload_B");
    sc_trace(mVcdFile, VideoIn_V_Data_V_0_sel_rd, "VideoIn_V_Data_V_0_sel_rd");
    sc_trace(mVcdFile, VideoIn_V_Data_V_0_sel_wr, "VideoIn_V_Data_V_0_sel_wr");
    sc_trace(mVcdFile, VideoIn_V_Data_V_0_sel, "VideoIn_V_Data_V_0_sel");
    sc_trace(mVcdFile, VideoIn_V_Data_V_0_load_A, "VideoIn_V_Data_V_0_load_A");
    sc_trace(mVcdFile, VideoIn_V_Data_V_0_load_B, "VideoIn_V_Data_V_0_load_B");
    sc_trace(mVcdFile, VideoIn_V_Data_V_0_state, "VideoIn_V_Data_V_0_state");
    sc_trace(mVcdFile, VideoIn_V_Data_V_0_state_cmp_full, "VideoIn_V_Data_V_0_state_cmp_full");
    sc_trace(mVcdFile, VideoIn_V_User_V_0_data_out, "VideoIn_V_User_V_0_data_out");
    sc_trace(mVcdFile, VideoIn_V_User_V_0_vld_in, "VideoIn_V_User_V_0_vld_in");
    sc_trace(mVcdFile, VideoIn_V_User_V_0_vld_out, "VideoIn_V_User_V_0_vld_out");
    sc_trace(mVcdFile, VideoIn_V_User_V_0_ack_in, "VideoIn_V_User_V_0_ack_in");
    sc_trace(mVcdFile, VideoIn_V_User_V_0_ack_out, "VideoIn_V_User_V_0_ack_out");
    sc_trace(mVcdFile, VideoIn_V_User_V_0_payload_A, "VideoIn_V_User_V_0_payload_A");
    sc_trace(mVcdFile, VideoIn_V_User_V_0_payload_B, "VideoIn_V_User_V_0_payload_B");
    sc_trace(mVcdFile, VideoIn_V_User_V_0_sel_rd, "VideoIn_V_User_V_0_sel_rd");
    sc_trace(mVcdFile, VideoIn_V_User_V_0_sel_wr, "VideoIn_V_User_V_0_sel_wr");
    sc_trace(mVcdFile, VideoIn_V_User_V_0_sel, "VideoIn_V_User_V_0_sel");
    sc_trace(mVcdFile, VideoIn_V_User_V_0_load_A, "VideoIn_V_User_V_0_load_A");
    sc_trace(mVcdFile, VideoIn_V_User_V_0_load_B, "VideoIn_V_User_V_0_load_B");
    sc_trace(mVcdFile, VideoIn_V_User_V_0_state, "VideoIn_V_User_V_0_state");
    sc_trace(mVcdFile, VideoIn_V_User_V_0_state_cmp_full, "VideoIn_V_User_V_0_state_cmp_full");
    sc_trace(mVcdFile, VideoOut_V_Data_V_1_data_out, "VideoOut_V_Data_V_1_data_out");
    sc_trace(mVcdFile, VideoOut_V_Data_V_1_vld_in, "VideoOut_V_Data_V_1_vld_in");
    sc_trace(mVcdFile, VideoOut_V_Data_V_1_vld_out, "VideoOut_V_Data_V_1_vld_out");
    sc_trace(mVcdFile, VideoOut_V_Data_V_1_ack_in, "VideoOut_V_Data_V_1_ack_in");
    sc_trace(mVcdFile, VideoOut_V_Data_V_1_ack_out, "VideoOut_V_Data_V_1_ack_out");
    sc_trace(mVcdFile, VideoOut_V_Data_V_1_payload_A, "VideoOut_V_Data_V_1_payload_A");
    sc_trace(mVcdFile, VideoOut_V_Data_V_1_payload_B, "VideoOut_V_Data_V_1_payload_B");
    sc_trace(mVcdFile, VideoOut_V_Data_V_1_sel_rd, "VideoOut_V_Data_V_1_sel_rd");
    sc_trace(mVcdFile, VideoOut_V_Data_V_1_sel_wr, "VideoOut_V_Data_V_1_sel_wr");
    sc_trace(mVcdFile, VideoOut_V_Data_V_1_sel, "VideoOut_V_Data_V_1_sel");
    sc_trace(mVcdFile, VideoOut_V_Data_V_1_load_A, "VideoOut_V_Data_V_1_load_A");
    sc_trace(mVcdFile, VideoOut_V_Data_V_1_load_B, "VideoOut_V_Data_V_1_load_B");
    sc_trace(mVcdFile, VideoOut_V_Data_V_1_state, "VideoOut_V_Data_V_1_state");
    sc_trace(mVcdFile, VideoOut_V_Data_V_1_state_cmp_full, "VideoOut_V_Data_V_1_state_cmp_full");
    sc_trace(mVcdFile, VideoOut_V_User_V_1_data_out, "VideoOut_V_User_V_1_data_out");
    sc_trace(mVcdFile, VideoOut_V_User_V_1_vld_in, "VideoOut_V_User_V_1_vld_in");
    sc_trace(mVcdFile, VideoOut_V_User_V_1_vld_out, "VideoOut_V_User_V_1_vld_out");
    sc_trace(mVcdFile, VideoOut_V_User_V_1_ack_in, "VideoOut_V_User_V_1_ack_in");
    sc_trace(mVcdFile, VideoOut_V_User_V_1_ack_out, "VideoOut_V_User_V_1_ack_out");
    sc_trace(mVcdFile, VideoOut_V_User_V_1_payload_A, "VideoOut_V_User_V_1_payload_A");
    sc_trace(mVcdFile, VideoOut_V_User_V_1_payload_B, "VideoOut_V_User_V_1_payload_B");
    sc_trace(mVcdFile, VideoOut_V_User_V_1_sel_rd, "VideoOut_V_User_V_1_sel_rd");
    sc_trace(mVcdFile, VideoOut_V_User_V_1_sel_wr, "VideoOut_V_User_V_1_sel_wr");
    sc_trace(mVcdFile, VideoOut_V_User_V_1_sel, "VideoOut_V_User_V_1_sel");
    sc_trace(mVcdFile, VideoOut_V_User_V_1_load_A, "VideoOut_V_User_V_1_load_A");
    sc_trace(mVcdFile, VideoOut_V_User_V_1_load_B, "VideoOut_V_User_V_1_load_B");
    sc_trace(mVcdFile, VideoOut_V_User_V_1_state, "VideoOut_V_User_V_1_state");
    sc_trace(mVcdFile, VideoOut_V_User_V_1_state_cmp_full, "VideoOut_V_User_V_1_state_cmp_full");
    sc_trace(mVcdFile, MetaIn_StreamId_preg, "MetaIn_StreamId_preg");
    sc_trace(mVcdFile, MetaIn_StreamId_ap_vld_preg, "MetaIn_StreamId_ap_vld_preg");
    sc_trace(mVcdFile, MetaIn_SourceTag_preg, "MetaIn_SourceTag_preg");
    sc_trace(mVcdFile, MetaIn_SourceTag_ap_vld_preg, "MetaIn_SourceTag_ap_vld_preg");
    sc_trace(mVcdFile, MetaIn_Xsize_V_preg, "MetaIn_Xsize_V_preg");
    sc_trace(mVcdFile, MetaIn_Xsize_V_ap_vld_preg, "MetaIn_Xsize_V_ap_vld_preg");
    sc_trace(mVcdFile, MetaIn_Xoffs_V_preg, "MetaIn_Xoffs_V_preg");
    sc_trace(mVcdFile, MetaIn_Xoffs_V_ap_vld_preg, "MetaIn_Xoffs_V_ap_vld_preg");
    sc_trace(mVcdFile, MetaIn_Ysize_V_preg, "MetaIn_Ysize_V_preg");
    sc_trace(mVcdFile, MetaIn_Ysize_V_ap_vld_preg, "MetaIn_Ysize_V_ap_vld_preg");
    sc_trace(mVcdFile, MetaIn_Yoffs_V_preg, "MetaIn_Yoffs_V_preg");
    sc_trace(mVcdFile, MetaIn_Yoffs_V_ap_vld_preg, "MetaIn_Yoffs_V_ap_vld_preg");
    sc_trace(mVcdFile, MetaIn_DsizeL_V_preg, "MetaIn_DsizeL_V_preg");
    sc_trace(mVcdFile, MetaIn_DsizeL_V_ap_vld_preg, "MetaIn_DsizeL_V_ap_vld_preg");
    sc_trace(mVcdFile, MetaIn_PixelF_preg, "MetaIn_PixelF_preg");
    sc_trace(mVcdFile, MetaIn_PixelF_ap_vld_preg, "MetaIn_PixelF_ap_vld_preg");
    sc_trace(mVcdFile, MetaIn_TapG_preg, "MetaIn_TapG_preg");
    sc_trace(mVcdFile, MetaIn_TapG_ap_vld_preg, "MetaIn_TapG_ap_vld_preg");
    sc_trace(mVcdFile, MetaIn_Flags_preg, "MetaIn_Flags_preg");
    sc_trace(mVcdFile, MetaIn_Flags_ap_vld_preg, "MetaIn_Flags_ap_vld_preg");
    sc_trace(mVcdFile, MetaIn_Timestamp_preg, "MetaIn_Timestamp_preg");
    sc_trace(mVcdFile, MetaIn_Timestamp_ap_vld_preg, "MetaIn_Timestamp_ap_vld_preg");
    sc_trace(mVcdFile, MetaIn_PixProcessingFlgs_preg, "MetaIn_PixProcessingFlgs_preg");
    sc_trace(mVcdFile, MetaIn_PixProcessingFlgs_ap_vld_preg, "MetaIn_PixProcessingFlgs_ap_vld_preg");
    sc_trace(mVcdFile, MetaIn_ModPixelF_preg, "MetaIn_ModPixelF_preg");
    sc_trace(mVcdFile, MetaIn_ModPixelF_ap_vld_preg, "MetaIn_ModPixelF_ap_vld_preg");
    sc_trace(mVcdFile, MetaIn_Status_preg, "MetaIn_Status_preg");
    sc_trace(mVcdFile, MetaIn_Status_ap_vld_preg, "MetaIn_Status_ap_vld_preg");
    sc_trace(mVcdFile, MetaIn_StreamId_blk_n, "MetaIn_StreamId_blk_n");
    sc_trace(mVcdFile, ap_CS_fsm_state2, "ap_CS_fsm_state2");
    sc_trace(mVcdFile, MetaIn_SourceTag_blk_n, "MetaIn_SourceTag_blk_n");
    sc_trace(mVcdFile, MetaIn_Xsize_V_blk_n, "MetaIn_Xsize_V_blk_n");
    sc_trace(mVcdFile, MetaIn_Xoffs_V_blk_n, "MetaIn_Xoffs_V_blk_n");
    sc_trace(mVcdFile, MetaIn_Ysize_V_blk_n, "MetaIn_Ysize_V_blk_n");
    sc_trace(mVcdFile, MetaIn_Yoffs_V_blk_n, "MetaIn_Yoffs_V_blk_n");
    sc_trace(mVcdFile, MetaIn_DsizeL_V_blk_n, "MetaIn_DsizeL_V_blk_n");
    sc_trace(mVcdFile, MetaIn_PixelF_blk_n, "MetaIn_PixelF_blk_n");
    sc_trace(mVcdFile, MetaIn_TapG_blk_n, "MetaIn_TapG_blk_n");
    sc_trace(mVcdFile, MetaIn_Flags_blk_n, "MetaIn_Flags_blk_n");
    sc_trace(mVcdFile, MetaIn_Timestamp_blk_n, "MetaIn_Timestamp_blk_n");
    sc_trace(mVcdFile, MetaIn_PixProcessingFlgs_blk_n, "MetaIn_PixProcessingFlgs_blk_n");
    sc_trace(mVcdFile, MetaIn_ModPixelF_blk_n, "MetaIn_ModPixelF_blk_n");
    sc_trace(mVcdFile, MetaIn_Status_blk_n, "MetaIn_Status_blk_n");
    sc_trace(mVcdFile, grp_myproject_fu_302_VideoOut_TDATA, "grp_myproject_fu_302_VideoOut_TDATA");
    sc_trace(mVcdFile, grp_myproject_fu_302_VideoOut_TUSER, "grp_myproject_fu_302_VideoOut_TUSER");
    sc_trace(mVcdFile, grp_myproject_fu_302_VideoIn_TVALID, "grp_myproject_fu_302_VideoIn_TVALID");
    sc_trace(mVcdFile, grp_myproject_fu_302_VideoIn_TREADY, "grp_myproject_fu_302_VideoIn_TREADY");
    sc_trace(mVcdFile, grp_myproject_fu_302_ap_start, "grp_myproject_fu_302_ap_start");
    sc_trace(mVcdFile, grp_myproject_fu_302_VideoOut_TVALID, "grp_myproject_fu_302_VideoOut_TVALID");
    sc_trace(mVcdFile, grp_myproject_fu_302_VideoOut_TREADY, "grp_myproject_fu_302_VideoOut_TREADY");
    sc_trace(mVcdFile, grp_myproject_fu_302_ap_done, "grp_myproject_fu_302_ap_done");
    sc_trace(mVcdFile, grp_myproject_fu_302_ap_ready, "grp_myproject_fu_302_ap_ready");
    sc_trace(mVcdFile, grp_myproject_fu_302_ap_idle, "grp_myproject_fu_302_ap_idle");
    sc_trace(mVcdFile, grp_myproject_fu_302_ap_continue, "grp_myproject_fu_302_ap_continue");
    sc_trace(mVcdFile, grp_myproject_fu_302_ap_start_reg, "grp_myproject_fu_302_ap_start_reg");
    sc_trace(mVcdFile, ap_block_state2_ignore_call65, "ap_block_state2_ignore_call65");
    sc_trace(mVcdFile, ap_CS_fsm_state3, "ap_CS_fsm_state3");
    sc_trace(mVcdFile, ap_sync_grp_myproject_fu_302_ap_ready, "ap_sync_grp_myproject_fu_302_ap_ready");
    sc_trace(mVcdFile, ap_sync_grp_myproject_fu_302_ap_done, "ap_sync_grp_myproject_fu_302_ap_done");
    sc_trace(mVcdFile, ap_block_state3_on_subcall_done, "ap_block_state3_on_subcall_done");
    sc_trace(mVcdFile, ap_sync_reg_grp_myproject_fu_302_ap_ready, "ap_sync_reg_grp_myproject_fu_302_ap_ready");
    sc_trace(mVcdFile, ap_sync_reg_grp_myproject_fu_302_ap_done, "ap_sync_reg_grp_myproject_fu_302_ap_done");
    sc_trace(mVcdFile, ap_block_state2, "ap_block_state2");
    sc_trace(mVcdFile, MetaOut_StreamId_preg, "MetaOut_StreamId_preg");
    sc_trace(mVcdFile, MetaOut_SourceTag_preg, "MetaOut_SourceTag_preg");
    sc_trace(mVcdFile, MetaOut_Xsize_V_preg, "MetaOut_Xsize_V_preg");
    sc_trace(mVcdFile, MetaOut_Xoffs_V_preg, "MetaOut_Xoffs_V_preg");
    sc_trace(mVcdFile, MetaOut_Ysize_V_preg, "MetaOut_Ysize_V_preg");
    sc_trace(mVcdFile, MetaOut_Yoffs_V_preg, "MetaOut_Yoffs_V_preg");
    sc_trace(mVcdFile, MetaOut_DsizeL_V_preg, "MetaOut_DsizeL_V_preg");
    sc_trace(mVcdFile, MetaOut_PixelF_preg, "MetaOut_PixelF_preg");
    sc_trace(mVcdFile, MetaOut_TapG_preg, "MetaOut_TapG_preg");
    sc_trace(mVcdFile, MetaOut_Flags_preg, "MetaOut_Flags_preg");
    sc_trace(mVcdFile, MetaOut_Timestamp_preg, "MetaOut_Timestamp_preg");
    sc_trace(mVcdFile, MetaOut_PixProcessingFlgs_preg, "MetaOut_PixProcessingFlgs_preg");
    sc_trace(mVcdFile, MetaOut_ModPixelF_preg, "MetaOut_ModPixelF_preg");
    sc_trace(mVcdFile, MetaOut_Status_preg, "MetaOut_Status_preg");
    sc_trace(mVcdFile, ap_CS_fsm_state4, "ap_CS_fsm_state4");
    sc_trace(mVcdFile, ap_block_state4, "ap_block_state4");
    sc_trace(mVcdFile, ap_NS_fsm, "ap_NS_fsm");
#endif

    }
    mHdltvinHandle.open("myproject_axi.hdltvin.dat");
    mHdltvoutHandle.open("myproject_axi.hdltvout.dat");
}

myproject_axi::~myproject_axi() {
    if (mVcdFile) 
        sc_close_vcd_trace_file(mVcdFile);

    mHdltvinHandle << "] " << endl;
    mHdltvoutHandle << "] " << endl;
    mHdltvinHandle.close();
    mHdltvoutHandle.close();
    delete grp_myproject_fu_302;
}

void myproject_axi::thread_ap_clk_no_reset_() {
    if ( ap_rst_n_inv.read() == ap_const_logic_1) {
        MetaIn_DsizeL_V_ap_vld_preg = ap_const_logic_0;
    } else {
        if ((!(esl_seteq<1,1,1>(ap_const_logic_0, ap_start.read()) && esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read())) && 
             esl_seteq<1,1,1>(ap_const_logic_1, MetaIn_DsizeL_V_ap_vld.read()))) {
            MetaIn_DsizeL_V_ap_vld_preg = MetaIn_DsizeL_V_ap_vld.read();
        } else if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state4.read()) && 
                    !(esl_seteq<1,1,1>(ap_const_logic_0, VideoOut_V_Data_V_1_ack_in.read()) || esl_seteq<1,1,1>(ap_const_logic_0, VideoOut_V_User_V_1_ack_in.read())))) {
            MetaIn_DsizeL_V_ap_vld_preg = ap_const_logic_0;
        }
    }
    if ( ap_rst_n_inv.read() == ap_const_logic_1) {
        MetaIn_DsizeL_V_preg = ap_const_lv24_0;
    } else {
        if ((!(esl_seteq<1,1,1>(ap_const_logic_0, ap_start.read()) && esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read())) && 
             esl_seteq<1,1,1>(ap_const_logic_1, MetaIn_DsizeL_V_ap_vld.read()))) {
            MetaIn_DsizeL_V_preg = MetaIn_DsizeL_V.read();
        }
    }
    if ( ap_rst_n_inv.read() == ap_const_logic_1) {
        MetaIn_Flags_ap_vld_preg = ap_const_logic_0;
    } else {
        if ((!(esl_seteq<1,1,1>(ap_const_logic_0, ap_start.read()) && esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read())) && 
             esl_seteq<1,1,1>(ap_const_logic_1, MetaIn_Flags_ap_vld.read()))) {
            MetaIn_Flags_ap_vld_preg = MetaIn_Flags_ap_vld.read();
        } else if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state4.read()) && 
                    !(esl_seteq<1,1,1>(ap_const_logic_0, VideoOut_V_Data_V_1_ack_in.read()) || esl_seteq<1,1,1>(ap_const_logic_0, VideoOut_V_User_V_1_ack_in.read())))) {
            MetaIn_Flags_ap_vld_preg = ap_const_logic_0;
        }
    }
    if ( ap_rst_n_inv.read() == ap_const_logic_1) {
        MetaIn_Flags_preg = ap_const_lv8_0;
    } else {
        if ((!(esl_seteq<1,1,1>(ap_const_logic_0, ap_start.read()) && esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read())) && 
             esl_seteq<1,1,1>(ap_const_logic_1, MetaIn_Flags_ap_vld.read()))) {
            MetaIn_Flags_preg = MetaIn_Flags.read();
        }
    }
    if ( ap_rst_n_inv.read() == ap_const_logic_1) {
        MetaIn_ModPixelF_ap_vld_preg = ap_const_logic_0;
    } else {
        if ((!(esl_seteq<1,1,1>(ap_const_logic_0, ap_start.read()) && esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read())) && 
             esl_seteq<1,1,1>(ap_const_logic_1, MetaIn_ModPixelF_ap_vld.read()))) {
            MetaIn_ModPixelF_ap_vld_preg = MetaIn_ModPixelF_ap_vld.read();
        } else if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state4.read()) && 
                    !(esl_seteq<1,1,1>(ap_const_logic_0, VideoOut_V_Data_V_1_ack_in.read()) || esl_seteq<1,1,1>(ap_const_logic_0, VideoOut_V_User_V_1_ack_in.read())))) {
            MetaIn_ModPixelF_ap_vld_preg = ap_const_logic_0;
        }
    }
    if ( ap_rst_n_inv.read() == ap_const_logic_1) {
        MetaIn_ModPixelF_preg = ap_const_lv32_0;
    } else {
        if ((!(esl_seteq<1,1,1>(ap_const_logic_0, ap_start.read()) && esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read())) && 
             esl_seteq<1,1,1>(ap_const_logic_1, MetaIn_ModPixelF_ap_vld.read()))) {
            MetaIn_ModPixelF_preg = MetaIn_ModPixelF.read();
        }
    }
    if ( ap_rst_n_inv.read() == ap_const_logic_1) {
        MetaIn_PixProcessingFlgs_ap_vld_preg = ap_const_logic_0;
    } else {
        if ((!(esl_seteq<1,1,1>(ap_const_logic_0, ap_start.read()) && esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read())) && 
             esl_seteq<1,1,1>(ap_const_logic_1, MetaIn_PixProcessingFlgs_ap_vld.read()))) {
            MetaIn_PixProcessingFlgs_ap_vld_preg = MetaIn_PixProcessingFlgs_ap_vld.read();
        } else if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state4.read()) && 
                    !(esl_seteq<1,1,1>(ap_const_logic_0, VideoOut_V_Data_V_1_ack_in.read()) || esl_seteq<1,1,1>(ap_const_logic_0, VideoOut_V_User_V_1_ack_in.read())))) {
            MetaIn_PixProcessingFlgs_ap_vld_preg = ap_const_logic_0;
        }
    }
    if ( ap_rst_n_inv.read() == ap_const_logic_1) {
        MetaIn_PixProcessingFlgs_preg = ap_const_lv8_0;
    } else {
        if ((!(esl_seteq<1,1,1>(ap_const_logic_0, ap_start.read()) && esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read())) && 
             esl_seteq<1,1,1>(ap_const_logic_1, MetaIn_PixProcessingFlgs_ap_vld.read()))) {
            MetaIn_PixProcessingFlgs_preg = MetaIn_PixProcessingFlgs.read();
        }
    }
    if ( ap_rst_n_inv.read() == ap_const_logic_1) {
        MetaIn_PixelF_ap_vld_preg = ap_const_logic_0;
    } else {
        if ((!(esl_seteq<1,1,1>(ap_const_logic_0, ap_start.read()) && esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read())) && 
             esl_seteq<1,1,1>(ap_const_logic_1, MetaIn_PixelF_ap_vld.read()))) {
            MetaIn_PixelF_ap_vld_preg = MetaIn_PixelF_ap_vld.read();
        } else if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state4.read()) && 
                    !(esl_seteq<1,1,1>(ap_const_logic_0, VideoOut_V_Data_V_1_ack_in.read()) || esl_seteq<1,1,1>(ap_const_logic_0, VideoOut_V_User_V_1_ack_in.read())))) {
            MetaIn_PixelF_ap_vld_preg = ap_const_logic_0;
        }
    }
    if ( ap_rst_n_inv.read() == ap_const_logic_1) {
        MetaIn_PixelF_preg = ap_const_lv16_0;
    } else {
        if ((!(esl_seteq<1,1,1>(ap_const_logic_0, ap_start.read()) && esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read())) && 
             esl_seteq<1,1,1>(ap_const_logic_1, MetaIn_PixelF_ap_vld.read()))) {
            MetaIn_PixelF_preg = MetaIn_PixelF.read();
        }
    }
    if ( ap_rst_n_inv.read() == ap_const_logic_1) {
        MetaIn_SourceTag_ap_vld_preg = ap_const_logic_0;
    } else {
        if ((!(esl_seteq<1,1,1>(ap_const_logic_0, ap_start.read()) && esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read())) && 
             esl_seteq<1,1,1>(ap_const_logic_1, MetaIn_SourceTag_ap_vld.read()))) {
            MetaIn_SourceTag_ap_vld_preg = MetaIn_SourceTag_ap_vld.read();
        } else if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state4.read()) && 
                    !(esl_seteq<1,1,1>(ap_const_logic_0, VideoOut_V_Data_V_1_ack_in.read()) || esl_seteq<1,1,1>(ap_const_logic_0, VideoOut_V_User_V_1_ack_in.read())))) {
            MetaIn_SourceTag_ap_vld_preg = ap_const_logic_0;
        }
    }
    if ( ap_rst_n_inv.read() == ap_const_logic_1) {
        MetaIn_SourceTag_preg = ap_const_lv16_0;
    } else {
        if ((!(esl_seteq<1,1,1>(ap_const_logic_0, ap_start.read()) && esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read())) && 
             esl_seteq<1,1,1>(ap_const_logic_1, MetaIn_SourceTag_ap_vld.read()))) {
            MetaIn_SourceTag_preg = MetaIn_SourceTag.read();
        }
    }
    if ( ap_rst_n_inv.read() == ap_const_logic_1) {
        MetaIn_Status_ap_vld_preg = ap_const_logic_0;
    } else {
        if ((!(esl_seteq<1,1,1>(ap_const_logic_0, ap_start.read()) && esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read())) && 
             esl_seteq<1,1,1>(ap_const_logic_1, MetaIn_Status_ap_vld.read()))) {
            MetaIn_Status_ap_vld_preg = MetaIn_Status_ap_vld.read();
        } else if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state4.read()) && 
                    !(esl_seteq<1,1,1>(ap_const_logic_0, VideoOut_V_Data_V_1_ack_in.read()) || esl_seteq<1,1,1>(ap_const_logic_0, VideoOut_V_User_V_1_ack_in.read())))) {
            MetaIn_Status_ap_vld_preg = ap_const_logic_0;
        }
    }
    if ( ap_rst_n_inv.read() == ap_const_logic_1) {
        MetaIn_Status_preg = ap_const_lv32_0;
    } else {
        if ((!(esl_seteq<1,1,1>(ap_const_logic_0, ap_start.read()) && esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read())) && 
             esl_seteq<1,1,1>(ap_const_logic_1, MetaIn_Status_ap_vld.read()))) {
            MetaIn_Status_preg = MetaIn_Status.read();
        }
    }
    if ( ap_rst_n_inv.read() == ap_const_logic_1) {
        MetaIn_StreamId_ap_vld_preg = ap_const_logic_0;
    } else {
        if ((!(esl_seteq<1,1,1>(ap_const_logic_0, ap_start.read()) && esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read())) && 
             esl_seteq<1,1,1>(ap_const_logic_1, MetaIn_StreamId_ap_vld.read()))) {
            MetaIn_StreamId_ap_vld_preg = MetaIn_StreamId_ap_vld.read();
        } else if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state4.read()) && 
                    !(esl_seteq<1,1,1>(ap_const_logic_0, VideoOut_V_Data_V_1_ack_in.read()) || esl_seteq<1,1,1>(ap_const_logic_0, VideoOut_V_User_V_1_ack_in.read())))) {
            MetaIn_StreamId_ap_vld_preg = ap_const_logic_0;
        }
    }
    if ( ap_rst_n_inv.read() == ap_const_logic_1) {
        MetaIn_StreamId_preg = ap_const_lv8_0;
    } else {
        if ((!(esl_seteq<1,1,1>(ap_const_logic_0, ap_start.read()) && esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read())) && 
             esl_seteq<1,1,1>(ap_const_logic_1, MetaIn_StreamId_ap_vld.read()))) {
            MetaIn_StreamId_preg = MetaIn_StreamId.read();
        }
    }
    if ( ap_rst_n_inv.read() == ap_const_logic_1) {
        MetaIn_TapG_ap_vld_preg = ap_const_logic_0;
    } else {
        if ((!(esl_seteq<1,1,1>(ap_const_logic_0, ap_start.read()) && esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read())) && 
             esl_seteq<1,1,1>(ap_const_logic_1, MetaIn_TapG_ap_vld.read()))) {
            MetaIn_TapG_ap_vld_preg = MetaIn_TapG_ap_vld.read();
        } else if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state4.read()) && 
                    !(esl_seteq<1,1,1>(ap_const_logic_0, VideoOut_V_Data_V_1_ack_in.read()) || esl_seteq<1,1,1>(ap_const_logic_0, VideoOut_V_User_V_1_ack_in.read())))) {
            MetaIn_TapG_ap_vld_preg = ap_const_logic_0;
        }
    }
    if ( ap_rst_n_inv.read() == ap_const_logic_1) {
        MetaIn_TapG_preg = ap_const_lv16_0;
    } else {
        if ((!(esl_seteq<1,1,1>(ap_const_logic_0, ap_start.read()) && esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read())) && 
             esl_seteq<1,1,1>(ap_const_logic_1, MetaIn_TapG_ap_vld.read()))) {
            MetaIn_TapG_preg = MetaIn_TapG.read();
        }
    }
    if ( ap_rst_n_inv.read() == ap_const_logic_1) {
        MetaIn_Timestamp_ap_vld_preg = ap_const_logic_0;
    } else {
        if ((!(esl_seteq<1,1,1>(ap_const_logic_0, ap_start.read()) && esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read())) && 
             esl_seteq<1,1,1>(ap_const_logic_1, MetaIn_Timestamp_ap_vld.read()))) {
            MetaIn_Timestamp_ap_vld_preg = MetaIn_Timestamp_ap_vld.read();
        } else if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state4.read()) && 
                    !(esl_seteq<1,1,1>(ap_const_logic_0, VideoOut_V_Data_V_1_ack_in.read()) || esl_seteq<1,1,1>(ap_const_logic_0, VideoOut_V_User_V_1_ack_in.read())))) {
            MetaIn_Timestamp_ap_vld_preg = ap_const_logic_0;
        }
    }
    if ( ap_rst_n_inv.read() == ap_const_logic_1) {
        MetaIn_Timestamp_preg = ap_const_lv32_0;
    } else {
        if ((!(esl_seteq<1,1,1>(ap_const_logic_0, ap_start.read()) && esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read())) && 
             esl_seteq<1,1,1>(ap_const_logic_1, MetaIn_Timestamp_ap_vld.read()))) {
            MetaIn_Timestamp_preg = MetaIn_Timestamp.read();
        }
    }
    if ( ap_rst_n_inv.read() == ap_const_logic_1) {
        MetaIn_Xoffs_V_ap_vld_preg = ap_const_logic_0;
    } else {
        if ((!(esl_seteq<1,1,1>(ap_const_logic_0, ap_start.read()) && esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read())) && 
             esl_seteq<1,1,1>(ap_const_logic_1, MetaIn_Xoffs_V_ap_vld.read()))) {
            MetaIn_Xoffs_V_ap_vld_preg = MetaIn_Xoffs_V_ap_vld.read();
        } else if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state4.read()) && 
                    !(esl_seteq<1,1,1>(ap_const_logic_0, VideoOut_V_Data_V_1_ack_in.read()) || esl_seteq<1,1,1>(ap_const_logic_0, VideoOut_V_User_V_1_ack_in.read())))) {
            MetaIn_Xoffs_V_ap_vld_preg = ap_const_logic_0;
        }
    }
    if ( ap_rst_n_inv.read() == ap_const_logic_1) {
        MetaIn_Xoffs_V_preg = ap_const_lv24_0;
    } else {
        if ((!(esl_seteq<1,1,1>(ap_const_logic_0, ap_start.read()) && esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read())) && 
             esl_seteq<1,1,1>(ap_const_logic_1, MetaIn_Xoffs_V_ap_vld.read()))) {
            MetaIn_Xoffs_V_preg = MetaIn_Xoffs_V.read();
        }
    }
    if ( ap_rst_n_inv.read() == ap_const_logic_1) {
        MetaIn_Xsize_V_ap_vld_preg = ap_const_logic_0;
    } else {
        if ((!(esl_seteq<1,1,1>(ap_const_logic_0, ap_start.read()) && esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read())) && 
             esl_seteq<1,1,1>(ap_const_logic_1, MetaIn_Xsize_V_ap_vld.read()))) {
            MetaIn_Xsize_V_ap_vld_preg = MetaIn_Xsize_V_ap_vld.read();
        } else if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state4.read()) && 
                    !(esl_seteq<1,1,1>(ap_const_logic_0, VideoOut_V_Data_V_1_ack_in.read()) || esl_seteq<1,1,1>(ap_const_logic_0, VideoOut_V_User_V_1_ack_in.read())))) {
            MetaIn_Xsize_V_ap_vld_preg = ap_const_logic_0;
        }
    }
    if ( ap_rst_n_inv.read() == ap_const_logic_1) {
        MetaIn_Xsize_V_preg = ap_const_lv24_0;
    } else {
        if ((!(esl_seteq<1,1,1>(ap_const_logic_0, ap_start.read()) && esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read())) && 
             esl_seteq<1,1,1>(ap_const_logic_1, MetaIn_Xsize_V_ap_vld.read()))) {
            MetaIn_Xsize_V_preg = MetaIn_Xsize_V.read();
        }
    }
    if ( ap_rst_n_inv.read() == ap_const_logic_1) {
        MetaIn_Yoffs_V_ap_vld_preg = ap_const_logic_0;
    } else {
        if ((!(esl_seteq<1,1,1>(ap_const_logic_0, ap_start.read()) && esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read())) && 
             esl_seteq<1,1,1>(ap_const_logic_1, MetaIn_Yoffs_V_ap_vld.read()))) {
            MetaIn_Yoffs_V_ap_vld_preg = MetaIn_Yoffs_V_ap_vld.read();
        } else if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state4.read()) && 
                    !(esl_seteq<1,1,1>(ap_const_logic_0, VideoOut_V_Data_V_1_ack_in.read()) || esl_seteq<1,1,1>(ap_const_logic_0, VideoOut_V_User_V_1_ack_in.read())))) {
            MetaIn_Yoffs_V_ap_vld_preg = ap_const_logic_0;
        }
    }
    if ( ap_rst_n_inv.read() == ap_const_logic_1) {
        MetaIn_Yoffs_V_preg = ap_const_lv24_0;
    } else {
        if ((!(esl_seteq<1,1,1>(ap_const_logic_0, ap_start.read()) && esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read())) && 
             esl_seteq<1,1,1>(ap_const_logic_1, MetaIn_Yoffs_V_ap_vld.read()))) {
            MetaIn_Yoffs_V_preg = MetaIn_Yoffs_V.read();
        }
    }
    if ( ap_rst_n_inv.read() == ap_const_logic_1) {
        MetaIn_Ysize_V_ap_vld_preg = ap_const_logic_0;
    } else {
        if ((!(esl_seteq<1,1,1>(ap_const_logic_0, ap_start.read()) && esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read())) && 
             esl_seteq<1,1,1>(ap_const_logic_1, MetaIn_Ysize_V_ap_vld.read()))) {
            MetaIn_Ysize_V_ap_vld_preg = MetaIn_Ysize_V_ap_vld.read();
        } else if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state4.read()) && 
                    !(esl_seteq<1,1,1>(ap_const_logic_0, VideoOut_V_Data_V_1_ack_in.read()) || esl_seteq<1,1,1>(ap_const_logic_0, VideoOut_V_User_V_1_ack_in.read())))) {
            MetaIn_Ysize_V_ap_vld_preg = ap_const_logic_0;
        }
    }
    if ( ap_rst_n_inv.read() == ap_const_logic_1) {
        MetaIn_Ysize_V_preg = ap_const_lv24_0;
    } else {
        if ((!(esl_seteq<1,1,1>(ap_const_logic_0, ap_start.read()) && esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read())) && 
             esl_seteq<1,1,1>(ap_const_logic_1, MetaIn_Ysize_V_ap_vld.read()))) {
            MetaIn_Ysize_V_preg = MetaIn_Ysize_V.read();
        }
    }
    if ( ap_rst_n_inv.read() == ap_const_logic_1) {
        MetaOut_DsizeL_V_preg = ap_const_lv24_0;
    } else {
        if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state2.read()) && 
             !(esl_seteq<1,1,1>(ap_const_logic_0, MetaIn_StreamId_ap_vld_preg.read()) || esl_seteq<1,1,1>(ap_const_logic_0, MetaIn_SourceTag_ap_vld_preg.read()) || esl_seteq<1,1,1>(ap_const_logic_0, MetaIn_Xsize_V_ap_vld_preg.read()) || esl_seteq<1,1,1>(ap_const_logic_0, MetaIn_Xoffs_V_ap_vld_preg.read()) || esl_seteq<1,1,1>(ap_const_logic_0, MetaIn_Ysize_V_ap_vld_preg.read()) || esl_seteq<1,1,1>(ap_const_logic_0, MetaIn_Yoffs_V_ap_vld_preg.read()) || esl_seteq<1,1,1>(ap_const_logic_0, MetaIn_DsizeL_V_ap_vld_preg.read()) || esl_seteq<1,1,1>(ap_const_logic_0, MetaIn_PixelF_ap_vld_preg.read()) || esl_seteq<1,1,1>(ap_const_logic_0, MetaIn_TapG_ap_vld_preg.read()) || esl_seteq<1,1,1>(ap_const_logic_0, MetaIn_Flags_ap_vld_preg.read()) || esl_seteq<1,1,1>(ap_const_logic_0, MetaIn_Timestamp_ap_vld_preg.read()) || esl_seteq<1,1,1>(ap_const_logic_0, MetaIn_PixProcessingFlgs_ap_vld_preg.read()) || esl_seteq<1,1,1>(ap_const_logic_0, MetaIn_ModPixelF_ap_vld_preg.read()) || esl_seteq<1,1,1>(ap_const_logic_0, MetaIn_Status_ap_vld_preg.read())))) {
            MetaOut_DsizeL_V_preg = MetaIn_DsizeL_V_preg.read();
        }
    }
    if ( ap_rst_n_inv.read() == ap_const_logic_1) {
        MetaOut_Flags_preg = ap_const_lv8_0;
    } else {
        if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state2.read()) && 
             !(esl_seteq<1,1,1>(ap_const_logic_0, MetaIn_StreamId_ap_vld_preg.read()) || esl_seteq<1,1,1>(ap_const_logic_0, MetaIn_SourceTag_ap_vld_preg.read()) || esl_seteq<1,1,1>(ap_const_logic_0, MetaIn_Xsize_V_ap_vld_preg.read()) || esl_seteq<1,1,1>(ap_const_logic_0, MetaIn_Xoffs_V_ap_vld_preg.read()) || esl_seteq<1,1,1>(ap_const_logic_0, MetaIn_Ysize_V_ap_vld_preg.read()) || esl_seteq<1,1,1>(ap_const_logic_0, MetaIn_Yoffs_V_ap_vld_preg.read()) || esl_seteq<1,1,1>(ap_const_logic_0, MetaIn_DsizeL_V_ap_vld_preg.read()) || esl_seteq<1,1,1>(ap_const_logic_0, MetaIn_PixelF_ap_vld_preg.read()) || esl_seteq<1,1,1>(ap_const_logic_0, MetaIn_TapG_ap_vld_preg.read()) || esl_seteq<1,1,1>(ap_const_logic_0, MetaIn_Flags_ap_vld_preg.read()) || esl_seteq<1,1,1>(ap_const_logic_0, MetaIn_Timestamp_ap_vld_preg.read()) || esl_seteq<1,1,1>(ap_const_logic_0, MetaIn_PixProcessingFlgs_ap_vld_preg.read()) || esl_seteq<1,1,1>(ap_const_logic_0, MetaIn_ModPixelF_ap_vld_preg.read()) || esl_seteq<1,1,1>(ap_const_logic_0, MetaIn_Status_ap_vld_preg.read())))) {
            MetaOut_Flags_preg = MetaIn_Flags_preg.read();
        }
    }
    if ( ap_rst_n_inv.read() == ap_const_logic_1) {
        MetaOut_ModPixelF_preg = ap_const_lv32_0;
    } else {
        if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state2.read()) && 
             !(esl_seteq<1,1,1>(ap_const_logic_0, MetaIn_StreamId_ap_vld_preg.read()) || esl_seteq<1,1,1>(ap_const_logic_0, MetaIn_SourceTag_ap_vld_preg.read()) || esl_seteq<1,1,1>(ap_const_logic_0, MetaIn_Xsize_V_ap_vld_preg.read()) || esl_seteq<1,1,1>(ap_const_logic_0, MetaIn_Xoffs_V_ap_vld_preg.read()) || esl_seteq<1,1,1>(ap_const_logic_0, MetaIn_Ysize_V_ap_vld_preg.read()) || esl_seteq<1,1,1>(ap_const_logic_0, MetaIn_Yoffs_V_ap_vld_preg.read()) || esl_seteq<1,1,1>(ap_const_logic_0, MetaIn_DsizeL_V_ap_vld_preg.read()) || esl_seteq<1,1,1>(ap_const_logic_0, MetaIn_PixelF_ap_vld_preg.read()) || esl_seteq<1,1,1>(ap_const_logic_0, MetaIn_TapG_ap_vld_preg.read()) || esl_seteq<1,1,1>(ap_const_logic_0, MetaIn_Flags_ap_vld_preg.read()) || esl_seteq<1,1,1>(ap_const_logic_0, MetaIn_Timestamp_ap_vld_preg.read()) || esl_seteq<1,1,1>(ap_const_logic_0, MetaIn_PixProcessingFlgs_ap_vld_preg.read()) || esl_seteq<1,1,1>(ap_const_logic_0, MetaIn_ModPixelF_ap_vld_preg.read()) || esl_seteq<1,1,1>(ap_const_logic_0, MetaIn_Status_ap_vld_preg.read())))) {
            MetaOut_ModPixelF_preg = MetaIn_ModPixelF_preg.read();
        }
    }
    if ( ap_rst_n_inv.read() == ap_const_logic_1) {
        MetaOut_PixProcessingFlgs_preg = ap_const_lv8_0;
    } else {
        if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state2.read()) && 
             !(esl_seteq<1,1,1>(ap_const_logic_0, MetaIn_StreamId_ap_vld_preg.read()) || esl_seteq<1,1,1>(ap_const_logic_0, MetaIn_SourceTag_ap_vld_preg.read()) || esl_seteq<1,1,1>(ap_const_logic_0, MetaIn_Xsize_V_ap_vld_preg.read()) || esl_seteq<1,1,1>(ap_const_logic_0, MetaIn_Xoffs_V_ap_vld_preg.read()) || esl_seteq<1,1,1>(ap_const_logic_0, MetaIn_Ysize_V_ap_vld_preg.read()) || esl_seteq<1,1,1>(ap_const_logic_0, MetaIn_Yoffs_V_ap_vld_preg.read()) || esl_seteq<1,1,1>(ap_const_logic_0, MetaIn_DsizeL_V_ap_vld_preg.read()) || esl_seteq<1,1,1>(ap_const_logic_0, MetaIn_PixelF_ap_vld_preg.read()) || esl_seteq<1,1,1>(ap_const_logic_0, MetaIn_TapG_ap_vld_preg.read()) || esl_seteq<1,1,1>(ap_const_logic_0, MetaIn_Flags_ap_vld_preg.read()) || esl_seteq<1,1,1>(ap_const_logic_0, MetaIn_Timestamp_ap_vld_preg.read()) || esl_seteq<1,1,1>(ap_const_logic_0, MetaIn_PixProcessingFlgs_ap_vld_preg.read()) || esl_seteq<1,1,1>(ap_const_logic_0, MetaIn_ModPixelF_ap_vld_preg.read()) || esl_seteq<1,1,1>(ap_const_logic_0, MetaIn_Status_ap_vld_preg.read())))) {
            MetaOut_PixProcessingFlgs_preg = MetaIn_PixProcessingFlgs_preg.read();
        }
    }
    if ( ap_rst_n_inv.read() == ap_const_logic_1) {
        MetaOut_PixelF_preg = ap_const_lv16_0;
    } else {
        if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state2.read()) && 
             !(esl_seteq<1,1,1>(ap_const_logic_0, MetaIn_StreamId_ap_vld_preg.read()) || esl_seteq<1,1,1>(ap_const_logic_0, MetaIn_SourceTag_ap_vld_preg.read()) || esl_seteq<1,1,1>(ap_const_logic_0, MetaIn_Xsize_V_ap_vld_preg.read()) || esl_seteq<1,1,1>(ap_const_logic_0, MetaIn_Xoffs_V_ap_vld_preg.read()) || esl_seteq<1,1,1>(ap_const_logic_0, MetaIn_Ysize_V_ap_vld_preg.read()) || esl_seteq<1,1,1>(ap_const_logic_0, MetaIn_Yoffs_V_ap_vld_preg.read()) || esl_seteq<1,1,1>(ap_const_logic_0, MetaIn_DsizeL_V_ap_vld_preg.read()) || esl_seteq<1,1,1>(ap_const_logic_0, MetaIn_PixelF_ap_vld_preg.read()) || esl_seteq<1,1,1>(ap_const_logic_0, MetaIn_TapG_ap_vld_preg.read()) || esl_seteq<1,1,1>(ap_const_logic_0, MetaIn_Flags_ap_vld_preg.read()) || esl_seteq<1,1,1>(ap_const_logic_0, MetaIn_Timestamp_ap_vld_preg.read()) || esl_seteq<1,1,1>(ap_const_logic_0, MetaIn_PixProcessingFlgs_ap_vld_preg.read()) || esl_seteq<1,1,1>(ap_const_logic_0, MetaIn_ModPixelF_ap_vld_preg.read()) || esl_seteq<1,1,1>(ap_const_logic_0, MetaIn_Status_ap_vld_preg.read())))) {
            MetaOut_PixelF_preg = MetaIn_PixelF_preg.read();
        }
    }
    if ( ap_rst_n_inv.read() == ap_const_logic_1) {
        MetaOut_SourceTag_preg = ap_const_lv16_0;
    } else {
        if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state2.read()) && 
             !(esl_seteq<1,1,1>(ap_const_logic_0, MetaIn_StreamId_ap_vld_preg.read()) || esl_seteq<1,1,1>(ap_const_logic_0, MetaIn_SourceTag_ap_vld_preg.read()) || esl_seteq<1,1,1>(ap_const_logic_0, MetaIn_Xsize_V_ap_vld_preg.read()) || esl_seteq<1,1,1>(ap_const_logic_0, MetaIn_Xoffs_V_ap_vld_preg.read()) || esl_seteq<1,1,1>(ap_const_logic_0, MetaIn_Ysize_V_ap_vld_preg.read()) || esl_seteq<1,1,1>(ap_const_logic_0, MetaIn_Yoffs_V_ap_vld_preg.read()) || esl_seteq<1,1,1>(ap_const_logic_0, MetaIn_DsizeL_V_ap_vld_preg.read()) || esl_seteq<1,1,1>(ap_const_logic_0, MetaIn_PixelF_ap_vld_preg.read()) || esl_seteq<1,1,1>(ap_const_logic_0, MetaIn_TapG_ap_vld_preg.read()) || esl_seteq<1,1,1>(ap_const_logic_0, MetaIn_Flags_ap_vld_preg.read()) || esl_seteq<1,1,1>(ap_const_logic_0, MetaIn_Timestamp_ap_vld_preg.read()) || esl_seteq<1,1,1>(ap_const_logic_0, MetaIn_PixProcessingFlgs_ap_vld_preg.read()) || esl_seteq<1,1,1>(ap_const_logic_0, MetaIn_ModPixelF_ap_vld_preg.read()) || esl_seteq<1,1,1>(ap_const_logic_0, MetaIn_Status_ap_vld_preg.read())))) {
            MetaOut_SourceTag_preg = MetaIn_SourceTag_preg.read();
        }
    }
    if ( ap_rst_n_inv.read() == ap_const_logic_1) {
        MetaOut_Status_preg = ap_const_lv32_0;
    } else {
        if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state2.read()) && 
             !(esl_seteq<1,1,1>(ap_const_logic_0, MetaIn_StreamId_ap_vld_preg.read()) || esl_seteq<1,1,1>(ap_const_logic_0, MetaIn_SourceTag_ap_vld_preg.read()) || esl_seteq<1,1,1>(ap_const_logic_0, MetaIn_Xsize_V_ap_vld_preg.read()) || esl_seteq<1,1,1>(ap_const_logic_0, MetaIn_Xoffs_V_ap_vld_preg.read()) || esl_seteq<1,1,1>(ap_const_logic_0, MetaIn_Ysize_V_ap_vld_preg.read()) || esl_seteq<1,1,1>(ap_const_logic_0, MetaIn_Yoffs_V_ap_vld_preg.read()) || esl_seteq<1,1,1>(ap_const_logic_0, MetaIn_DsizeL_V_ap_vld_preg.read()) || esl_seteq<1,1,1>(ap_const_logic_0, MetaIn_PixelF_ap_vld_preg.read()) || esl_seteq<1,1,1>(ap_const_logic_0, MetaIn_TapG_ap_vld_preg.read()) || esl_seteq<1,1,1>(ap_const_logic_0, MetaIn_Flags_ap_vld_preg.read()) || esl_seteq<1,1,1>(ap_const_logic_0, MetaIn_Timestamp_ap_vld_preg.read()) || esl_seteq<1,1,1>(ap_const_logic_0, MetaIn_PixProcessingFlgs_ap_vld_preg.read()) || esl_seteq<1,1,1>(ap_const_logic_0, MetaIn_ModPixelF_ap_vld_preg.read()) || esl_seteq<1,1,1>(ap_const_logic_0, MetaIn_Status_ap_vld_preg.read())))) {
            MetaOut_Status_preg = MetaIn_Status_preg.read();
        }
    }
    if ( ap_rst_n_inv.read() == ap_const_logic_1) {
        MetaOut_StreamId_preg = ap_const_lv8_0;
    } else {
        if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state2.read()) && 
             !(esl_seteq<1,1,1>(ap_const_logic_0, MetaIn_StreamId_ap_vld_preg.read()) || esl_seteq<1,1,1>(ap_const_logic_0, MetaIn_SourceTag_ap_vld_preg.read()) || esl_seteq<1,1,1>(ap_const_logic_0, MetaIn_Xsize_V_ap_vld_preg.read()) || esl_seteq<1,1,1>(ap_const_logic_0, MetaIn_Xoffs_V_ap_vld_preg.read()) || esl_seteq<1,1,1>(ap_const_logic_0, MetaIn_Ysize_V_ap_vld_preg.read()) || esl_seteq<1,1,1>(ap_const_logic_0, MetaIn_Yoffs_V_ap_vld_preg.read()) || esl_seteq<1,1,1>(ap_const_logic_0, MetaIn_DsizeL_V_ap_vld_preg.read()) || esl_seteq<1,1,1>(ap_const_logic_0, MetaIn_PixelF_ap_vld_preg.read()) || esl_seteq<1,1,1>(ap_const_logic_0, MetaIn_TapG_ap_vld_preg.read()) || esl_seteq<1,1,1>(ap_const_logic_0, MetaIn_Flags_ap_vld_preg.read()) || esl_seteq<1,1,1>(ap_const_logic_0, MetaIn_Timestamp_ap_vld_preg.read()) || esl_seteq<1,1,1>(ap_const_logic_0, MetaIn_PixProcessingFlgs_ap_vld_preg.read()) || esl_seteq<1,1,1>(ap_const_logic_0, MetaIn_ModPixelF_ap_vld_preg.read()) || esl_seteq<1,1,1>(ap_const_logic_0, MetaIn_Status_ap_vld_preg.read())))) {
            MetaOut_StreamId_preg = MetaIn_StreamId_preg.read();
        }
    }
    if ( ap_rst_n_inv.read() == ap_const_logic_1) {
        MetaOut_TapG_preg = ap_const_lv16_0;
    } else {
        if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state2.read()) && 
             !(esl_seteq<1,1,1>(ap_const_logic_0, MetaIn_StreamId_ap_vld_preg.read()) || esl_seteq<1,1,1>(ap_const_logic_0, MetaIn_SourceTag_ap_vld_preg.read()) || esl_seteq<1,1,1>(ap_const_logic_0, MetaIn_Xsize_V_ap_vld_preg.read()) || esl_seteq<1,1,1>(ap_const_logic_0, MetaIn_Xoffs_V_ap_vld_preg.read()) || esl_seteq<1,1,1>(ap_const_logic_0, MetaIn_Ysize_V_ap_vld_preg.read()) || esl_seteq<1,1,1>(ap_const_logic_0, MetaIn_Yoffs_V_ap_vld_preg.read()) || esl_seteq<1,1,1>(ap_const_logic_0, MetaIn_DsizeL_V_ap_vld_preg.read()) || esl_seteq<1,1,1>(ap_const_logic_0, MetaIn_PixelF_ap_vld_preg.read()) || esl_seteq<1,1,1>(ap_const_logic_0, MetaIn_TapG_ap_vld_preg.read()) || esl_seteq<1,1,1>(ap_const_logic_0, MetaIn_Flags_ap_vld_preg.read()) || esl_seteq<1,1,1>(ap_const_logic_0, MetaIn_Timestamp_ap_vld_preg.read()) || esl_seteq<1,1,1>(ap_const_logic_0, MetaIn_PixProcessingFlgs_ap_vld_preg.read()) || esl_seteq<1,1,1>(ap_const_logic_0, MetaIn_ModPixelF_ap_vld_preg.read()) || esl_seteq<1,1,1>(ap_const_logic_0, MetaIn_Status_ap_vld_preg.read())))) {
            MetaOut_TapG_preg = MetaIn_TapG_preg.read();
        }
    }
    if ( ap_rst_n_inv.read() == ap_const_logic_1) {
        MetaOut_Timestamp_preg = ap_const_lv32_0;
    } else {
        if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state2.read()) && 
             !(esl_seteq<1,1,1>(ap_const_logic_0, MetaIn_StreamId_ap_vld_preg.read()) || esl_seteq<1,1,1>(ap_const_logic_0, MetaIn_SourceTag_ap_vld_preg.read()) || esl_seteq<1,1,1>(ap_const_logic_0, MetaIn_Xsize_V_ap_vld_preg.read()) || esl_seteq<1,1,1>(ap_const_logic_0, MetaIn_Xoffs_V_ap_vld_preg.read()) || esl_seteq<1,1,1>(ap_const_logic_0, MetaIn_Ysize_V_ap_vld_preg.read()) || esl_seteq<1,1,1>(ap_const_logic_0, MetaIn_Yoffs_V_ap_vld_preg.read()) || esl_seteq<1,1,1>(ap_const_logic_0, MetaIn_DsizeL_V_ap_vld_preg.read()) || esl_seteq<1,1,1>(ap_const_logic_0, MetaIn_PixelF_ap_vld_preg.read()) || esl_seteq<1,1,1>(ap_const_logic_0, MetaIn_TapG_ap_vld_preg.read()) || esl_seteq<1,1,1>(ap_const_logic_0, MetaIn_Flags_ap_vld_preg.read()) || esl_seteq<1,1,1>(ap_const_logic_0, MetaIn_Timestamp_ap_vld_preg.read()) || esl_seteq<1,1,1>(ap_const_logic_0, MetaIn_PixProcessingFlgs_ap_vld_preg.read()) || esl_seteq<1,1,1>(ap_const_logic_0, MetaIn_ModPixelF_ap_vld_preg.read()) || esl_seteq<1,1,1>(ap_const_logic_0, MetaIn_Status_ap_vld_preg.read())))) {
            MetaOut_Timestamp_preg = MetaIn_Timestamp_preg.read();
        }
    }
    if ( ap_rst_n_inv.read() == ap_const_logic_1) {
        MetaOut_Xoffs_V_preg = ap_const_lv24_0;
    } else {
        if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state2.read()) && 
             !(esl_seteq<1,1,1>(ap_const_logic_0, MetaIn_StreamId_ap_vld_preg.read()) || esl_seteq<1,1,1>(ap_const_logic_0, MetaIn_SourceTag_ap_vld_preg.read()) || esl_seteq<1,1,1>(ap_const_logic_0, MetaIn_Xsize_V_ap_vld_preg.read()) || esl_seteq<1,1,1>(ap_const_logic_0, MetaIn_Xoffs_V_ap_vld_preg.read()) || esl_seteq<1,1,1>(ap_const_logic_0, MetaIn_Ysize_V_ap_vld_preg.read()) || esl_seteq<1,1,1>(ap_const_logic_0, MetaIn_Yoffs_V_ap_vld_preg.read()) || esl_seteq<1,1,1>(ap_const_logic_0, MetaIn_DsizeL_V_ap_vld_preg.read()) || esl_seteq<1,1,1>(ap_const_logic_0, MetaIn_PixelF_ap_vld_preg.read()) || esl_seteq<1,1,1>(ap_const_logic_0, MetaIn_TapG_ap_vld_preg.read()) || esl_seteq<1,1,1>(ap_const_logic_0, MetaIn_Flags_ap_vld_preg.read()) || esl_seteq<1,1,1>(ap_const_logic_0, MetaIn_Timestamp_ap_vld_preg.read()) || esl_seteq<1,1,1>(ap_const_logic_0, MetaIn_PixProcessingFlgs_ap_vld_preg.read()) || esl_seteq<1,1,1>(ap_const_logic_0, MetaIn_ModPixelF_ap_vld_preg.read()) || esl_seteq<1,1,1>(ap_const_logic_0, MetaIn_Status_ap_vld_preg.read())))) {
            MetaOut_Xoffs_V_preg = MetaIn_Xoffs_V_preg.read();
        }
    }
    if ( ap_rst_n_inv.read() == ap_const_logic_1) {
        MetaOut_Xsize_V_preg = ap_const_lv24_0;
    } else {
        if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state2.read()) && 
             !(esl_seteq<1,1,1>(ap_const_logic_0, MetaIn_StreamId_ap_vld_preg.read()) || esl_seteq<1,1,1>(ap_const_logic_0, MetaIn_SourceTag_ap_vld_preg.read()) || esl_seteq<1,1,1>(ap_const_logic_0, MetaIn_Xsize_V_ap_vld_preg.read()) || esl_seteq<1,1,1>(ap_const_logic_0, MetaIn_Xoffs_V_ap_vld_preg.read()) || esl_seteq<1,1,1>(ap_const_logic_0, MetaIn_Ysize_V_ap_vld_preg.read()) || esl_seteq<1,1,1>(ap_const_logic_0, MetaIn_Yoffs_V_ap_vld_preg.read()) || esl_seteq<1,1,1>(ap_const_logic_0, MetaIn_DsizeL_V_ap_vld_preg.read()) || esl_seteq<1,1,1>(ap_const_logic_0, MetaIn_PixelF_ap_vld_preg.read()) || esl_seteq<1,1,1>(ap_const_logic_0, MetaIn_TapG_ap_vld_preg.read()) || esl_seteq<1,1,1>(ap_const_logic_0, MetaIn_Flags_ap_vld_preg.read()) || esl_seteq<1,1,1>(ap_const_logic_0, MetaIn_Timestamp_ap_vld_preg.read()) || esl_seteq<1,1,1>(ap_const_logic_0, MetaIn_PixProcessingFlgs_ap_vld_preg.read()) || esl_seteq<1,1,1>(ap_const_logic_0, MetaIn_ModPixelF_ap_vld_preg.read()) || esl_seteq<1,1,1>(ap_const_logic_0, MetaIn_Status_ap_vld_preg.read())))) {
            MetaOut_Xsize_V_preg = MetaIn_Xsize_V_preg.read();
        }
    }
    if ( ap_rst_n_inv.read() == ap_const_logic_1) {
        MetaOut_Yoffs_V_preg = ap_const_lv24_0;
    } else {
        if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state2.read()) && 
             !(esl_seteq<1,1,1>(ap_const_logic_0, MetaIn_StreamId_ap_vld_preg.read()) || esl_seteq<1,1,1>(ap_const_logic_0, MetaIn_SourceTag_ap_vld_preg.read()) || esl_seteq<1,1,1>(ap_const_logic_0, MetaIn_Xsize_V_ap_vld_preg.read()) || esl_seteq<1,1,1>(ap_const_logic_0, MetaIn_Xoffs_V_ap_vld_preg.read()) || esl_seteq<1,1,1>(ap_const_logic_0, MetaIn_Ysize_V_ap_vld_preg.read()) || esl_seteq<1,1,1>(ap_const_logic_0, MetaIn_Yoffs_V_ap_vld_preg.read()) || esl_seteq<1,1,1>(ap_const_logic_0, MetaIn_DsizeL_V_ap_vld_preg.read()) || esl_seteq<1,1,1>(ap_const_logic_0, MetaIn_PixelF_ap_vld_preg.read()) || esl_seteq<1,1,1>(ap_const_logic_0, MetaIn_TapG_ap_vld_preg.read()) || esl_seteq<1,1,1>(ap_const_logic_0, MetaIn_Flags_ap_vld_preg.read()) || esl_seteq<1,1,1>(ap_const_logic_0, MetaIn_Timestamp_ap_vld_preg.read()) || esl_seteq<1,1,1>(ap_const_logic_0, MetaIn_PixProcessingFlgs_ap_vld_preg.read()) || esl_seteq<1,1,1>(ap_const_logic_0, MetaIn_ModPixelF_ap_vld_preg.read()) || esl_seteq<1,1,1>(ap_const_logic_0, MetaIn_Status_ap_vld_preg.read())))) {
            MetaOut_Yoffs_V_preg = MetaIn_Yoffs_V_preg.read();
        }
    }
    if ( ap_rst_n_inv.read() == ap_const_logic_1) {
        MetaOut_Ysize_V_preg = ap_const_lv24_0;
    } else {
        if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state2.read()) && 
             !(esl_seteq<1,1,1>(ap_const_logic_0, MetaIn_StreamId_ap_vld_preg.read()) || esl_seteq<1,1,1>(ap_const_logic_0, MetaIn_SourceTag_ap_vld_preg.read()) || esl_seteq<1,1,1>(ap_const_logic_0, MetaIn_Xsize_V_ap_vld_preg.read()) || esl_seteq<1,1,1>(ap_const_logic_0, MetaIn_Xoffs_V_ap_vld_preg.read()) || esl_seteq<1,1,1>(ap_const_logic_0, MetaIn_Ysize_V_ap_vld_preg.read()) || esl_seteq<1,1,1>(ap_const_logic_0, MetaIn_Yoffs_V_ap_vld_preg.read()) || esl_seteq<1,1,1>(ap_const_logic_0, MetaIn_DsizeL_V_ap_vld_preg.read()) || esl_seteq<1,1,1>(ap_const_logic_0, MetaIn_PixelF_ap_vld_preg.read()) || esl_seteq<1,1,1>(ap_const_logic_0, MetaIn_TapG_ap_vld_preg.read()) || esl_seteq<1,1,1>(ap_const_logic_0, MetaIn_Flags_ap_vld_preg.read()) || esl_seteq<1,1,1>(ap_const_logic_0, MetaIn_Timestamp_ap_vld_preg.read()) || esl_seteq<1,1,1>(ap_const_logic_0, MetaIn_PixProcessingFlgs_ap_vld_preg.read()) || esl_seteq<1,1,1>(ap_const_logic_0, MetaIn_ModPixelF_ap_vld_preg.read()) || esl_seteq<1,1,1>(ap_const_logic_0, MetaIn_Status_ap_vld_preg.read())))) {
            MetaOut_Ysize_V_preg = MetaIn_Ysize_V_preg.read();
        }
    }
    if ( ap_rst_n_inv.read() == ap_const_logic_1) {
        VideoIn_V_Data_V_0_sel_rd = ap_const_logic_0;
    } else {
        if ((esl_seteq<1,1,1>(ap_const_logic_1, VideoIn_V_Data_V_0_ack_out.read()) && 
             esl_seteq<1,1,1>(ap_const_logic_1, VideoIn_V_Data_V_0_vld_out.read()))) {
            VideoIn_V_Data_V_0_sel_rd =  (sc_logic) (~VideoIn_V_Data_V_0_sel_rd.read());
        }
    }
    if ( ap_rst_n_inv.read() == ap_const_logic_1) {
        VideoIn_V_Data_V_0_sel_wr = ap_const_logic_0;
    } else {
        if ((esl_seteq<1,1,1>(ap_const_logic_1, VideoIn_V_Data_V_0_vld_in.read()) && 
             esl_seteq<1,1,1>(ap_const_logic_1, VideoIn_V_Data_V_0_ack_in.read()))) {
            VideoIn_V_Data_V_0_sel_wr =  (sc_logic) (~VideoIn_V_Data_V_0_sel_wr.read());
        }
    }
    if ( ap_rst_n_inv.read() == ap_const_logic_1) {
        VideoIn_V_Data_V_0_state = ap_const_lv2_0;
    } else {
        if (((esl_seteq<1,1,1>(ap_const_logic_0, VideoIn_V_Data_V_0_vld_in.read()) && 
              esl_seteq<1,1,1>(ap_const_logic_1, VideoIn_V_Data_V_0_ack_out.read()) && 
              esl_seteq<1,2,2>(VideoIn_V_Data_V_0_state.read(), ap_const_lv2_3)) || 
             (esl_seteq<1,1,1>(ap_const_logic_0, VideoIn_V_Data_V_0_vld_in.read()) && 
              esl_seteq<1,2,2>(VideoIn_V_Data_V_0_state.read(), ap_const_lv2_2)))) {
            VideoIn_V_Data_V_0_state = ap_const_lv2_2;
        } else if (((esl_seteq<1,1,1>(ap_const_logic_1, VideoIn_V_Data_V_0_vld_in.read()) && 
                     esl_seteq<1,1,1>(ap_const_logic_0, VideoIn_V_Data_V_0_ack_out.read()) && 
                     esl_seteq<1,2,2>(VideoIn_V_Data_V_0_state.read(), ap_const_lv2_3)) || 
                    (esl_seteq<1,1,1>(ap_const_logic_0, VideoIn_V_Data_V_0_ack_out.read()) && 
                     esl_seteq<1,2,2>(VideoIn_V_Data_V_0_state.read(), ap_const_lv2_1)))) {
            VideoIn_V_Data_V_0_state = ap_const_lv2_1;
        } else if (((esl_seteq<1,1,1>(ap_const_logic_1, VideoIn_V_Data_V_0_vld_in.read()) && 
                     esl_seteq<1,2,2>(VideoIn_V_Data_V_0_state.read(), ap_const_lv2_2)) || 
                    (esl_seteq<1,1,1>(ap_const_logic_1, VideoIn_V_Data_V_0_ack_out.read()) && 
                     esl_seteq<1,2,2>(VideoIn_V_Data_V_0_state.read(), ap_const_lv2_1)) || 
                    (esl_seteq<1,2,2>(VideoIn_V_Data_V_0_state.read(), ap_const_lv2_3) && 
                     !(esl_seteq<1,1,1>(ap_const_logic_1, VideoIn_V_Data_V_0_vld_in.read()) && esl_seteq<1,1,1>(ap_const_logic_0, VideoIn_V_Data_V_0_ack_out.read())) && 
                     !(esl_seteq<1,1,1>(ap_const_logic_0, VideoIn_V_Data_V_0_vld_in.read()) && esl_seteq<1,1,1>(ap_const_logic_1, VideoIn_V_Data_V_0_ack_out.read()))))) {
            VideoIn_V_Data_V_0_state = ap_const_lv2_3;
        } else {
            VideoIn_V_Data_V_0_state = ap_const_lv2_2;
        }
    }
    if ( ap_rst_n_inv.read() == ap_const_logic_1) {
        VideoIn_V_User_V_0_sel_rd = ap_const_logic_0;
    } else {
        if ((esl_seteq<1,1,1>(ap_const_logic_1, VideoIn_V_User_V_0_ack_out.read()) && 
             esl_seteq<1,1,1>(ap_const_logic_1, VideoIn_V_User_V_0_vld_out.read()))) {
            VideoIn_V_User_V_0_sel_rd =  (sc_logic) (~VideoIn_V_User_V_0_sel_rd.read());
        }
    }
    if ( ap_rst_n_inv.read() == ap_const_logic_1) {
        VideoIn_V_User_V_0_sel_wr = ap_const_logic_0;
    } else {
        if ((esl_seteq<1,1,1>(ap_const_logic_1, VideoIn_V_User_V_0_vld_in.read()) && 
             esl_seteq<1,1,1>(ap_const_logic_1, VideoIn_V_User_V_0_ack_in.read()))) {
            VideoIn_V_User_V_0_sel_wr =  (sc_logic) (~VideoIn_V_User_V_0_sel_wr.read());
        }
    }
    if ( ap_rst_n_inv.read() == ap_const_logic_1) {
        VideoIn_V_User_V_0_state = ap_const_lv2_0;
    } else {
        if (((esl_seteq<1,1,1>(ap_const_logic_0, VideoIn_V_User_V_0_vld_in.read()) && 
              esl_seteq<1,1,1>(ap_const_logic_1, VideoIn_V_User_V_0_ack_out.read()) && 
              esl_seteq<1,2,2>(ap_const_lv2_3, VideoIn_V_User_V_0_state.read())) || 
             (esl_seteq<1,1,1>(ap_const_logic_0, VideoIn_V_User_V_0_vld_in.read()) && 
              esl_seteq<1,2,2>(ap_const_lv2_2, VideoIn_V_User_V_0_state.read())))) {
            VideoIn_V_User_V_0_state = ap_const_lv2_2;
        } else if (((esl_seteq<1,1,1>(ap_const_logic_1, VideoIn_V_User_V_0_vld_in.read()) && 
                     esl_seteq<1,1,1>(ap_const_logic_0, VideoIn_V_User_V_0_ack_out.read()) && 
                     esl_seteq<1,2,2>(ap_const_lv2_3, VideoIn_V_User_V_0_state.read())) || 
                    (esl_seteq<1,1,1>(ap_const_logic_0, VideoIn_V_User_V_0_ack_out.read()) && 
                     esl_seteq<1,2,2>(ap_const_lv2_1, VideoIn_V_User_V_0_state.read())))) {
            VideoIn_V_User_V_0_state = ap_const_lv2_1;
        } else if (((esl_seteq<1,1,1>(ap_const_logic_1, VideoIn_V_User_V_0_vld_in.read()) && 
                     esl_seteq<1,2,2>(ap_const_lv2_2, VideoIn_V_User_V_0_state.read())) || 
                    (esl_seteq<1,1,1>(ap_const_logic_1, VideoIn_V_User_V_0_ack_out.read()) && 
                     esl_seteq<1,2,2>(ap_const_lv2_1, VideoIn_V_User_V_0_state.read())) || 
                    (esl_seteq<1,2,2>(ap_const_lv2_3, VideoIn_V_User_V_0_state.read()) && 
                     !(esl_seteq<1,1,1>(ap_const_logic_1, VideoIn_V_User_V_0_vld_in.read()) && esl_seteq<1,1,1>(ap_const_logic_0, VideoIn_V_User_V_0_ack_out.read())) && 
                     !(esl_seteq<1,1,1>(ap_const_logic_0, VideoIn_V_User_V_0_vld_in.read()) && esl_seteq<1,1,1>(ap_const_logic_1, VideoIn_V_User_V_0_ack_out.read()))))) {
            VideoIn_V_User_V_0_state = ap_const_lv2_3;
        } else {
            VideoIn_V_User_V_0_state = ap_const_lv2_2;
        }
    }
    if ( ap_rst_n_inv.read() == ap_const_logic_1) {
        VideoOut_V_Data_V_1_sel_rd = ap_const_logic_0;
    } else {
        if ((esl_seteq<1,1,1>(ap_const_logic_1, VideoOut_V_Data_V_1_ack_out.read()) && 
             esl_seteq<1,1,1>(ap_const_logic_1, VideoOut_V_Data_V_1_vld_out.read()))) {
            VideoOut_V_Data_V_1_sel_rd =  (sc_logic) (~VideoOut_V_Data_V_1_sel_rd.read());
        }
    }
    if ( ap_rst_n_inv.read() == ap_const_logic_1) {
        VideoOut_V_Data_V_1_sel_wr = ap_const_logic_0;
    } else {
        if ((esl_seteq<1,1,1>(ap_const_logic_1, VideoOut_V_Data_V_1_vld_in.read()) && 
             esl_seteq<1,1,1>(ap_const_logic_1, VideoOut_V_Data_V_1_ack_in.read()))) {
            VideoOut_V_Data_V_1_sel_wr =  (sc_logic) (~VideoOut_V_Data_V_1_sel_wr.read());
        }
    }
    if ( ap_rst_n_inv.read() == ap_const_logic_1) {
        VideoOut_V_Data_V_1_state = ap_const_lv2_0;
    } else {
        if (((esl_seteq<1,1,1>(ap_const_logic_0, VideoOut_V_Data_V_1_vld_in.read()) && 
              esl_seteq<1,1,1>(ap_const_logic_1, VideoOut_V_Data_V_1_ack_out.read()) && 
              esl_seteq<1,2,2>(ap_const_lv2_3, VideoOut_V_Data_V_1_state.read())) || 
             (esl_seteq<1,1,1>(ap_const_logic_0, VideoOut_V_Data_V_1_vld_in.read()) && 
              esl_seteq<1,2,2>(ap_const_lv2_2, VideoOut_V_Data_V_1_state.read())))) {
            VideoOut_V_Data_V_1_state = ap_const_lv2_2;
        } else if (((esl_seteq<1,1,1>(ap_const_logic_1, VideoOut_V_Data_V_1_vld_in.read()) && 
                     esl_seteq<1,1,1>(ap_const_logic_0, VideoOut_V_Data_V_1_ack_out.read()) && 
                     esl_seteq<1,2,2>(ap_const_lv2_3, VideoOut_V_Data_V_1_state.read())) || 
                    (esl_seteq<1,1,1>(ap_const_logic_0, VideoOut_V_Data_V_1_ack_out.read()) && 
                     esl_seteq<1,2,2>(ap_const_lv2_1, VideoOut_V_Data_V_1_state.read())))) {
            VideoOut_V_Data_V_1_state = ap_const_lv2_1;
        } else if (((esl_seteq<1,1,1>(ap_const_logic_1, VideoOut_V_Data_V_1_vld_in.read()) && 
                     esl_seteq<1,2,2>(ap_const_lv2_2, VideoOut_V_Data_V_1_state.read())) || 
                    (esl_seteq<1,1,1>(ap_const_logic_1, VideoOut_V_Data_V_1_ack_out.read()) && 
                     esl_seteq<1,2,2>(ap_const_lv2_1, VideoOut_V_Data_V_1_state.read())) || 
                    (esl_seteq<1,2,2>(ap_const_lv2_3, VideoOut_V_Data_V_1_state.read()) && 
                     !(esl_seteq<1,1,1>(ap_const_logic_1, VideoOut_V_Data_V_1_vld_in.read()) && esl_seteq<1,1,1>(ap_const_logic_0, VideoOut_V_Data_V_1_ack_out.read())) && 
                     !(esl_seteq<1,1,1>(ap_const_logic_0, VideoOut_V_Data_V_1_vld_in.read()) && esl_seteq<1,1,1>(ap_const_logic_1, VideoOut_V_Data_V_1_ack_out.read()))))) {
            VideoOut_V_Data_V_1_state = ap_const_lv2_3;
        } else {
            VideoOut_V_Data_V_1_state = ap_const_lv2_2;
        }
    }
    if ( ap_rst_n_inv.read() == ap_const_logic_1) {
        VideoOut_V_User_V_1_sel_rd = ap_const_logic_0;
    } else {
        if ((esl_seteq<1,1,1>(ap_const_logic_1, VideoOut_V_User_V_1_ack_out.read()) && 
             esl_seteq<1,1,1>(ap_const_logic_1, VideoOut_V_User_V_1_vld_out.read()))) {
            VideoOut_V_User_V_1_sel_rd =  (sc_logic) (~VideoOut_V_User_V_1_sel_rd.read());
        }
    }
    if ( ap_rst_n_inv.read() == ap_const_logic_1) {
        VideoOut_V_User_V_1_sel_wr = ap_const_logic_0;
    } else {
        if ((esl_seteq<1,1,1>(ap_const_logic_1, VideoOut_V_User_V_1_vld_in.read()) && 
             esl_seteq<1,1,1>(ap_const_logic_1, VideoOut_V_User_V_1_ack_in.read()))) {
            VideoOut_V_User_V_1_sel_wr =  (sc_logic) (~VideoOut_V_User_V_1_sel_wr.read());
        }
    }
    if ( ap_rst_n_inv.read() == ap_const_logic_1) {
        VideoOut_V_User_V_1_state = ap_const_lv2_0;
    } else {
        if (((esl_seteq<1,1,1>(ap_const_logic_0, VideoOut_V_User_V_1_vld_in.read()) && 
              esl_seteq<1,1,1>(ap_const_logic_1, VideoOut_V_User_V_1_ack_out.read()) && 
              esl_seteq<1,2,2>(ap_const_lv2_3, VideoOut_V_User_V_1_state.read())) || 
             (esl_seteq<1,1,1>(ap_const_logic_0, VideoOut_V_User_V_1_vld_in.read()) && 
              esl_seteq<1,2,2>(ap_const_lv2_2, VideoOut_V_User_V_1_state.read())))) {
            VideoOut_V_User_V_1_state = ap_const_lv2_2;
        } else if (((esl_seteq<1,1,1>(ap_const_logic_1, VideoOut_V_User_V_1_vld_in.read()) && 
                     esl_seteq<1,1,1>(ap_const_logic_0, VideoOut_V_User_V_1_ack_out.read()) && 
                     esl_seteq<1,2,2>(ap_const_lv2_3, VideoOut_V_User_V_1_state.read())) || 
                    (esl_seteq<1,1,1>(ap_const_logic_0, VideoOut_V_User_V_1_ack_out.read()) && 
                     esl_seteq<1,2,2>(ap_const_lv2_1, VideoOut_V_User_V_1_state.read())))) {
            VideoOut_V_User_V_1_state = ap_const_lv2_1;
        } else if (((esl_seteq<1,1,1>(ap_const_logic_1, VideoOut_V_User_V_1_vld_in.read()) && 
                     esl_seteq<1,2,2>(ap_const_lv2_2, VideoOut_V_User_V_1_state.read())) || 
                    (esl_seteq<1,1,1>(ap_const_logic_1, VideoOut_V_User_V_1_ack_out.read()) && 
                     esl_seteq<1,2,2>(ap_const_lv2_1, VideoOut_V_User_V_1_state.read())) || 
                    (esl_seteq<1,2,2>(ap_const_lv2_3, VideoOut_V_User_V_1_state.read()) && 
                     !(esl_seteq<1,1,1>(ap_const_logic_1, VideoOut_V_User_V_1_vld_in.read()) && esl_seteq<1,1,1>(ap_const_logic_0, VideoOut_V_User_V_1_ack_out.read())) && 
                     !(esl_seteq<1,1,1>(ap_const_logic_0, VideoOut_V_User_V_1_vld_in.read()) && esl_seteq<1,1,1>(ap_const_logic_1, VideoOut_V_User_V_1_ack_out.read()))))) {
            VideoOut_V_User_V_1_state = ap_const_lv2_3;
        } else {
            VideoOut_V_User_V_1_state = ap_const_lv2_2;
        }
    }
    if ( ap_rst_n_inv.read() == ap_const_logic_1) {
        ap_CS_fsm = ap_ST_fsm_state1;
    } else {
        ap_CS_fsm = ap_NS_fsm.read();
    }
    if ( ap_rst_n_inv.read() == ap_const_logic_1) {
        ap_sync_reg_grp_myproject_fu_302_ap_done = ap_const_logic_0;
    } else {
        if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state3.read()) && 
             esl_seteq<1,1,1>(ap_block_state3_on_subcall_done.read(), ap_const_boolean_0))) {
            ap_sync_reg_grp_myproject_fu_302_ap_done = ap_const_logic_0;
        } else if (esl_seteq<1,1,1>(ap_const_logic_1, grp_myproject_fu_302_ap_done.read())) {
            ap_sync_reg_grp_myproject_fu_302_ap_done = ap_const_logic_1;
        }
    }
    if ( ap_rst_n_inv.read() == ap_const_logic_1) {
        ap_sync_reg_grp_myproject_fu_302_ap_ready = ap_const_logic_0;
    } else {
        if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state3.read()) && 
             esl_seteq<1,1,1>(ap_block_state3_on_subcall_done.read(), ap_const_boolean_0))) {
            ap_sync_reg_grp_myproject_fu_302_ap_ready = ap_const_logic_0;
        } else if (esl_seteq<1,1,1>(ap_const_logic_1, grp_myproject_fu_302_ap_ready.read())) {
            ap_sync_reg_grp_myproject_fu_302_ap_ready = ap_const_logic_1;
        }
    }
    if ( ap_rst_n_inv.read() == ap_const_logic_1) {
        grp_myproject_fu_302_ap_start_reg = ap_const_logic_0;
    } else {
        if (((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state2.read()) && 
              !(esl_seteq<1,1,1>(ap_const_logic_0, MetaIn_StreamId_ap_vld_preg.read()) || esl_seteq<1,1,1>(ap_const_logic_0, MetaIn_SourceTag_ap_vld_preg.read()) || esl_seteq<1,1,1>(ap_const_logic_0, MetaIn_Xsize_V_ap_vld_preg.read()) || esl_seteq<1,1,1>(ap_const_logic_0, MetaIn_Xoffs_V_ap_vld_preg.read()) || esl_seteq<1,1,1>(ap_const_logic_0, MetaIn_Ysize_V_ap_vld_preg.read()) || esl_seteq<1,1,1>(ap_const_logic_0, MetaIn_Yoffs_V_ap_vld_preg.read()) || esl_seteq<1,1,1>(ap_const_logic_0, MetaIn_DsizeL_V_ap_vld_preg.read()) || esl_seteq<1,1,1>(ap_const_logic_0, MetaIn_PixelF_ap_vld_preg.read()) || esl_seteq<1,1,1>(ap_const_logic_0, MetaIn_TapG_ap_vld_preg.read()) || esl_seteq<1,1,1>(ap_const_logic_0, MetaIn_Flags_ap_vld_preg.read()) || esl_seteq<1,1,1>(ap_const_logic_0, MetaIn_Timestamp_ap_vld_preg.read()) || esl_seteq<1,1,1>(ap_const_logic_0, MetaIn_PixProcessingFlgs_ap_vld_preg.read()) || esl_seteq<1,1,1>(ap_const_logic_0, MetaIn_ModPixelF_ap_vld_preg.read()) || esl_seteq<1,1,1>(ap_const_logic_0, MetaIn_Status_ap_vld_preg.read()))) || 
             (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state3.read()) && 
              esl_seteq<1,1,1>(ap_const_logic_0, ap_sync_grp_myproject_fu_302_ap_ready.read())))) {
            grp_myproject_fu_302_ap_start_reg = ap_const_logic_1;
        } else if (esl_seteq<1,1,1>(ap_const_logic_1, grp_myproject_fu_302_ap_ready.read())) {
            grp_myproject_fu_302_ap_start_reg = ap_const_logic_0;
        }
    }
    if (esl_seteq<1,1,1>(ap_const_logic_1, VideoIn_V_Data_V_0_load_A.read())) {
        VideoIn_V_Data_V_0_payload_A = VideoIn_TDATA.read();
    }
    if (esl_seteq<1,1,1>(ap_const_logic_1, VideoIn_V_Data_V_0_load_B.read())) {
        VideoIn_V_Data_V_0_payload_B = VideoIn_TDATA.read();
    }
    if (esl_seteq<1,1,1>(ap_const_logic_1, VideoIn_V_User_V_0_load_A.read())) {
        VideoIn_V_User_V_0_payload_A = VideoIn_TUSER.read();
    }
    if (esl_seteq<1,1,1>(ap_const_logic_1, VideoIn_V_User_V_0_load_B.read())) {
        VideoIn_V_User_V_0_payload_B = VideoIn_TUSER.read();
    }
    if (esl_seteq<1,1,1>(ap_const_logic_1, VideoOut_V_Data_V_1_load_A.read())) {
        VideoOut_V_Data_V_1_payload_A = grp_myproject_fu_302_VideoOut_TDATA.read();
    }
    if (esl_seteq<1,1,1>(ap_const_logic_1, VideoOut_V_Data_V_1_load_B.read())) {
        VideoOut_V_Data_V_1_payload_B = grp_myproject_fu_302_VideoOut_TDATA.read();
    }
    if (esl_seteq<1,1,1>(ap_const_logic_1, VideoOut_V_User_V_1_load_A.read())) {
        VideoOut_V_User_V_1_payload_A = grp_myproject_fu_302_VideoOut_TUSER.read();
    }
    if (esl_seteq<1,1,1>(ap_const_logic_1, VideoOut_V_User_V_1_load_B.read())) {
        VideoOut_V_User_V_1_payload_B = grp_myproject_fu_302_VideoOut_TUSER.read();
    }
}

void myproject_axi::thread_MetaIn_DsizeL_V_blk_n() {
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state2.read())) {
        MetaIn_DsizeL_V_blk_n = ap_const_logic_0;
    } else {
        MetaIn_DsizeL_V_blk_n = ap_const_logic_1;
    }
}

void myproject_axi::thread_MetaIn_Flags_blk_n() {
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state2.read())) {
        MetaIn_Flags_blk_n = ap_const_logic_0;
    } else {
        MetaIn_Flags_blk_n = ap_const_logic_1;
    }
}

void myproject_axi::thread_MetaIn_ModPixelF_blk_n() {
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state2.read())) {
        MetaIn_ModPixelF_blk_n = ap_const_logic_0;
    } else {
        MetaIn_ModPixelF_blk_n = ap_const_logic_1;
    }
}

void myproject_axi::thread_MetaIn_PixProcessingFlgs_blk_n() {
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state2.read())) {
        MetaIn_PixProcessingFlgs_blk_n = ap_const_logic_0;
    } else {
        MetaIn_PixProcessingFlgs_blk_n = ap_const_logic_1;
    }
}

void myproject_axi::thread_MetaIn_PixelF_blk_n() {
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state2.read())) {
        MetaIn_PixelF_blk_n = ap_const_logic_0;
    } else {
        MetaIn_PixelF_blk_n = ap_const_logic_1;
    }
}

void myproject_axi::thread_MetaIn_SourceTag_blk_n() {
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state2.read())) {
        MetaIn_SourceTag_blk_n = ap_const_logic_0;
    } else {
        MetaIn_SourceTag_blk_n = ap_const_logic_1;
    }
}

void myproject_axi::thread_MetaIn_Status_blk_n() {
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state2.read())) {
        MetaIn_Status_blk_n = ap_const_logic_0;
    } else {
        MetaIn_Status_blk_n = ap_const_logic_1;
    }
}

void myproject_axi::thread_MetaIn_StreamId_blk_n() {
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state2.read())) {
        MetaIn_StreamId_blk_n = ap_const_logic_0;
    } else {
        MetaIn_StreamId_blk_n = ap_const_logic_1;
    }
}

void myproject_axi::thread_MetaIn_TapG_blk_n() {
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state2.read())) {
        MetaIn_TapG_blk_n = ap_const_logic_0;
    } else {
        MetaIn_TapG_blk_n = ap_const_logic_1;
    }
}

void myproject_axi::thread_MetaIn_Timestamp_blk_n() {
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state2.read())) {
        MetaIn_Timestamp_blk_n = ap_const_logic_0;
    } else {
        MetaIn_Timestamp_blk_n = ap_const_logic_1;
    }
}

void myproject_axi::thread_MetaIn_Xoffs_V_blk_n() {
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state2.read())) {
        MetaIn_Xoffs_V_blk_n = ap_const_logic_0;
    } else {
        MetaIn_Xoffs_V_blk_n = ap_const_logic_1;
    }
}

void myproject_axi::thread_MetaIn_Xsize_V_blk_n() {
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state2.read())) {
        MetaIn_Xsize_V_blk_n = ap_const_logic_0;
    } else {
        MetaIn_Xsize_V_blk_n = ap_const_logic_1;
    }
}

void myproject_axi::thread_MetaIn_Yoffs_V_blk_n() {
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state2.read())) {
        MetaIn_Yoffs_V_blk_n = ap_const_logic_0;
    } else {
        MetaIn_Yoffs_V_blk_n = ap_const_logic_1;
    }
}

void myproject_axi::thread_MetaIn_Ysize_V_blk_n() {
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state2.read())) {
        MetaIn_Ysize_V_blk_n = ap_const_logic_0;
    } else {
        MetaIn_Ysize_V_blk_n = ap_const_logic_1;
    }
}

void myproject_axi::thread_MetaOut_DsizeL_V() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state2.read()) && 
         !(esl_seteq<1,1,1>(ap_const_logic_0, MetaIn_StreamId_ap_vld_preg.read()) || esl_seteq<1,1,1>(ap_const_logic_0, MetaIn_SourceTag_ap_vld_preg.read()) || esl_seteq<1,1,1>(ap_const_logic_0, MetaIn_Xsize_V_ap_vld_preg.read()) || esl_seteq<1,1,1>(ap_const_logic_0, MetaIn_Xoffs_V_ap_vld_preg.read()) || esl_seteq<1,1,1>(ap_const_logic_0, MetaIn_Ysize_V_ap_vld_preg.read()) || esl_seteq<1,1,1>(ap_const_logic_0, MetaIn_Yoffs_V_ap_vld_preg.read()) || esl_seteq<1,1,1>(ap_const_logic_0, MetaIn_DsizeL_V_ap_vld_preg.read()) || esl_seteq<1,1,1>(ap_const_logic_0, MetaIn_PixelF_ap_vld_preg.read()) || esl_seteq<1,1,1>(ap_const_logic_0, MetaIn_TapG_ap_vld_preg.read()) || esl_seteq<1,1,1>(ap_const_logic_0, MetaIn_Flags_ap_vld_preg.read()) || esl_seteq<1,1,1>(ap_const_logic_0, MetaIn_Timestamp_ap_vld_preg.read()) || esl_seteq<1,1,1>(ap_const_logic_0, MetaIn_PixProcessingFlgs_ap_vld_preg.read()) || esl_seteq<1,1,1>(ap_const_logic_0, MetaIn_ModPixelF_ap_vld_preg.read()) || esl_seteq<1,1,1>(ap_const_logic_0, MetaIn_Status_ap_vld_preg.read())))) {
        MetaOut_DsizeL_V = MetaIn_DsizeL_V_preg.read();
    } else {
        MetaOut_DsizeL_V = MetaOut_DsizeL_V_preg.read();
    }
}

void myproject_axi::thread_MetaOut_Flags() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state2.read()) && 
         !(esl_seteq<1,1,1>(ap_const_logic_0, MetaIn_StreamId_ap_vld_preg.read()) || esl_seteq<1,1,1>(ap_const_logic_0, MetaIn_SourceTag_ap_vld_preg.read()) || esl_seteq<1,1,1>(ap_const_logic_0, MetaIn_Xsize_V_ap_vld_preg.read()) || esl_seteq<1,1,1>(ap_const_logic_0, MetaIn_Xoffs_V_ap_vld_preg.read()) || esl_seteq<1,1,1>(ap_const_logic_0, MetaIn_Ysize_V_ap_vld_preg.read()) || esl_seteq<1,1,1>(ap_const_logic_0, MetaIn_Yoffs_V_ap_vld_preg.read()) || esl_seteq<1,1,1>(ap_const_logic_0, MetaIn_DsizeL_V_ap_vld_preg.read()) || esl_seteq<1,1,1>(ap_const_logic_0, MetaIn_PixelF_ap_vld_preg.read()) || esl_seteq<1,1,1>(ap_const_logic_0, MetaIn_TapG_ap_vld_preg.read()) || esl_seteq<1,1,1>(ap_const_logic_0, MetaIn_Flags_ap_vld_preg.read()) || esl_seteq<1,1,1>(ap_const_logic_0, MetaIn_Timestamp_ap_vld_preg.read()) || esl_seteq<1,1,1>(ap_const_logic_0, MetaIn_PixProcessingFlgs_ap_vld_preg.read()) || esl_seteq<1,1,1>(ap_const_logic_0, MetaIn_ModPixelF_ap_vld_preg.read()) || esl_seteq<1,1,1>(ap_const_logic_0, MetaIn_Status_ap_vld_preg.read())))) {
        MetaOut_Flags = MetaIn_Flags_preg.read();
    } else {
        MetaOut_Flags = MetaOut_Flags_preg.read();
    }
}

void myproject_axi::thread_MetaOut_ModPixelF() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state2.read()) && 
         !(esl_seteq<1,1,1>(ap_const_logic_0, MetaIn_StreamId_ap_vld_preg.read()) || esl_seteq<1,1,1>(ap_const_logic_0, MetaIn_SourceTag_ap_vld_preg.read()) || esl_seteq<1,1,1>(ap_const_logic_0, MetaIn_Xsize_V_ap_vld_preg.read()) || esl_seteq<1,1,1>(ap_const_logic_0, MetaIn_Xoffs_V_ap_vld_preg.read()) || esl_seteq<1,1,1>(ap_const_logic_0, MetaIn_Ysize_V_ap_vld_preg.read()) || esl_seteq<1,1,1>(ap_const_logic_0, MetaIn_Yoffs_V_ap_vld_preg.read()) || esl_seteq<1,1,1>(ap_const_logic_0, MetaIn_DsizeL_V_ap_vld_preg.read()) || esl_seteq<1,1,1>(ap_const_logic_0, MetaIn_PixelF_ap_vld_preg.read()) || esl_seteq<1,1,1>(ap_const_logic_0, MetaIn_TapG_ap_vld_preg.read()) || esl_seteq<1,1,1>(ap_const_logic_0, MetaIn_Flags_ap_vld_preg.read()) || esl_seteq<1,1,1>(ap_const_logic_0, MetaIn_Timestamp_ap_vld_preg.read()) || esl_seteq<1,1,1>(ap_const_logic_0, MetaIn_PixProcessingFlgs_ap_vld_preg.read()) || esl_seteq<1,1,1>(ap_const_logic_0, MetaIn_ModPixelF_ap_vld_preg.read()) || esl_seteq<1,1,1>(ap_const_logic_0, MetaIn_Status_ap_vld_preg.read())))) {
        MetaOut_ModPixelF = MetaIn_ModPixelF_preg.read();
    } else {
        MetaOut_ModPixelF = MetaOut_ModPixelF_preg.read();
    }
}

void myproject_axi::thread_MetaOut_PixProcessingFlgs() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state2.read()) && 
         !(esl_seteq<1,1,1>(ap_const_logic_0, MetaIn_StreamId_ap_vld_preg.read()) || esl_seteq<1,1,1>(ap_const_logic_0, MetaIn_SourceTag_ap_vld_preg.read()) || esl_seteq<1,1,1>(ap_const_logic_0, MetaIn_Xsize_V_ap_vld_preg.read()) || esl_seteq<1,1,1>(ap_const_logic_0, MetaIn_Xoffs_V_ap_vld_preg.read()) || esl_seteq<1,1,1>(ap_const_logic_0, MetaIn_Ysize_V_ap_vld_preg.read()) || esl_seteq<1,1,1>(ap_const_logic_0, MetaIn_Yoffs_V_ap_vld_preg.read()) || esl_seteq<1,1,1>(ap_const_logic_0, MetaIn_DsizeL_V_ap_vld_preg.read()) || esl_seteq<1,1,1>(ap_const_logic_0, MetaIn_PixelF_ap_vld_preg.read()) || esl_seteq<1,1,1>(ap_const_logic_0, MetaIn_TapG_ap_vld_preg.read()) || esl_seteq<1,1,1>(ap_const_logic_0, MetaIn_Flags_ap_vld_preg.read()) || esl_seteq<1,1,1>(ap_const_logic_0, MetaIn_Timestamp_ap_vld_preg.read()) || esl_seteq<1,1,1>(ap_const_logic_0, MetaIn_PixProcessingFlgs_ap_vld_preg.read()) || esl_seteq<1,1,1>(ap_const_logic_0, MetaIn_ModPixelF_ap_vld_preg.read()) || esl_seteq<1,1,1>(ap_const_logic_0, MetaIn_Status_ap_vld_preg.read())))) {
        MetaOut_PixProcessingFlgs = MetaIn_PixProcessingFlgs_preg.read();
    } else {
        MetaOut_PixProcessingFlgs = MetaOut_PixProcessingFlgs_preg.read();
    }
}

void myproject_axi::thread_MetaOut_PixelF() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state2.read()) && 
         !(esl_seteq<1,1,1>(ap_const_logic_0, MetaIn_StreamId_ap_vld_preg.read()) || esl_seteq<1,1,1>(ap_const_logic_0, MetaIn_SourceTag_ap_vld_preg.read()) || esl_seteq<1,1,1>(ap_const_logic_0, MetaIn_Xsize_V_ap_vld_preg.read()) || esl_seteq<1,1,1>(ap_const_logic_0, MetaIn_Xoffs_V_ap_vld_preg.read()) || esl_seteq<1,1,1>(ap_const_logic_0, MetaIn_Ysize_V_ap_vld_preg.read()) || esl_seteq<1,1,1>(ap_const_logic_0, MetaIn_Yoffs_V_ap_vld_preg.read()) || esl_seteq<1,1,1>(ap_const_logic_0, MetaIn_DsizeL_V_ap_vld_preg.read()) || esl_seteq<1,1,1>(ap_const_logic_0, MetaIn_PixelF_ap_vld_preg.read()) || esl_seteq<1,1,1>(ap_const_logic_0, MetaIn_TapG_ap_vld_preg.read()) || esl_seteq<1,1,1>(ap_const_logic_0, MetaIn_Flags_ap_vld_preg.read()) || esl_seteq<1,1,1>(ap_const_logic_0, MetaIn_Timestamp_ap_vld_preg.read()) || esl_seteq<1,1,1>(ap_const_logic_0, MetaIn_PixProcessingFlgs_ap_vld_preg.read()) || esl_seteq<1,1,1>(ap_const_logic_0, MetaIn_ModPixelF_ap_vld_preg.read()) || esl_seteq<1,1,1>(ap_const_logic_0, MetaIn_Status_ap_vld_preg.read())))) {
        MetaOut_PixelF = MetaIn_PixelF_preg.read();
    } else {
        MetaOut_PixelF = MetaOut_PixelF_preg.read();
    }
}

void myproject_axi::thread_MetaOut_SourceTag() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state2.read()) && 
         !(esl_seteq<1,1,1>(ap_const_logic_0, MetaIn_StreamId_ap_vld_preg.read()) || esl_seteq<1,1,1>(ap_const_logic_0, MetaIn_SourceTag_ap_vld_preg.read()) || esl_seteq<1,1,1>(ap_const_logic_0, MetaIn_Xsize_V_ap_vld_preg.read()) || esl_seteq<1,1,1>(ap_const_logic_0, MetaIn_Xoffs_V_ap_vld_preg.read()) || esl_seteq<1,1,1>(ap_const_logic_0, MetaIn_Ysize_V_ap_vld_preg.read()) || esl_seteq<1,1,1>(ap_const_logic_0, MetaIn_Yoffs_V_ap_vld_preg.read()) || esl_seteq<1,1,1>(ap_const_logic_0, MetaIn_DsizeL_V_ap_vld_preg.read()) || esl_seteq<1,1,1>(ap_const_logic_0, MetaIn_PixelF_ap_vld_preg.read()) || esl_seteq<1,1,1>(ap_const_logic_0, MetaIn_TapG_ap_vld_preg.read()) || esl_seteq<1,1,1>(ap_const_logic_0, MetaIn_Flags_ap_vld_preg.read()) || esl_seteq<1,1,1>(ap_const_logic_0, MetaIn_Timestamp_ap_vld_preg.read()) || esl_seteq<1,1,1>(ap_const_logic_0, MetaIn_PixProcessingFlgs_ap_vld_preg.read()) || esl_seteq<1,1,1>(ap_const_logic_0, MetaIn_ModPixelF_ap_vld_preg.read()) || esl_seteq<1,1,1>(ap_const_logic_0, MetaIn_Status_ap_vld_preg.read())))) {
        MetaOut_SourceTag = MetaIn_SourceTag_preg.read();
    } else {
        MetaOut_SourceTag = MetaOut_SourceTag_preg.read();
    }
}

void myproject_axi::thread_MetaOut_Status() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state2.read()) && 
         !(esl_seteq<1,1,1>(ap_const_logic_0, MetaIn_StreamId_ap_vld_preg.read()) || esl_seteq<1,1,1>(ap_const_logic_0, MetaIn_SourceTag_ap_vld_preg.read()) || esl_seteq<1,1,1>(ap_const_logic_0, MetaIn_Xsize_V_ap_vld_preg.read()) || esl_seteq<1,1,1>(ap_const_logic_0, MetaIn_Xoffs_V_ap_vld_preg.read()) || esl_seteq<1,1,1>(ap_const_logic_0, MetaIn_Ysize_V_ap_vld_preg.read()) || esl_seteq<1,1,1>(ap_const_logic_0, MetaIn_Yoffs_V_ap_vld_preg.read()) || esl_seteq<1,1,1>(ap_const_logic_0, MetaIn_DsizeL_V_ap_vld_preg.read()) || esl_seteq<1,1,1>(ap_const_logic_0, MetaIn_PixelF_ap_vld_preg.read()) || esl_seteq<1,1,1>(ap_const_logic_0, MetaIn_TapG_ap_vld_preg.read()) || esl_seteq<1,1,1>(ap_const_logic_0, MetaIn_Flags_ap_vld_preg.read()) || esl_seteq<1,1,1>(ap_const_logic_0, MetaIn_Timestamp_ap_vld_preg.read()) || esl_seteq<1,1,1>(ap_const_logic_0, MetaIn_PixProcessingFlgs_ap_vld_preg.read()) || esl_seteq<1,1,1>(ap_const_logic_0, MetaIn_ModPixelF_ap_vld_preg.read()) || esl_seteq<1,1,1>(ap_const_logic_0, MetaIn_Status_ap_vld_preg.read())))) {
        MetaOut_Status = MetaIn_Status_preg.read();
    } else {
        MetaOut_Status = MetaOut_Status_preg.read();
    }
}

void myproject_axi::thread_MetaOut_StreamId() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state2.read()) && 
         !(esl_seteq<1,1,1>(ap_const_logic_0, MetaIn_StreamId_ap_vld_preg.read()) || esl_seteq<1,1,1>(ap_const_logic_0, MetaIn_SourceTag_ap_vld_preg.read()) || esl_seteq<1,1,1>(ap_const_logic_0, MetaIn_Xsize_V_ap_vld_preg.read()) || esl_seteq<1,1,1>(ap_const_logic_0, MetaIn_Xoffs_V_ap_vld_preg.read()) || esl_seteq<1,1,1>(ap_const_logic_0, MetaIn_Ysize_V_ap_vld_preg.read()) || esl_seteq<1,1,1>(ap_const_logic_0, MetaIn_Yoffs_V_ap_vld_preg.read()) || esl_seteq<1,1,1>(ap_const_logic_0, MetaIn_DsizeL_V_ap_vld_preg.read()) || esl_seteq<1,1,1>(ap_const_logic_0, MetaIn_PixelF_ap_vld_preg.read()) || esl_seteq<1,1,1>(ap_const_logic_0, MetaIn_TapG_ap_vld_preg.read()) || esl_seteq<1,1,1>(ap_const_logic_0, MetaIn_Flags_ap_vld_preg.read()) || esl_seteq<1,1,1>(ap_const_logic_0, MetaIn_Timestamp_ap_vld_preg.read()) || esl_seteq<1,1,1>(ap_const_logic_0, MetaIn_PixProcessingFlgs_ap_vld_preg.read()) || esl_seteq<1,1,1>(ap_const_logic_0, MetaIn_ModPixelF_ap_vld_preg.read()) || esl_seteq<1,1,1>(ap_const_logic_0, MetaIn_Status_ap_vld_preg.read())))) {
        MetaOut_StreamId = MetaIn_StreamId_preg.read();
    } else {
        MetaOut_StreamId = MetaOut_StreamId_preg.read();
    }
}

void myproject_axi::thread_MetaOut_TapG() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state2.read()) && 
         !(esl_seteq<1,1,1>(ap_const_logic_0, MetaIn_StreamId_ap_vld_preg.read()) || esl_seteq<1,1,1>(ap_const_logic_0, MetaIn_SourceTag_ap_vld_preg.read()) || esl_seteq<1,1,1>(ap_const_logic_0, MetaIn_Xsize_V_ap_vld_preg.read()) || esl_seteq<1,1,1>(ap_const_logic_0, MetaIn_Xoffs_V_ap_vld_preg.read()) || esl_seteq<1,1,1>(ap_const_logic_0, MetaIn_Ysize_V_ap_vld_preg.read()) || esl_seteq<1,1,1>(ap_const_logic_0, MetaIn_Yoffs_V_ap_vld_preg.read()) || esl_seteq<1,1,1>(ap_const_logic_0, MetaIn_DsizeL_V_ap_vld_preg.read()) || esl_seteq<1,1,1>(ap_const_logic_0, MetaIn_PixelF_ap_vld_preg.read()) || esl_seteq<1,1,1>(ap_const_logic_0, MetaIn_TapG_ap_vld_preg.read()) || esl_seteq<1,1,1>(ap_const_logic_0, MetaIn_Flags_ap_vld_preg.read()) || esl_seteq<1,1,1>(ap_const_logic_0, MetaIn_Timestamp_ap_vld_preg.read()) || esl_seteq<1,1,1>(ap_const_logic_0, MetaIn_PixProcessingFlgs_ap_vld_preg.read()) || esl_seteq<1,1,1>(ap_const_logic_0, MetaIn_ModPixelF_ap_vld_preg.read()) || esl_seteq<1,1,1>(ap_const_logic_0, MetaIn_Status_ap_vld_preg.read())))) {
        MetaOut_TapG = MetaIn_TapG_preg.read();
    } else {
        MetaOut_TapG = MetaOut_TapG_preg.read();
    }
}

void myproject_axi::thread_MetaOut_Timestamp() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state2.read()) && 
         !(esl_seteq<1,1,1>(ap_const_logic_0, MetaIn_StreamId_ap_vld_preg.read()) || esl_seteq<1,1,1>(ap_const_logic_0, MetaIn_SourceTag_ap_vld_preg.read()) || esl_seteq<1,1,1>(ap_const_logic_0, MetaIn_Xsize_V_ap_vld_preg.read()) || esl_seteq<1,1,1>(ap_const_logic_0, MetaIn_Xoffs_V_ap_vld_preg.read()) || esl_seteq<1,1,1>(ap_const_logic_0, MetaIn_Ysize_V_ap_vld_preg.read()) || esl_seteq<1,1,1>(ap_const_logic_0, MetaIn_Yoffs_V_ap_vld_preg.read()) || esl_seteq<1,1,1>(ap_const_logic_0, MetaIn_DsizeL_V_ap_vld_preg.read()) || esl_seteq<1,1,1>(ap_const_logic_0, MetaIn_PixelF_ap_vld_preg.read()) || esl_seteq<1,1,1>(ap_const_logic_0, MetaIn_TapG_ap_vld_preg.read()) || esl_seteq<1,1,1>(ap_const_logic_0, MetaIn_Flags_ap_vld_preg.read()) || esl_seteq<1,1,1>(ap_const_logic_0, MetaIn_Timestamp_ap_vld_preg.read()) || esl_seteq<1,1,1>(ap_const_logic_0, MetaIn_PixProcessingFlgs_ap_vld_preg.read()) || esl_seteq<1,1,1>(ap_const_logic_0, MetaIn_ModPixelF_ap_vld_preg.read()) || esl_seteq<1,1,1>(ap_const_logic_0, MetaIn_Status_ap_vld_preg.read())))) {
        MetaOut_Timestamp = MetaIn_Timestamp_preg.read();
    } else {
        MetaOut_Timestamp = MetaOut_Timestamp_preg.read();
    }
}

void myproject_axi::thread_MetaOut_Xoffs_V() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state2.read()) && 
         !(esl_seteq<1,1,1>(ap_const_logic_0, MetaIn_StreamId_ap_vld_preg.read()) || esl_seteq<1,1,1>(ap_const_logic_0, MetaIn_SourceTag_ap_vld_preg.read()) || esl_seteq<1,1,1>(ap_const_logic_0, MetaIn_Xsize_V_ap_vld_preg.read()) || esl_seteq<1,1,1>(ap_const_logic_0, MetaIn_Xoffs_V_ap_vld_preg.read()) || esl_seteq<1,1,1>(ap_const_logic_0, MetaIn_Ysize_V_ap_vld_preg.read()) || esl_seteq<1,1,1>(ap_const_logic_0, MetaIn_Yoffs_V_ap_vld_preg.read()) || esl_seteq<1,1,1>(ap_const_logic_0, MetaIn_DsizeL_V_ap_vld_preg.read()) || esl_seteq<1,1,1>(ap_const_logic_0, MetaIn_PixelF_ap_vld_preg.read()) || esl_seteq<1,1,1>(ap_const_logic_0, MetaIn_TapG_ap_vld_preg.read()) || esl_seteq<1,1,1>(ap_const_logic_0, MetaIn_Flags_ap_vld_preg.read()) || esl_seteq<1,1,1>(ap_const_logic_0, MetaIn_Timestamp_ap_vld_preg.read()) || esl_seteq<1,1,1>(ap_const_logic_0, MetaIn_PixProcessingFlgs_ap_vld_preg.read()) || esl_seteq<1,1,1>(ap_const_logic_0, MetaIn_ModPixelF_ap_vld_preg.read()) || esl_seteq<1,1,1>(ap_const_logic_0, MetaIn_Status_ap_vld_preg.read())))) {
        MetaOut_Xoffs_V = MetaIn_Xoffs_V_preg.read();
    } else {
        MetaOut_Xoffs_V = MetaOut_Xoffs_V_preg.read();
    }
}

void myproject_axi::thread_MetaOut_Xsize_V() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state2.read()) && 
         !(esl_seteq<1,1,1>(ap_const_logic_0, MetaIn_StreamId_ap_vld_preg.read()) || esl_seteq<1,1,1>(ap_const_logic_0, MetaIn_SourceTag_ap_vld_preg.read()) || esl_seteq<1,1,1>(ap_const_logic_0, MetaIn_Xsize_V_ap_vld_preg.read()) || esl_seteq<1,1,1>(ap_const_logic_0, MetaIn_Xoffs_V_ap_vld_preg.read()) || esl_seteq<1,1,1>(ap_const_logic_0, MetaIn_Ysize_V_ap_vld_preg.read()) || esl_seteq<1,1,1>(ap_const_logic_0, MetaIn_Yoffs_V_ap_vld_preg.read()) || esl_seteq<1,1,1>(ap_const_logic_0, MetaIn_DsizeL_V_ap_vld_preg.read()) || esl_seteq<1,1,1>(ap_const_logic_0, MetaIn_PixelF_ap_vld_preg.read()) || esl_seteq<1,1,1>(ap_const_logic_0, MetaIn_TapG_ap_vld_preg.read()) || esl_seteq<1,1,1>(ap_const_logic_0, MetaIn_Flags_ap_vld_preg.read()) || esl_seteq<1,1,1>(ap_const_logic_0, MetaIn_Timestamp_ap_vld_preg.read()) || esl_seteq<1,1,1>(ap_const_logic_0, MetaIn_PixProcessingFlgs_ap_vld_preg.read()) || esl_seteq<1,1,1>(ap_const_logic_0, MetaIn_ModPixelF_ap_vld_preg.read()) || esl_seteq<1,1,1>(ap_const_logic_0, MetaIn_Status_ap_vld_preg.read())))) {
        MetaOut_Xsize_V = MetaIn_Xsize_V_preg.read();
    } else {
        MetaOut_Xsize_V = MetaOut_Xsize_V_preg.read();
    }
}

void myproject_axi::thread_MetaOut_Yoffs_V() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state2.read()) && 
         !(esl_seteq<1,1,1>(ap_const_logic_0, MetaIn_StreamId_ap_vld_preg.read()) || esl_seteq<1,1,1>(ap_const_logic_0, MetaIn_SourceTag_ap_vld_preg.read()) || esl_seteq<1,1,1>(ap_const_logic_0, MetaIn_Xsize_V_ap_vld_preg.read()) || esl_seteq<1,1,1>(ap_const_logic_0, MetaIn_Xoffs_V_ap_vld_preg.read()) || esl_seteq<1,1,1>(ap_const_logic_0, MetaIn_Ysize_V_ap_vld_preg.read()) || esl_seteq<1,1,1>(ap_const_logic_0, MetaIn_Yoffs_V_ap_vld_preg.read()) || esl_seteq<1,1,1>(ap_const_logic_0, MetaIn_DsizeL_V_ap_vld_preg.read()) || esl_seteq<1,1,1>(ap_const_logic_0, MetaIn_PixelF_ap_vld_preg.read()) || esl_seteq<1,1,1>(ap_const_logic_0, MetaIn_TapG_ap_vld_preg.read()) || esl_seteq<1,1,1>(ap_const_logic_0, MetaIn_Flags_ap_vld_preg.read()) || esl_seteq<1,1,1>(ap_const_logic_0, MetaIn_Timestamp_ap_vld_preg.read()) || esl_seteq<1,1,1>(ap_const_logic_0, MetaIn_PixProcessingFlgs_ap_vld_preg.read()) || esl_seteq<1,1,1>(ap_const_logic_0, MetaIn_ModPixelF_ap_vld_preg.read()) || esl_seteq<1,1,1>(ap_const_logic_0, MetaIn_Status_ap_vld_preg.read())))) {
        MetaOut_Yoffs_V = MetaIn_Yoffs_V_preg.read();
    } else {
        MetaOut_Yoffs_V = MetaOut_Yoffs_V_preg.read();
    }
}

void myproject_axi::thread_MetaOut_Ysize_V() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state2.read()) && 
         !(esl_seteq<1,1,1>(ap_const_logic_0, MetaIn_StreamId_ap_vld_preg.read()) || esl_seteq<1,1,1>(ap_const_logic_0, MetaIn_SourceTag_ap_vld_preg.read()) || esl_seteq<1,1,1>(ap_const_logic_0, MetaIn_Xsize_V_ap_vld_preg.read()) || esl_seteq<1,1,1>(ap_const_logic_0, MetaIn_Xoffs_V_ap_vld_preg.read()) || esl_seteq<1,1,1>(ap_const_logic_0, MetaIn_Ysize_V_ap_vld_preg.read()) || esl_seteq<1,1,1>(ap_const_logic_0, MetaIn_Yoffs_V_ap_vld_preg.read()) || esl_seteq<1,1,1>(ap_const_logic_0, MetaIn_DsizeL_V_ap_vld_preg.read()) || esl_seteq<1,1,1>(ap_const_logic_0, MetaIn_PixelF_ap_vld_preg.read()) || esl_seteq<1,1,1>(ap_const_logic_0, MetaIn_TapG_ap_vld_preg.read()) || esl_seteq<1,1,1>(ap_const_logic_0, MetaIn_Flags_ap_vld_preg.read()) || esl_seteq<1,1,1>(ap_const_logic_0, MetaIn_Timestamp_ap_vld_preg.read()) || esl_seteq<1,1,1>(ap_const_logic_0, MetaIn_PixProcessingFlgs_ap_vld_preg.read()) || esl_seteq<1,1,1>(ap_const_logic_0, MetaIn_ModPixelF_ap_vld_preg.read()) || esl_seteq<1,1,1>(ap_const_logic_0, MetaIn_Status_ap_vld_preg.read())))) {
        MetaOut_Ysize_V = MetaIn_Ysize_V_preg.read();
    } else {
        MetaOut_Ysize_V = MetaOut_Ysize_V_preg.read();
    }
}

void myproject_axi::thread_VideoIn_TREADY() {
    VideoIn_TREADY = VideoIn_V_User_V_0_state.read()[1];
}

void myproject_axi::thread_VideoIn_V_Data_V_0_ack_in() {
    VideoIn_V_Data_V_0_ack_in = VideoIn_V_Data_V_0_state.read()[1];
}

void myproject_axi::thread_VideoIn_V_Data_V_0_ack_out() {
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state3.read())) {
        VideoIn_V_Data_V_0_ack_out = grp_myproject_fu_302_VideoIn_TREADY.read();
    } else {
        VideoIn_V_Data_V_0_ack_out = ap_const_logic_0;
    }
}

void myproject_axi::thread_VideoIn_V_Data_V_0_data_out() {
    if (esl_seteq<1,1,1>(ap_const_logic_1, VideoIn_V_Data_V_0_sel.read())) {
        VideoIn_V_Data_V_0_data_out = VideoIn_V_Data_V_0_payload_B.read();
    } else {
        VideoIn_V_Data_V_0_data_out = VideoIn_V_Data_V_0_payload_A.read();
    }
}

void myproject_axi::thread_VideoIn_V_Data_V_0_load_A() {
    VideoIn_V_Data_V_0_load_A = (VideoIn_V_Data_V_0_state_cmp_full.read() & ~VideoIn_V_Data_V_0_sel_wr.read());
}

void myproject_axi::thread_VideoIn_V_Data_V_0_load_B() {
    VideoIn_V_Data_V_0_load_B = (VideoIn_V_Data_V_0_sel_wr.read() & VideoIn_V_Data_V_0_state_cmp_full.read());
}

void myproject_axi::thread_VideoIn_V_Data_V_0_sel() {
    VideoIn_V_Data_V_0_sel = VideoIn_V_Data_V_0_sel_rd.read();
}

void myproject_axi::thread_VideoIn_V_Data_V_0_state_cmp_full() {
    VideoIn_V_Data_V_0_state_cmp_full =  (sc_logic) ((!VideoIn_V_Data_V_0_state.read().is_01() || !ap_const_lv2_1.is_01())? sc_lv<1>(): sc_lv<1>(VideoIn_V_Data_V_0_state.read() != ap_const_lv2_1))[0];
}

void myproject_axi::thread_VideoIn_V_Data_V_0_vld_in() {
    VideoIn_V_Data_V_0_vld_in = VideoIn_TVALID.read();
}

void myproject_axi::thread_VideoIn_V_Data_V_0_vld_out() {
    VideoIn_V_Data_V_0_vld_out = VideoIn_V_Data_V_0_state.read()[0];
}

void myproject_axi::thread_VideoIn_V_User_V_0_ack_in() {
    VideoIn_V_User_V_0_ack_in = VideoIn_V_User_V_0_state.read()[1];
}

void myproject_axi::thread_VideoIn_V_User_V_0_ack_out() {
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state3.read())) {
        VideoIn_V_User_V_0_ack_out = grp_myproject_fu_302_VideoIn_TREADY.read();
    } else {
        VideoIn_V_User_V_0_ack_out = ap_const_logic_0;
    }
}

void myproject_axi::thread_VideoIn_V_User_V_0_data_out() {
    if (esl_seteq<1,1,1>(ap_const_logic_1, VideoIn_V_User_V_0_sel.read())) {
        VideoIn_V_User_V_0_data_out = VideoIn_V_User_V_0_payload_B.read();
    } else {
        VideoIn_V_User_V_0_data_out = VideoIn_V_User_V_0_payload_A.read();
    }
}

void myproject_axi::thread_VideoIn_V_User_V_0_load_A() {
    VideoIn_V_User_V_0_load_A = (VideoIn_V_User_V_0_state_cmp_full.read() & ~VideoIn_V_User_V_0_sel_wr.read());
}

void myproject_axi::thread_VideoIn_V_User_V_0_load_B() {
    VideoIn_V_User_V_0_load_B = (VideoIn_V_User_V_0_sel_wr.read() & VideoIn_V_User_V_0_state_cmp_full.read());
}

void myproject_axi::thread_VideoIn_V_User_V_0_sel() {
    VideoIn_V_User_V_0_sel = VideoIn_V_User_V_0_sel_rd.read();
}

void myproject_axi::thread_VideoIn_V_User_V_0_state_cmp_full() {
    VideoIn_V_User_V_0_state_cmp_full =  (sc_logic) ((!VideoIn_V_User_V_0_state.read().is_01() || !ap_const_lv2_1.is_01())? sc_lv<1>(): sc_lv<1>(VideoIn_V_User_V_0_state.read() != ap_const_lv2_1))[0];
}

void myproject_axi::thread_VideoIn_V_User_V_0_vld_in() {
    VideoIn_V_User_V_0_vld_in = VideoIn_TVALID.read();
}

void myproject_axi::thread_VideoIn_V_User_V_0_vld_out() {
    VideoIn_V_User_V_0_vld_out = VideoIn_V_User_V_0_state.read()[0];
}

void myproject_axi::thread_VideoOut_TDATA() {
    VideoOut_TDATA = VideoOut_V_Data_V_1_data_out.read();
}

void myproject_axi::thread_VideoOut_TUSER() {
    VideoOut_TUSER = VideoOut_V_User_V_1_data_out.read();
}

void myproject_axi::thread_VideoOut_TVALID() {
    VideoOut_TVALID = VideoOut_V_User_V_1_state.read()[0];
}

void myproject_axi::thread_VideoOut_V_Data_V_1_ack_in() {
    VideoOut_V_Data_V_1_ack_in = VideoOut_V_Data_V_1_state.read()[1];
}

void myproject_axi::thread_VideoOut_V_Data_V_1_ack_out() {
    VideoOut_V_Data_V_1_ack_out = VideoOut_TREADY.read();
}

void myproject_axi::thread_VideoOut_V_Data_V_1_data_out() {
    if (esl_seteq<1,1,1>(ap_const_logic_1, VideoOut_V_Data_V_1_sel.read())) {
        VideoOut_V_Data_V_1_data_out = VideoOut_V_Data_V_1_payload_B.read();
    } else {
        VideoOut_V_Data_V_1_data_out = VideoOut_V_Data_V_1_payload_A.read();
    }
}

void myproject_axi::thread_VideoOut_V_Data_V_1_load_A() {
    VideoOut_V_Data_V_1_load_A = (VideoOut_V_Data_V_1_state_cmp_full.read() & ~VideoOut_V_Data_V_1_sel_wr.read());
}

void myproject_axi::thread_VideoOut_V_Data_V_1_load_B() {
    VideoOut_V_Data_V_1_load_B = (VideoOut_V_Data_V_1_sel_wr.read() & VideoOut_V_Data_V_1_state_cmp_full.read());
}

void myproject_axi::thread_VideoOut_V_Data_V_1_sel() {
    VideoOut_V_Data_V_1_sel = VideoOut_V_Data_V_1_sel_rd.read();
}

void myproject_axi::thread_VideoOut_V_Data_V_1_state_cmp_full() {
    VideoOut_V_Data_V_1_state_cmp_full =  (sc_logic) ((!VideoOut_V_Data_V_1_state.read().is_01() || !ap_const_lv2_1.is_01())? sc_lv<1>(): sc_lv<1>(VideoOut_V_Data_V_1_state.read() != ap_const_lv2_1))[0];
}

void myproject_axi::thread_VideoOut_V_Data_V_1_vld_in() {
    VideoOut_V_Data_V_1_vld_in = grp_myproject_fu_302_VideoOut_TVALID.read();
}

void myproject_axi::thread_VideoOut_V_Data_V_1_vld_out() {
    VideoOut_V_Data_V_1_vld_out = VideoOut_V_Data_V_1_state.read()[0];
}

void myproject_axi::thread_VideoOut_V_User_V_1_ack_in() {
    VideoOut_V_User_V_1_ack_in = VideoOut_V_User_V_1_state.read()[1];
}

void myproject_axi::thread_VideoOut_V_User_V_1_ack_out() {
    VideoOut_V_User_V_1_ack_out = VideoOut_TREADY.read();
}

void myproject_axi::thread_VideoOut_V_User_V_1_data_out() {
    if (esl_seteq<1,1,1>(ap_const_logic_1, VideoOut_V_User_V_1_sel.read())) {
        VideoOut_V_User_V_1_data_out = VideoOut_V_User_V_1_payload_B.read();
    } else {
        VideoOut_V_User_V_1_data_out = VideoOut_V_User_V_1_payload_A.read();
    }
}

void myproject_axi::thread_VideoOut_V_User_V_1_load_A() {
    VideoOut_V_User_V_1_load_A = (VideoOut_V_User_V_1_state_cmp_full.read() & ~VideoOut_V_User_V_1_sel_wr.read());
}

void myproject_axi::thread_VideoOut_V_User_V_1_load_B() {
    VideoOut_V_User_V_1_load_B = (VideoOut_V_User_V_1_sel_wr.read() & VideoOut_V_User_V_1_state_cmp_full.read());
}

void myproject_axi::thread_VideoOut_V_User_V_1_sel() {
    VideoOut_V_User_V_1_sel = VideoOut_V_User_V_1_sel_rd.read();
}

void myproject_axi::thread_VideoOut_V_User_V_1_state_cmp_full() {
    VideoOut_V_User_V_1_state_cmp_full =  (sc_logic) ((!VideoOut_V_User_V_1_state.read().is_01() || !ap_const_lv2_1.is_01())? sc_lv<1>(): sc_lv<1>(VideoOut_V_User_V_1_state.read() != ap_const_lv2_1))[0];
}

void myproject_axi::thread_VideoOut_V_User_V_1_vld_in() {
    VideoOut_V_User_V_1_vld_in = grp_myproject_fu_302_VideoOut_TVALID.read();
}

void myproject_axi::thread_VideoOut_V_User_V_1_vld_out() {
    VideoOut_V_User_V_1_vld_out = VideoOut_V_User_V_1_state.read()[0];
}

void myproject_axi::thread_ap_CS_fsm_state1() {
    ap_CS_fsm_state1 = ap_CS_fsm.read()[0];
}

void myproject_axi::thread_ap_CS_fsm_state2() {
    ap_CS_fsm_state2 = ap_CS_fsm.read()[1];
}

void myproject_axi::thread_ap_CS_fsm_state3() {
    ap_CS_fsm_state3 = ap_CS_fsm.read()[2];
}

void myproject_axi::thread_ap_CS_fsm_state4() {
    ap_CS_fsm_state4 = ap_CS_fsm.read()[3];
}

void myproject_axi::thread_ap_block_state2() {
    ap_block_state2 = (esl_seteq<1,1,1>(ap_const_logic_0, MetaIn_StreamId_ap_vld_preg.read()) || esl_seteq<1,1,1>(ap_const_logic_0, MetaIn_SourceTag_ap_vld_preg.read()) || esl_seteq<1,1,1>(ap_const_logic_0, MetaIn_Xsize_V_ap_vld_preg.read()) || esl_seteq<1,1,1>(ap_const_logic_0, MetaIn_Xoffs_V_ap_vld_preg.read()) || esl_seteq<1,1,1>(ap_const_logic_0, MetaIn_Ysize_V_ap_vld_preg.read()) || esl_seteq<1,1,1>(ap_const_logic_0, MetaIn_Yoffs_V_ap_vld_preg.read()) || esl_seteq<1,1,1>(ap_const_logic_0, MetaIn_DsizeL_V_ap_vld_preg.read()) || esl_seteq<1,1,1>(ap_const_logic_0, MetaIn_PixelF_ap_vld_preg.read()) || esl_seteq<1,1,1>(ap_const_logic_0, MetaIn_TapG_ap_vld_preg.read()) || esl_seteq<1,1,1>(ap_const_logic_0, MetaIn_Flags_ap_vld_preg.read()) || esl_seteq<1,1,1>(ap_const_logic_0, MetaIn_Timestamp_ap_vld_preg.read()) || esl_seteq<1,1,1>(ap_const_logic_0, MetaIn_PixProcessingFlgs_ap_vld_preg.read()) || esl_seteq<1,1,1>(ap_const_logic_0, MetaIn_ModPixelF_ap_vld_preg.read()) || esl_seteq<1,1,1>(ap_const_logic_0, MetaIn_Status_ap_vld_preg.read()));
}

void myproject_axi::thread_ap_block_state2_ignore_call65() {
    ap_block_state2_ignore_call65 = (esl_seteq<1,1,1>(ap_const_logic_0, MetaIn_StreamId_ap_vld_preg.read()) || esl_seteq<1,1,1>(ap_const_logic_0, MetaIn_SourceTag_ap_vld_preg.read()) || esl_seteq<1,1,1>(ap_const_logic_0, MetaIn_Xsize_V_ap_vld_preg.read()) || esl_seteq<1,1,1>(ap_const_logic_0, MetaIn_Xoffs_V_ap_vld_preg.read()) || esl_seteq<1,1,1>(ap_const_logic_0, MetaIn_Ysize_V_ap_vld_preg.read()) || esl_seteq<1,1,1>(ap_const_logic_0, MetaIn_Yoffs_V_ap_vld_preg.read()) || esl_seteq<1,1,1>(ap_const_logic_0, MetaIn_DsizeL_V_ap_vld_preg.read()) || esl_seteq<1,1,1>(ap_const_logic_0, MetaIn_PixelF_ap_vld_preg.read()) || esl_seteq<1,1,1>(ap_const_logic_0, MetaIn_TapG_ap_vld_preg.read()) || esl_seteq<1,1,1>(ap_const_logic_0, MetaIn_Flags_ap_vld_preg.read()) || esl_seteq<1,1,1>(ap_const_logic_0, MetaIn_Timestamp_ap_vld_preg.read()) || esl_seteq<1,1,1>(ap_const_logic_0, MetaIn_PixProcessingFlgs_ap_vld_preg.read()) || esl_seteq<1,1,1>(ap_const_logic_0, MetaIn_ModPixelF_ap_vld_preg.read()) || esl_seteq<1,1,1>(ap_const_logic_0, MetaIn_Status_ap_vld_preg.read()));
}

void myproject_axi::thread_ap_block_state3_on_subcall_done() {
    ap_block_state3_on_subcall_done = esl_seteq<1,1,1>(ap_const_logic_0, (ap_sync_grp_myproject_fu_302_ap_ready.read() & ap_sync_grp_myproject_fu_302_ap_done.read()));
}

void myproject_axi::thread_ap_block_state4() {
    ap_block_state4 = (esl_seteq<1,1,1>(ap_const_logic_0, VideoOut_V_Data_V_1_ack_in.read()) || esl_seteq<1,1,1>(ap_const_logic_0, VideoOut_V_User_V_1_ack_in.read()));
}

void myproject_axi::thread_ap_done() {
    if ((esl_seteq<1,1,1>(ap_const_logic_0, VideoOut_V_Data_V_1_state.read()[0]) && 
         esl_seteq<1,1,1>(ap_const_logic_0, VideoOut_V_User_V_1_state.read()[0]) && 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state4.read()) && 
         !(esl_seteq<1,1,1>(ap_const_logic_0, VideoOut_V_Data_V_1_ack_in.read()) || esl_seteq<1,1,1>(ap_const_logic_0, VideoOut_V_User_V_1_ack_in.read())))) {
        ap_done = ap_const_logic_1;
    } else {
        ap_done = ap_const_logic_0;
    }
}

void myproject_axi::thread_ap_idle() {
    if ((esl_seteq<1,1,1>(ap_const_logic_0, ap_start.read()) && 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read()))) {
        ap_idle = ap_const_logic_1;
    } else {
        ap_idle = ap_const_logic_0;
    }
}

void myproject_axi::thread_ap_ready() {
    if ((esl_seteq<1,1,1>(ap_const_logic_0, VideoOut_V_Data_V_1_state.read()[0]) && 
         esl_seteq<1,1,1>(ap_const_logic_0, VideoOut_V_User_V_1_state.read()[0]) && 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state4.read()) && 
         !(esl_seteq<1,1,1>(ap_const_logic_0, VideoOut_V_Data_V_1_ack_in.read()) || esl_seteq<1,1,1>(ap_const_logic_0, VideoOut_V_User_V_1_ack_in.read())))) {
        ap_ready = ap_const_logic_1;
    } else {
        ap_ready = ap_const_logic_0;
    }
}

void myproject_axi::thread_ap_rst_n_inv() {
    ap_rst_n_inv =  (sc_logic) (~ap_rst_n.read());
}

void myproject_axi::thread_ap_sync_grp_myproject_fu_302_ap_done() {
    ap_sync_grp_myproject_fu_302_ap_done = (grp_myproject_fu_302_ap_done.read() | ap_sync_reg_grp_myproject_fu_302_ap_done.read());
}

void myproject_axi::thread_ap_sync_grp_myproject_fu_302_ap_ready() {
    ap_sync_grp_myproject_fu_302_ap_ready = (grp_myproject_fu_302_ap_ready.read() | ap_sync_reg_grp_myproject_fu_302_ap_ready.read());
}

void myproject_axi::thread_grp_myproject_fu_302_VideoIn_TVALID() {
    grp_myproject_fu_302_VideoIn_TVALID = VideoIn_V_User_V_0_state.read()[0];
}

void myproject_axi::thread_grp_myproject_fu_302_VideoOut_TREADY() {
    grp_myproject_fu_302_VideoOut_TREADY = ((VideoOut_V_Data_V_1_ack_in.read() & 
  ap_CS_fsm_state3.read()) | (VideoOut_V_User_V_1_ack_in.read() & 
  ap_CS_fsm_state3.read()));
}

void myproject_axi::thread_grp_myproject_fu_302_ap_continue() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state3.read()) && 
         esl_seteq<1,1,1>(ap_block_state3_on_subcall_done.read(), ap_const_boolean_0))) {
        grp_myproject_fu_302_ap_continue = ap_const_logic_1;
    } else {
        grp_myproject_fu_302_ap_continue = ap_const_logic_0;
    }
}

void myproject_axi::thread_grp_myproject_fu_302_ap_start() {
    grp_myproject_fu_302_ap_start = grp_myproject_fu_302_ap_start_reg.read();
}

void myproject_axi::thread_ap_NS_fsm() {
    switch (ap_CS_fsm.read().to_uint64()) {
        case 1 : 
            if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read()) && esl_seteq<1,1,1>(ap_start.read(), ap_const_logic_1))) {
                ap_NS_fsm = ap_ST_fsm_state2;
            } else {
                ap_NS_fsm = ap_ST_fsm_state1;
            }
            break;
        case 2 : 
            if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state2.read()) && !(esl_seteq<1,1,1>(ap_const_logic_0, MetaIn_StreamId_ap_vld_preg.read()) || esl_seteq<1,1,1>(ap_const_logic_0, MetaIn_SourceTag_ap_vld_preg.read()) || esl_seteq<1,1,1>(ap_const_logic_0, MetaIn_Xsize_V_ap_vld_preg.read()) || esl_seteq<1,1,1>(ap_const_logic_0, MetaIn_Xoffs_V_ap_vld_preg.read()) || esl_seteq<1,1,1>(ap_const_logic_0, MetaIn_Ysize_V_ap_vld_preg.read()) || esl_seteq<1,1,1>(ap_const_logic_0, MetaIn_Yoffs_V_ap_vld_preg.read()) || esl_seteq<1,1,1>(ap_const_logic_0, MetaIn_DsizeL_V_ap_vld_preg.read()) || esl_seteq<1,1,1>(ap_const_logic_0, MetaIn_PixelF_ap_vld_preg.read()) || esl_seteq<1,1,1>(ap_const_logic_0, MetaIn_TapG_ap_vld_preg.read()) || esl_seteq<1,1,1>(ap_const_logic_0, MetaIn_Flags_ap_vld_preg.read()) || esl_seteq<1,1,1>(ap_const_logic_0, MetaIn_Timestamp_ap_vld_preg.read()) || esl_seteq<1,1,1>(ap_const_logic_0, MetaIn_PixProcessingFlgs_ap_vld_preg.read()) || esl_seteq<1,1,1>(ap_const_logic_0, MetaIn_ModPixelF_ap_vld_preg.read()) || esl_seteq<1,1,1>(ap_const_logic_0, MetaIn_Status_ap_vld_preg.read())))) {
                ap_NS_fsm = ap_ST_fsm_state3;
            } else {
                ap_NS_fsm = ap_ST_fsm_state2;
            }
            break;
        case 4 : 
            if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state3.read()) && esl_seteq<1,1,1>(ap_block_state3_on_subcall_done.read(), ap_const_boolean_0))) {
                ap_NS_fsm = ap_ST_fsm_state4;
            } else {
                ap_NS_fsm = ap_ST_fsm_state3;
            }
            break;
        case 8 : 
            if ((esl_seteq<1,1,1>(ap_const_logic_0, VideoOut_V_Data_V_1_state.read()[0]) && esl_seteq<1,1,1>(ap_const_logic_0, VideoOut_V_User_V_1_state.read()[0]) && esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state4.read()) && !(esl_seteq<1,1,1>(ap_const_logic_0, VideoOut_V_Data_V_1_ack_in.read()) || esl_seteq<1,1,1>(ap_const_logic_0, VideoOut_V_User_V_1_ack_in.read())))) {
                ap_NS_fsm = ap_ST_fsm_state1;
            } else {
                ap_NS_fsm = ap_ST_fsm_state4;
            }
            break;
        default : 
            ap_NS_fsm = "XXXX";
            break;
    }
}

void myproject_axi::thread_hdltv_gen() {
    const char* dump_tv = std::getenv("AP_WRITE_TV");
    if (!(dump_tv && string(dump_tv) == "on")) return;

    wait();

    mHdltvinHandle << "[ " << endl;
    mHdltvoutHandle << "[ " << endl;
    int ap_cycleNo = 0;
    while (1) {
        wait();
        const char* mComma = ap_cycleNo == 0 ? " " : ", " ;
        mHdltvinHandle << mComma << "{"  <<  " \"ap_rst_n\" :  \"" << ap_rst_n.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"ap_start\" :  \"" << ap_start.read() << "\" ";
        mHdltvoutHandle << mComma << "{"  <<  " \"ap_done\" :  \"" << ap_done.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"ap_idle\" :  \"" << ap_idle.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"ap_ready\" :  \"" << ap_ready.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"VideoIn_TDATA\" :  \"" << VideoIn_TDATA.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"VideoIn_TVALID\" :  \"" << VideoIn_TVALID.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"VideoIn_TREADY\" :  \"" << VideoIn_TREADY.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"VideoIn_TUSER\" :  \"" << VideoIn_TUSER.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"VideoOut_TDATA\" :  \"" << VideoOut_TDATA.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"VideoOut_TVALID\" :  \"" << VideoOut_TVALID.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"VideoOut_TREADY\" :  \"" << VideoOut_TREADY.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"VideoOut_TUSER\" :  \"" << VideoOut_TUSER.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"MetaIn_StreamId\" :  \"" << MetaIn_StreamId.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"MetaIn_StreamId_ap_vld\" :  \"" << MetaIn_StreamId_ap_vld.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"MetaIn_SourceTag\" :  \"" << MetaIn_SourceTag.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"MetaIn_SourceTag_ap_vld\" :  \"" << MetaIn_SourceTag_ap_vld.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"MetaIn_Xsize_V\" :  \"" << MetaIn_Xsize_V.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"MetaIn_Xsize_V_ap_vld\" :  \"" << MetaIn_Xsize_V_ap_vld.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"MetaIn_Xoffs_V\" :  \"" << MetaIn_Xoffs_V.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"MetaIn_Xoffs_V_ap_vld\" :  \"" << MetaIn_Xoffs_V_ap_vld.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"MetaIn_Ysize_V\" :  \"" << MetaIn_Ysize_V.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"MetaIn_Ysize_V_ap_vld\" :  \"" << MetaIn_Ysize_V_ap_vld.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"MetaIn_Yoffs_V\" :  \"" << MetaIn_Yoffs_V.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"MetaIn_Yoffs_V_ap_vld\" :  \"" << MetaIn_Yoffs_V_ap_vld.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"MetaIn_DsizeL_V\" :  \"" << MetaIn_DsizeL_V.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"MetaIn_DsizeL_V_ap_vld\" :  \"" << MetaIn_DsizeL_V_ap_vld.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"MetaIn_PixelF\" :  \"" << MetaIn_PixelF.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"MetaIn_PixelF_ap_vld\" :  \"" << MetaIn_PixelF_ap_vld.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"MetaIn_TapG\" :  \"" << MetaIn_TapG.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"MetaIn_TapG_ap_vld\" :  \"" << MetaIn_TapG_ap_vld.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"MetaIn_Flags\" :  \"" << MetaIn_Flags.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"MetaIn_Flags_ap_vld\" :  \"" << MetaIn_Flags_ap_vld.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"MetaIn_Timestamp\" :  \"" << MetaIn_Timestamp.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"MetaIn_Timestamp_ap_vld\" :  \"" << MetaIn_Timestamp_ap_vld.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"MetaIn_PixProcessingFlgs\" :  \"" << MetaIn_PixProcessingFlgs.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"MetaIn_PixProcessingFlgs_ap_vld\" :  \"" << MetaIn_PixProcessingFlgs_ap_vld.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"MetaIn_ModPixelF\" :  \"" << MetaIn_ModPixelF.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"MetaIn_ModPixelF_ap_vld\" :  \"" << MetaIn_ModPixelF_ap_vld.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"MetaIn_Status\" :  \"" << MetaIn_Status.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"MetaIn_Status_ap_vld\" :  \"" << MetaIn_Status_ap_vld.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"MetaOut_StreamId\" :  \"" << MetaOut_StreamId.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"MetaOut_SourceTag\" :  \"" << MetaOut_SourceTag.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"MetaOut_Xsize_V\" :  \"" << MetaOut_Xsize_V.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"MetaOut_Xoffs_V\" :  \"" << MetaOut_Xoffs_V.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"MetaOut_Ysize_V\" :  \"" << MetaOut_Ysize_V.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"MetaOut_Yoffs_V\" :  \"" << MetaOut_Yoffs_V.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"MetaOut_DsizeL_V\" :  \"" << MetaOut_DsizeL_V.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"MetaOut_PixelF\" :  \"" << MetaOut_PixelF.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"MetaOut_TapG\" :  \"" << MetaOut_TapG.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"MetaOut_Flags\" :  \"" << MetaOut_Flags.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"MetaOut_Timestamp\" :  \"" << MetaOut_Timestamp.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"MetaOut_PixProcessingFlgs\" :  \"" << MetaOut_PixProcessingFlgs.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"MetaOut_ModPixelF\" :  \"" << MetaOut_ModPixelF.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"MetaOut_Status\" :  \"" << MetaOut_Status.read() << "\" ";
        mHdltvinHandle << "}" << std::endl;
        mHdltvoutHandle << "}" << std::endl;
        ap_cycleNo++;
    }
}

}

