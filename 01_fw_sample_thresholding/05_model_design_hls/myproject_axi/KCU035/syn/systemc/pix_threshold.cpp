// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2018.3
// Copyright (C) 1986-2018 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

#include "pix_threshold.h"
#include "AESL_pkg.h"

using namespace std;

namespace ap_rtl {

const sc_logic pix_threshold::ap_const_logic_1 = sc_dt::Log_1;
const sc_logic pix_threshold::ap_const_logic_0 = sc_dt::Log_0;
const sc_lv<3> pix_threshold::ap_ST_fsm_state1 = "1";
const sc_lv<3> pix_threshold::ap_ST_fsm_pp0_stage0 = "10";
const sc_lv<3> pix_threshold::ap_ST_fsm_state5 = "100";
const bool pix_threshold::ap_const_boolean_1 = true;
const sc_lv<32> pix_threshold::ap_const_lv32_0 = "00000000000000000000000000000000";
const sc_lv<32> pix_threshold::ap_const_lv32_1 = "1";
const bool pix_threshold::ap_const_boolean_0 = false;
const sc_lv<1> pix_threshold::ap_const_lv1_0 = "0";
const sc_lv<1> pix_threshold::ap_const_lv1_1 = "1";
const sc_lv<14> pix_threshold::ap_const_lv14_0 = "00000000000000";
const sc_lv<14> pix_threshold::ap_const_lv14_2800 = "10100000000000";
const sc_lv<14> pix_threshold::ap_const_lv14_1 = "1";
const sc_lv<32> pix_threshold::ap_const_lv32_B = "1011";
const sc_lv<32> pix_threshold::ap_const_lv32_F = "1111";
const sc_lv<5> pix_threshold::ap_const_lv5_0 = "00000";
const sc_lv<32> pix_threshold::ap_const_lv32_10 = "10000";
const sc_lv<32> pix_threshold::ap_const_lv32_1F = "11111";
const sc_lv<32> pix_threshold::ap_const_lv32_1B = "11011";
const sc_lv<32> pix_threshold::ap_const_lv32_20 = "100000";
const sc_lv<32> pix_threshold::ap_const_lv32_2F = "101111";
const sc_lv<32> pix_threshold::ap_const_lv32_2B = "101011";
const sc_lv<32> pix_threshold::ap_const_lv32_30 = "110000";
const sc_lv<32> pix_threshold::ap_const_lv32_3F = "111111";
const sc_lv<32> pix_threshold::ap_const_lv32_3B = "111011";
const sc_lv<32> pix_threshold::ap_const_lv32_40 = "1000000";
const sc_lv<32> pix_threshold::ap_const_lv32_4F = "1001111";
const sc_lv<32> pix_threshold::ap_const_lv32_4B = "1001011";
const sc_lv<32> pix_threshold::ap_const_lv32_50 = "1010000";
const sc_lv<32> pix_threshold::ap_const_lv32_5F = "1011111";
const sc_lv<32> pix_threshold::ap_const_lv32_5B = "1011011";
const sc_lv<32> pix_threshold::ap_const_lv32_60 = "1100000";
const sc_lv<32> pix_threshold::ap_const_lv32_6F = "1101111";
const sc_lv<32> pix_threshold::ap_const_lv32_6B = "1101011";
const sc_lv<32> pix_threshold::ap_const_lv32_70 = "1110000";
const sc_lv<32> pix_threshold::ap_const_lv32_7F = "1111111";
const sc_lv<32> pix_threshold::ap_const_lv32_7B = "1111011";
const sc_lv<16> pix_threshold::ap_const_lv16_0 = "0000000000000000";
const sc_lv<32> pix_threshold::ap_const_lv32_2 = "10";

pix_threshold::pix_threshold(sc_module_name name) : sc_module(name), mVcdFile(0) {

    SC_METHOD(thread_ap_clk_no_reset_);
    dont_initialize();
    sensitive << ( ap_clk.pos() );

    SC_METHOD(thread_StreamIn_V_Data_V0_status);
    sensitive << ( StreamIn_V_Data_V_empty_n );
    sensitive << ( StreamIn_V_User_V_empty_n );

    SC_METHOD(thread_StreamIn_V_Data_V0_update);
    sensitive << ( ap_CS_fsm_pp0_stage0 );
    sensitive << ( ap_enable_reg_pp0_iter1 );
    sensitive << ( tmp_reg_468 );
    sensitive << ( ap_block_pp0_stage0_11001 );

    SC_METHOD(thread_StreamIn_V_Data_V_blk_n);
    sensitive << ( StreamIn_V_Data_V_empty_n );
    sensitive << ( ap_CS_fsm_pp0_stage0 );
    sensitive << ( ap_enable_reg_pp0_iter1 );
    sensitive << ( ap_block_pp0_stage0 );
    sensitive << ( tmp_reg_468 );

    SC_METHOD(thread_StreamIn_V_Data_V_read);
    sensitive << ( StreamIn_V_Data_V0_update );

    SC_METHOD(thread_StreamIn_V_User_V_blk_n);
    sensitive << ( StreamIn_V_User_V_empty_n );
    sensitive << ( ap_CS_fsm_pp0_stage0 );
    sensitive << ( ap_enable_reg_pp0_iter1 );
    sensitive << ( ap_block_pp0_stage0 );
    sensitive << ( tmp_reg_468 );

    SC_METHOD(thread_StreamIn_V_User_V_read);
    sensitive << ( StreamIn_V_Data_V0_update );

    SC_METHOD(thread_StreamOut_V_Data_V1_status);
    sensitive << ( StreamOut_V_Data_V_full_n );
    sensitive << ( StreamOut_V_User_V_full_n );

    SC_METHOD(thread_StreamOut_V_Data_V1_update);
    sensitive << ( ap_enable_reg_pp0_iter2 );
    sensitive << ( tmp_reg_468_pp0_iter1_reg );
    sensitive << ( ap_block_pp0_stage0_11001 );

    SC_METHOD(thread_StreamOut_V_Data_V_blk_n);
    sensitive << ( StreamOut_V_Data_V_full_n );
    sensitive << ( ap_block_pp0_stage0 );
    sensitive << ( ap_enable_reg_pp0_iter2 );
    sensitive << ( tmp_reg_468_pp0_iter1_reg );

    SC_METHOD(thread_StreamOut_V_Data_V_din);
    sensitive << ( ap_enable_reg_pp0_iter2 );
    sensitive << ( tmp_reg_468_pp0_iter1_reg );
    sensitive << ( ap_block_pp0_stage0_01001 );
    sensitive << ( tmp_V_7_trunc_fu_441_p3 );
    sensitive << ( tmp_V_6_trunc_fu_435_p3 );
    sensitive << ( tmp_V_5_trunc_fu_429_p3 );
    sensitive << ( tmp_V_4_trunc_fu_423_p3 );
    sensitive << ( tmp_V_3_trunc_fu_417_p3 );
    sensitive << ( tmp_V_2_trunc_fu_411_p3 );
    sensitive << ( tmp_V_1_trunc_fu_405_p3 );
    sensitive << ( tmp_V_0_trunc_fu_399_p3 );

    SC_METHOD(thread_StreamOut_V_Data_V_write);
    sensitive << ( StreamOut_V_Data_V1_update );

    SC_METHOD(thread_StreamOut_V_User_V_blk_n);
    sensitive << ( StreamOut_V_User_V_full_n );
    sensitive << ( ap_block_pp0_stage0 );
    sensitive << ( ap_enable_reg_pp0_iter2 );
    sensitive << ( tmp_reg_468_pp0_iter1_reg );

    SC_METHOD(thread_StreamOut_V_User_V_din);
    sensitive << ( ap_enable_reg_pp0_iter2 );
    sensitive << ( tmp_reg_468_pp0_iter1_reg );
    sensitive << ( tmp_User_V_reg_477 );
    sensitive << ( ap_block_pp0_stage0_01001 );

    SC_METHOD(thread_StreamOut_V_User_V_write);
    sensitive << ( StreamOut_V_Data_V1_update );

    SC_METHOD(thread_ap_CS_fsm_pp0_stage0);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state1);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state5);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_block_pp0_stage0);

    SC_METHOD(thread_ap_block_pp0_stage0_01001);
    sensitive << ( ap_enable_reg_pp0_iter1 );
    sensitive << ( tmp_reg_468 );
    sensitive << ( ap_enable_reg_pp0_iter2 );
    sensitive << ( tmp_reg_468_pp0_iter1_reg );
    sensitive << ( StreamIn_V_Data_V0_status );
    sensitive << ( StreamOut_V_Data_V1_status );

    SC_METHOD(thread_ap_block_pp0_stage0_11001);
    sensitive << ( ap_enable_reg_pp0_iter1 );
    sensitive << ( tmp_reg_468 );
    sensitive << ( ap_enable_reg_pp0_iter2 );
    sensitive << ( tmp_reg_468_pp0_iter1_reg );
    sensitive << ( StreamIn_V_Data_V0_status );
    sensitive << ( StreamOut_V_Data_V1_status );

    SC_METHOD(thread_ap_block_pp0_stage0_subdone);
    sensitive << ( ap_enable_reg_pp0_iter1 );
    sensitive << ( tmp_reg_468 );
    sensitive << ( ap_enable_reg_pp0_iter2 );
    sensitive << ( tmp_reg_468_pp0_iter1_reg );
    sensitive << ( StreamIn_V_Data_V0_status );
    sensitive << ( StreamOut_V_Data_V1_status );

    SC_METHOD(thread_ap_block_state1);
    sensitive << ( real_start );
    sensitive << ( ap_done_reg );

    SC_METHOD(thread_ap_block_state2_pp0_stage0_iter0);

    SC_METHOD(thread_ap_block_state3_pp0_stage0_iter1);
    sensitive << ( tmp_reg_468 );
    sensitive << ( StreamIn_V_Data_V0_status );

    SC_METHOD(thread_ap_block_state4_pp0_stage0_iter2);
    sensitive << ( tmp_reg_468_pp0_iter1_reg );
    sensitive << ( StreamOut_V_Data_V1_status );

    SC_METHOD(thread_ap_condition_pp0_exit_iter0_state2);
    sensitive << ( tmp_fu_177_p2 );

    SC_METHOD(thread_ap_done);
    sensitive << ( ap_done_reg );
    sensitive << ( ap_CS_fsm_state5 );

    SC_METHOD(thread_ap_enable_pp0);
    sensitive << ( ap_idle_pp0 );

    SC_METHOD(thread_ap_idle);
    sensitive << ( real_start );
    sensitive << ( ap_CS_fsm_state1 );

    SC_METHOD(thread_ap_idle_pp0);
    sensitive << ( ap_enable_reg_pp0_iter1 );
    sensitive << ( ap_enable_reg_pp0_iter2 );
    sensitive << ( ap_enable_reg_pp0_iter0 );

    SC_METHOD(thread_ap_ready);
    sensitive << ( internal_ap_ready );

    SC_METHOD(thread_i_2_fu_183_p2);
    sensitive << ( i_reg_166 );

    SC_METHOD(thread_icmp1_fu_315_p2);
    sensitive << ( ap_CS_fsm_pp0_stage0 );
    sensitive << ( ap_enable_reg_pp0_iter1 );
    sensitive << ( tmp_reg_468 );
    sensitive << ( ap_block_pp0_stage0_11001 );
    sensitive << ( tmp_13_fu_305_p4 );

    SC_METHOD(thread_icmp2_fu_341_p2);
    sensitive << ( ap_CS_fsm_pp0_stage0 );
    sensitive << ( ap_enable_reg_pp0_iter1 );
    sensitive << ( tmp_reg_468 );
    sensitive << ( ap_block_pp0_stage0_11001 );
    sensitive << ( tmp_14_fu_331_p4 );

    SC_METHOD(thread_icmp3_fu_237_p2);
    sensitive << ( ap_CS_fsm_pp0_stage0 );
    sensitive << ( ap_enable_reg_pp0_iter1 );
    sensitive << ( tmp_reg_468 );
    sensitive << ( ap_block_pp0_stage0_11001 );
    sensitive << ( tmp_10_fu_227_p4 );

    SC_METHOD(thread_icmp4_fu_367_p2);
    sensitive << ( ap_CS_fsm_pp0_stage0 );
    sensitive << ( ap_enable_reg_pp0_iter1 );
    sensitive << ( tmp_reg_468 );
    sensitive << ( ap_block_pp0_stage0_11001 );
    sensitive << ( tmp_15_fu_357_p4 );

    SC_METHOD(thread_icmp5_fu_393_p2);
    sensitive << ( ap_CS_fsm_pp0_stage0 );
    sensitive << ( ap_enable_reg_pp0_iter1 );
    sensitive << ( tmp_reg_468 );
    sensitive << ( ap_block_pp0_stage0_11001 );
    sensitive << ( tmp_16_fu_383_p4 );

    SC_METHOD(thread_icmp6_fu_263_p2);
    sensitive << ( ap_CS_fsm_pp0_stage0 );
    sensitive << ( ap_enable_reg_pp0_iter1 );
    sensitive << ( tmp_reg_468 );
    sensitive << ( ap_block_pp0_stage0_11001 );
    sensitive << ( tmp_11_fu_253_p4 );

    SC_METHOD(thread_icmp9_fu_289_p2);
    sensitive << ( ap_CS_fsm_pp0_stage0 );
    sensitive << ( ap_enable_reg_pp0_iter1 );
    sensitive << ( tmp_reg_468 );
    sensitive << ( ap_block_pp0_stage0_11001 );
    sensitive << ( tmp_12_fu_279_p4 );

    SC_METHOD(thread_icmp_fu_211_p2);
    sensitive << ( ap_CS_fsm_pp0_stage0 );
    sensitive << ( ap_enable_reg_pp0_iter1 );
    sensitive << ( tmp_reg_468 );
    sensitive << ( ap_block_pp0_stage0_11001 );
    sensitive << ( tmp_9_fu_201_p4 );

    SC_METHOD(thread_internal_ap_ready);
    sensitive << ( ap_CS_fsm_state5 );

    SC_METHOD(thread_real_start);
    sensitive << ( ap_start );
    sensitive << ( start_full_n );
    sensitive << ( start_once_reg );

    SC_METHOD(thread_start_out);
    sensitive << ( real_start );

    SC_METHOD(thread_start_write);
    sensitive << ( real_start );
    sensitive << ( start_once_reg );

    SC_METHOD(thread_tmp_10_fu_227_p4);
    sensitive << ( StreamIn_V_Data_V_dout );

    SC_METHOD(thread_tmp_11_fu_253_p4);
    sensitive << ( StreamIn_V_Data_V_dout );

    SC_METHOD(thread_tmp_12_fu_279_p4);
    sensitive << ( StreamIn_V_Data_V_dout );

    SC_METHOD(thread_tmp_13_fu_305_p4);
    sensitive << ( StreamIn_V_Data_V_dout );

    SC_METHOD(thread_tmp_14_fu_331_p4);
    sensitive << ( StreamIn_V_Data_V_dout );

    SC_METHOD(thread_tmp_15_fu_357_p4);
    sensitive << ( StreamIn_V_Data_V_dout );

    SC_METHOD(thread_tmp_16_fu_383_p4);
    sensitive << ( StreamIn_V_Data_V_dout );

    SC_METHOD(thread_tmp_8_fu_197_p1);
    sensitive << ( StreamIn_V_Data_V_dout );

    SC_METHOD(thread_tmp_9_fu_201_p4);
    sensitive << ( StreamIn_V_Data_V_dout );

    SC_METHOD(thread_tmp_V_0_trunc_fu_399_p3);
    sensitive << ( tmp_8_reg_482 );
    sensitive << ( icmp_reg_487 );

    SC_METHOD(thread_tmp_V_1_trunc_fu_405_p3);
    sensitive << ( p_Result_1_reg_492 );
    sensitive << ( icmp3_reg_497 );

    SC_METHOD(thread_tmp_V_2_trunc_fu_411_p3);
    sensitive << ( p_Result_2_reg_502 );
    sensitive << ( icmp6_reg_507 );

    SC_METHOD(thread_tmp_V_3_trunc_fu_417_p3);
    sensitive << ( p_Result_3_reg_512 );
    sensitive << ( icmp9_reg_517 );

    SC_METHOD(thread_tmp_V_4_trunc_fu_423_p3);
    sensitive << ( p_Result_4_reg_522 );
    sensitive << ( icmp1_reg_527 );

    SC_METHOD(thread_tmp_V_5_trunc_fu_429_p3);
    sensitive << ( p_Result_5_reg_532 );
    sensitive << ( icmp2_reg_537 );

    SC_METHOD(thread_tmp_V_6_trunc_fu_435_p3);
    sensitive << ( p_Result_6_reg_542 );
    sensitive << ( icmp4_reg_547 );

    SC_METHOD(thread_tmp_V_7_trunc_fu_441_p3);
    sensitive << ( p_Result_7_reg_552 );
    sensitive << ( icmp5_reg_557 );

    SC_METHOD(thread_tmp_fu_177_p2);
    sensitive << ( ap_CS_fsm_pp0_stage0 );
    sensitive << ( i_reg_166 );
    sensitive << ( ap_block_pp0_stage0_11001 );
    sensitive << ( ap_enable_reg_pp0_iter0 );

    SC_METHOD(thread_ap_NS_fsm);
    sensitive << ( real_start );
    sensitive << ( ap_done_reg );
    sensitive << ( ap_CS_fsm );
    sensitive << ( ap_CS_fsm_state1 );
    sensitive << ( ap_enable_reg_pp0_iter1 );
    sensitive << ( ap_enable_reg_pp0_iter2 );
    sensitive << ( tmp_fu_177_p2 );
    sensitive << ( ap_enable_reg_pp0_iter0 );
    sensitive << ( ap_block_pp0_stage0_subdone );

    start_once_reg = SC_LOGIC_0;
    ap_done_reg = SC_LOGIC_0;
    ap_CS_fsm = "001";
    ap_enable_reg_pp0_iter1 = SC_LOGIC_0;
    ap_enable_reg_pp0_iter2 = SC_LOGIC_0;
    ap_enable_reg_pp0_iter0 = SC_LOGIC_0;
    static int apTFileNum = 0;
    stringstream apTFilenSS;
    apTFilenSS << "pix_threshold_sc_trace_" << apTFileNum ++;
    string apTFn = apTFilenSS.str();
    mVcdFile = sc_create_vcd_trace_file(apTFn.c_str());
    mVcdFile->set_time_unit(1, SC_PS);
    if (1) {
#ifdef __HLS_TRACE_LEVEL_PORT_HIER__
    sc_trace(mVcdFile, ap_clk, "(port)ap_clk");
    sc_trace(mVcdFile, ap_rst, "(port)ap_rst");
    sc_trace(mVcdFile, ap_start, "(port)ap_start");
    sc_trace(mVcdFile, start_full_n, "(port)start_full_n");
    sc_trace(mVcdFile, ap_done, "(port)ap_done");
    sc_trace(mVcdFile, ap_continue, "(port)ap_continue");
    sc_trace(mVcdFile, ap_idle, "(port)ap_idle");
    sc_trace(mVcdFile, ap_ready, "(port)ap_ready");
    sc_trace(mVcdFile, start_out, "(port)start_out");
    sc_trace(mVcdFile, start_write, "(port)start_write");
    sc_trace(mVcdFile, StreamIn_V_Data_V_dout, "(port)StreamIn_V_Data_V_dout");
    sc_trace(mVcdFile, StreamIn_V_Data_V_empty_n, "(port)StreamIn_V_Data_V_empty_n");
    sc_trace(mVcdFile, StreamIn_V_Data_V_read, "(port)StreamIn_V_Data_V_read");
    sc_trace(mVcdFile, StreamIn_V_User_V_dout, "(port)StreamIn_V_User_V_dout");
    sc_trace(mVcdFile, StreamIn_V_User_V_empty_n, "(port)StreamIn_V_User_V_empty_n");
    sc_trace(mVcdFile, StreamIn_V_User_V_read, "(port)StreamIn_V_User_V_read");
    sc_trace(mVcdFile, StreamOut_V_Data_V_din, "(port)StreamOut_V_Data_V_din");
    sc_trace(mVcdFile, StreamOut_V_Data_V_full_n, "(port)StreamOut_V_Data_V_full_n");
    sc_trace(mVcdFile, StreamOut_V_Data_V_write, "(port)StreamOut_V_Data_V_write");
    sc_trace(mVcdFile, StreamOut_V_User_V_din, "(port)StreamOut_V_User_V_din");
    sc_trace(mVcdFile, StreamOut_V_User_V_full_n, "(port)StreamOut_V_User_V_full_n");
    sc_trace(mVcdFile, StreamOut_V_User_V_write, "(port)StreamOut_V_User_V_write");
#endif
#ifdef __HLS_TRACE_LEVEL_INT__
    sc_trace(mVcdFile, real_start, "real_start");
    sc_trace(mVcdFile, start_once_reg, "start_once_reg");
    sc_trace(mVcdFile, ap_done_reg, "ap_done_reg");
    sc_trace(mVcdFile, ap_CS_fsm, "ap_CS_fsm");
    sc_trace(mVcdFile, ap_CS_fsm_state1, "ap_CS_fsm_state1");
    sc_trace(mVcdFile, internal_ap_ready, "internal_ap_ready");
    sc_trace(mVcdFile, StreamIn_V_Data_V_blk_n, "StreamIn_V_Data_V_blk_n");
    sc_trace(mVcdFile, ap_CS_fsm_pp0_stage0, "ap_CS_fsm_pp0_stage0");
    sc_trace(mVcdFile, ap_enable_reg_pp0_iter1, "ap_enable_reg_pp0_iter1");
    sc_trace(mVcdFile, ap_block_pp0_stage0, "ap_block_pp0_stage0");
    sc_trace(mVcdFile, tmp_reg_468, "tmp_reg_468");
    sc_trace(mVcdFile, StreamIn_V_User_V_blk_n, "StreamIn_V_User_V_blk_n");
    sc_trace(mVcdFile, StreamOut_V_Data_V_blk_n, "StreamOut_V_Data_V_blk_n");
    sc_trace(mVcdFile, ap_enable_reg_pp0_iter2, "ap_enable_reg_pp0_iter2");
    sc_trace(mVcdFile, tmp_reg_468_pp0_iter1_reg, "tmp_reg_468_pp0_iter1_reg");
    sc_trace(mVcdFile, StreamOut_V_User_V_blk_n, "StreamOut_V_User_V_blk_n");
    sc_trace(mVcdFile, i_reg_166, "i_reg_166");
    sc_trace(mVcdFile, tmp_fu_177_p2, "tmp_fu_177_p2");
    sc_trace(mVcdFile, ap_block_state2_pp0_stage0_iter0, "ap_block_state2_pp0_stage0_iter0");
    sc_trace(mVcdFile, StreamIn_V_Data_V0_status, "StreamIn_V_Data_V0_status");
    sc_trace(mVcdFile, ap_block_state3_pp0_stage0_iter1, "ap_block_state3_pp0_stage0_iter1");
    sc_trace(mVcdFile, StreamOut_V_Data_V1_status, "StreamOut_V_Data_V1_status");
    sc_trace(mVcdFile, ap_block_state4_pp0_stage0_iter2, "ap_block_state4_pp0_stage0_iter2");
    sc_trace(mVcdFile, ap_block_pp0_stage0_11001, "ap_block_pp0_stage0_11001");
    sc_trace(mVcdFile, i_2_fu_183_p2, "i_2_fu_183_p2");
    sc_trace(mVcdFile, ap_enable_reg_pp0_iter0, "ap_enable_reg_pp0_iter0");
    sc_trace(mVcdFile, tmp_User_V_reg_477, "tmp_User_V_reg_477");
    sc_trace(mVcdFile, tmp_8_fu_197_p1, "tmp_8_fu_197_p1");
    sc_trace(mVcdFile, tmp_8_reg_482, "tmp_8_reg_482");
    sc_trace(mVcdFile, icmp_fu_211_p2, "icmp_fu_211_p2");
    sc_trace(mVcdFile, icmp_reg_487, "icmp_reg_487");
    sc_trace(mVcdFile, p_Result_1_reg_492, "p_Result_1_reg_492");
    sc_trace(mVcdFile, icmp3_fu_237_p2, "icmp3_fu_237_p2");
    sc_trace(mVcdFile, icmp3_reg_497, "icmp3_reg_497");
    sc_trace(mVcdFile, p_Result_2_reg_502, "p_Result_2_reg_502");
    sc_trace(mVcdFile, icmp6_fu_263_p2, "icmp6_fu_263_p2");
    sc_trace(mVcdFile, icmp6_reg_507, "icmp6_reg_507");
    sc_trace(mVcdFile, p_Result_3_reg_512, "p_Result_3_reg_512");
    sc_trace(mVcdFile, icmp9_fu_289_p2, "icmp9_fu_289_p2");
    sc_trace(mVcdFile, icmp9_reg_517, "icmp9_reg_517");
    sc_trace(mVcdFile, p_Result_4_reg_522, "p_Result_4_reg_522");
    sc_trace(mVcdFile, icmp1_fu_315_p2, "icmp1_fu_315_p2");
    sc_trace(mVcdFile, icmp1_reg_527, "icmp1_reg_527");
    sc_trace(mVcdFile, p_Result_5_reg_532, "p_Result_5_reg_532");
    sc_trace(mVcdFile, icmp2_fu_341_p2, "icmp2_fu_341_p2");
    sc_trace(mVcdFile, icmp2_reg_537, "icmp2_reg_537");
    sc_trace(mVcdFile, p_Result_6_reg_542, "p_Result_6_reg_542");
    sc_trace(mVcdFile, icmp4_fu_367_p2, "icmp4_fu_367_p2");
    sc_trace(mVcdFile, icmp4_reg_547, "icmp4_reg_547");
    sc_trace(mVcdFile, p_Result_7_reg_552, "p_Result_7_reg_552");
    sc_trace(mVcdFile, icmp5_fu_393_p2, "icmp5_fu_393_p2");
    sc_trace(mVcdFile, icmp5_reg_557, "icmp5_reg_557");
    sc_trace(mVcdFile, ap_block_state1, "ap_block_state1");
    sc_trace(mVcdFile, ap_block_pp0_stage0_subdone, "ap_block_pp0_stage0_subdone");
    sc_trace(mVcdFile, ap_condition_pp0_exit_iter0_state2, "ap_condition_pp0_exit_iter0_state2");
    sc_trace(mVcdFile, StreamIn_V_Data_V0_update, "StreamIn_V_Data_V0_update");
    sc_trace(mVcdFile, StreamOut_V_Data_V1_update, "StreamOut_V_Data_V1_update");
    sc_trace(mVcdFile, ap_block_pp0_stage0_01001, "ap_block_pp0_stage0_01001");
    sc_trace(mVcdFile, tmp_9_fu_201_p4, "tmp_9_fu_201_p4");
    sc_trace(mVcdFile, tmp_10_fu_227_p4, "tmp_10_fu_227_p4");
    sc_trace(mVcdFile, tmp_11_fu_253_p4, "tmp_11_fu_253_p4");
    sc_trace(mVcdFile, tmp_12_fu_279_p4, "tmp_12_fu_279_p4");
    sc_trace(mVcdFile, tmp_13_fu_305_p4, "tmp_13_fu_305_p4");
    sc_trace(mVcdFile, tmp_14_fu_331_p4, "tmp_14_fu_331_p4");
    sc_trace(mVcdFile, tmp_15_fu_357_p4, "tmp_15_fu_357_p4");
    sc_trace(mVcdFile, tmp_16_fu_383_p4, "tmp_16_fu_383_p4");
    sc_trace(mVcdFile, tmp_V_7_trunc_fu_441_p3, "tmp_V_7_trunc_fu_441_p3");
    sc_trace(mVcdFile, tmp_V_6_trunc_fu_435_p3, "tmp_V_6_trunc_fu_435_p3");
    sc_trace(mVcdFile, tmp_V_5_trunc_fu_429_p3, "tmp_V_5_trunc_fu_429_p3");
    sc_trace(mVcdFile, tmp_V_4_trunc_fu_423_p3, "tmp_V_4_trunc_fu_423_p3");
    sc_trace(mVcdFile, tmp_V_3_trunc_fu_417_p3, "tmp_V_3_trunc_fu_417_p3");
    sc_trace(mVcdFile, tmp_V_2_trunc_fu_411_p3, "tmp_V_2_trunc_fu_411_p3");
    sc_trace(mVcdFile, tmp_V_1_trunc_fu_405_p3, "tmp_V_1_trunc_fu_405_p3");
    sc_trace(mVcdFile, tmp_V_0_trunc_fu_399_p3, "tmp_V_0_trunc_fu_399_p3");
    sc_trace(mVcdFile, ap_CS_fsm_state5, "ap_CS_fsm_state5");
    sc_trace(mVcdFile, ap_NS_fsm, "ap_NS_fsm");
    sc_trace(mVcdFile, ap_idle_pp0, "ap_idle_pp0");
    sc_trace(mVcdFile, ap_enable_pp0, "ap_enable_pp0");
#endif

    }
}

pix_threshold::~pix_threshold() {
    if (mVcdFile) 
        sc_close_vcd_trace_file(mVcdFile);

}

void pix_threshold::thread_ap_clk_no_reset_() {
    if ( ap_rst.read() == ap_const_logic_1) {
        ap_CS_fsm = ap_ST_fsm_state1;
    } else {
        ap_CS_fsm = ap_NS_fsm.read();
    }
    if ( ap_rst.read() == ap_const_logic_1) {
        ap_done_reg = ap_const_logic_0;
    } else {
        if (esl_seteq<1,1,1>(ap_const_logic_1, ap_continue.read())) {
            ap_done_reg = ap_const_logic_0;
        } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state5.read())) {
            ap_done_reg = ap_const_logic_1;
        }
    }
    if ( ap_rst.read() == ap_const_logic_1) {
        ap_enable_reg_pp0_iter0 = ap_const_logic_0;
    } else {
        if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp0_stage0.read()) && 
             esl_seteq<1,1,1>(ap_block_pp0_stage0_subdone.read(), ap_const_boolean_0) && 
             esl_seteq<1,1,1>(ap_const_logic_1, ap_condition_pp0_exit_iter0_state2.read()))) {
            ap_enable_reg_pp0_iter0 = ap_const_logic_0;
        } else if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read()) && 
                    !(esl_seteq<1,1,1>(ap_const_logic_0, real_start.read()) || esl_seteq<1,1,1>(ap_done_reg.read(), ap_const_logic_1)))) {
            ap_enable_reg_pp0_iter0 = ap_const_logic_1;
        }
    }
    if ( ap_rst.read() == ap_const_logic_1) {
        ap_enable_reg_pp0_iter1 = ap_const_logic_0;
    } else {
        if (esl_seteq<1,1,1>(ap_block_pp0_stage0_subdone.read(), ap_const_boolean_0)) {
            if (esl_seteq<1,1,1>(ap_const_logic_1, ap_condition_pp0_exit_iter0_state2.read())) {
                ap_enable_reg_pp0_iter1 = (ap_condition_pp0_exit_iter0_state2.read() ^ ap_const_logic_1);
            } else if (esl_seteq<1,1,1>(ap_const_boolean_1, ap_const_boolean_1)) {
                ap_enable_reg_pp0_iter1 = ap_enable_reg_pp0_iter0.read();
            }
        }
    }
    if ( ap_rst.read() == ap_const_logic_1) {
        ap_enable_reg_pp0_iter2 = ap_const_logic_0;
    } else {
        if (esl_seteq<1,1,1>(ap_block_pp0_stage0_subdone.read(), ap_const_boolean_0)) {
            ap_enable_reg_pp0_iter2 = ap_enable_reg_pp0_iter1.read();
        } else if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read()) && 
                    !(esl_seteq<1,1,1>(ap_const_logic_0, real_start.read()) || esl_seteq<1,1,1>(ap_done_reg.read(), ap_const_logic_1)))) {
            ap_enable_reg_pp0_iter2 = ap_const_logic_0;
        }
    }
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp0_stage0.read()) && 
         esl_seteq<1,1,1>(ap_block_pp0_stage0_11001.read(), ap_const_boolean_0) && 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp0_iter0.read()) && 
         esl_seteq<1,1,1>(ap_const_lv1_0, tmp_fu_177_p2.read()))) {
        i_reg_166 = i_2_fu_183_p2.read();
    } else if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read()) && 
                !(esl_seteq<1,1,1>(ap_const_logic_0, real_start.read()) || esl_seteq<1,1,1>(ap_done_reg.read(), ap_const_logic_1)))) {
        i_reg_166 = ap_const_lv14_0;
    }
    if ( ap_rst.read() == ap_const_logic_1) {
        start_once_reg = ap_const_logic_0;
    } else {
        if ((esl_seteq<1,1,1>(ap_const_logic_1, real_start.read()) && 
             esl_seteq<1,1,1>(ap_const_logic_0, internal_ap_ready.read()))) {
            start_once_reg = ap_const_logic_1;
        } else if (esl_seteq<1,1,1>(ap_const_logic_1, internal_ap_ready.read())) {
            start_once_reg = ap_const_logic_0;
        }
    }
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp0_stage0.read()) && esl_seteq<1,1,1>(tmp_reg_468.read(), ap_const_lv1_0) && esl_seteq<1,1,1>(ap_block_pp0_stage0_11001.read(), ap_const_boolean_0))) {
        icmp1_reg_527 = icmp1_fu_315_p2.read();
        icmp2_reg_537 = icmp2_fu_341_p2.read();
        icmp3_reg_497 = icmp3_fu_237_p2.read();
        icmp4_reg_547 = icmp4_fu_367_p2.read();
        icmp5_reg_557 = icmp5_fu_393_p2.read();
        icmp6_reg_507 = icmp6_fu_263_p2.read();
        icmp9_reg_517 = icmp9_fu_289_p2.read();
        icmp_reg_487 = icmp_fu_211_p2.read();
        p_Result_1_reg_492 = StreamIn_V_Data_V_dout.read().range(31, 16);
        p_Result_2_reg_502 = StreamIn_V_Data_V_dout.read().range(47, 32);
        p_Result_3_reg_512 = StreamIn_V_Data_V_dout.read().range(63, 48);
        p_Result_4_reg_522 = StreamIn_V_Data_V_dout.read().range(79, 64);
        p_Result_5_reg_532 = StreamIn_V_Data_V_dout.read().range(95, 80);
        p_Result_6_reg_542 = StreamIn_V_Data_V_dout.read().range(111, 96);
        p_Result_7_reg_552 = StreamIn_V_Data_V_dout.read().range(127, 112);
        tmp_8_reg_482 = tmp_8_fu_197_p1.read();
        tmp_User_V_reg_477 = StreamIn_V_User_V_dout.read();
    }
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp0_stage0.read()) && esl_seteq<1,1,1>(ap_block_pp0_stage0_11001.read(), ap_const_boolean_0))) {
        tmp_reg_468 = tmp_fu_177_p2.read();
        tmp_reg_468_pp0_iter1_reg = tmp_reg_468.read();
    }
}

void pix_threshold::thread_StreamIn_V_Data_V0_status() {
    StreamIn_V_Data_V0_status = (StreamIn_V_Data_V_empty_n.read() & StreamIn_V_User_V_empty_n.read());
}

void pix_threshold::thread_StreamIn_V_Data_V0_update() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp0_stage0.read()) && 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp0_iter1.read()) && 
         esl_seteq<1,1,1>(tmp_reg_468.read(), ap_const_lv1_0) && 
         esl_seteq<1,1,1>(ap_block_pp0_stage0_11001.read(), ap_const_boolean_0))) {
        StreamIn_V_Data_V0_update = ap_const_logic_1;
    } else {
        StreamIn_V_Data_V0_update = ap_const_logic_0;
    }
}

void pix_threshold::thread_StreamIn_V_Data_V_blk_n() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp0_stage0.read()) && 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp0_iter1.read()) && 
         esl_seteq<1,1,1>(ap_block_pp0_stage0.read(), ap_const_boolean_0) && 
         esl_seteq<1,1,1>(tmp_reg_468.read(), ap_const_lv1_0))) {
        StreamIn_V_Data_V_blk_n = StreamIn_V_Data_V_empty_n.read();
    } else {
        StreamIn_V_Data_V_blk_n = ap_const_logic_1;
    }
}

void pix_threshold::thread_StreamIn_V_Data_V_read() {
    StreamIn_V_Data_V_read = StreamIn_V_Data_V0_update.read();
}

void pix_threshold::thread_StreamIn_V_User_V_blk_n() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp0_stage0.read()) && 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp0_iter1.read()) && 
         esl_seteq<1,1,1>(ap_block_pp0_stage0.read(), ap_const_boolean_0) && 
         esl_seteq<1,1,1>(tmp_reg_468.read(), ap_const_lv1_0))) {
        StreamIn_V_User_V_blk_n = StreamIn_V_User_V_empty_n.read();
    } else {
        StreamIn_V_User_V_blk_n = ap_const_logic_1;
    }
}

void pix_threshold::thread_StreamIn_V_User_V_read() {
    StreamIn_V_User_V_read = StreamIn_V_Data_V0_update.read();
}

void pix_threshold::thread_StreamOut_V_Data_V1_status() {
    StreamOut_V_Data_V1_status = (StreamOut_V_Data_V_full_n.read() & StreamOut_V_User_V_full_n.read());
}

void pix_threshold::thread_StreamOut_V_Data_V1_update() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp0_iter2.read()) && 
         esl_seteq<1,1,1>(ap_const_lv1_0, tmp_reg_468_pp0_iter1_reg.read()) && 
         esl_seteq<1,1,1>(ap_block_pp0_stage0_11001.read(), ap_const_boolean_0))) {
        StreamOut_V_Data_V1_update = ap_const_logic_1;
    } else {
        StreamOut_V_Data_V1_update = ap_const_logic_0;
    }
}

void pix_threshold::thread_StreamOut_V_Data_V_blk_n() {
    if ((esl_seteq<1,1,1>(ap_block_pp0_stage0.read(), ap_const_boolean_0) && 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp0_iter2.read()) && 
         esl_seteq<1,1,1>(ap_const_lv1_0, tmp_reg_468_pp0_iter1_reg.read()))) {
        StreamOut_V_Data_V_blk_n = StreamOut_V_Data_V_full_n.read();
    } else {
        StreamOut_V_Data_V_blk_n = ap_const_logic_1;
    }
}

void pix_threshold::thread_StreamOut_V_Data_V_din() {
    StreamOut_V_Data_V_din = esl_concat<112,16>(esl_concat<96,16>(esl_concat<80,16>(esl_concat<64,16>(esl_concat<48,16>(esl_concat<32,16>(esl_concat<16,16>(tmp_V_7_trunc_fu_441_p3.read(), tmp_V_6_trunc_fu_435_p3.read()), tmp_V_5_trunc_fu_429_p3.read()), tmp_V_4_trunc_fu_423_p3.read()), tmp_V_3_trunc_fu_417_p3.read()), tmp_V_2_trunc_fu_411_p3.read()), tmp_V_1_trunc_fu_405_p3.read()), tmp_V_0_trunc_fu_399_p3.read());
}

void pix_threshold::thread_StreamOut_V_Data_V_write() {
    StreamOut_V_Data_V_write = StreamOut_V_Data_V1_update.read();
}

void pix_threshold::thread_StreamOut_V_User_V_blk_n() {
    if ((esl_seteq<1,1,1>(ap_block_pp0_stage0.read(), ap_const_boolean_0) && 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp0_iter2.read()) && 
         esl_seteq<1,1,1>(ap_const_lv1_0, tmp_reg_468_pp0_iter1_reg.read()))) {
        StreamOut_V_User_V_blk_n = StreamOut_V_User_V_full_n.read();
    } else {
        StreamOut_V_User_V_blk_n = ap_const_logic_1;
    }
}

void pix_threshold::thread_StreamOut_V_User_V_din() {
    StreamOut_V_User_V_din = tmp_User_V_reg_477.read();
}

void pix_threshold::thread_StreamOut_V_User_V_write() {
    StreamOut_V_User_V_write = StreamOut_V_Data_V1_update.read();
}

void pix_threshold::thread_ap_CS_fsm_pp0_stage0() {
    ap_CS_fsm_pp0_stage0 = ap_CS_fsm.read()[1];
}

void pix_threshold::thread_ap_CS_fsm_state1() {
    ap_CS_fsm_state1 = ap_CS_fsm.read()[0];
}

void pix_threshold::thread_ap_CS_fsm_state5() {
    ap_CS_fsm_state5 = ap_CS_fsm.read()[2];
}

void pix_threshold::thread_ap_block_pp0_stage0() {
    ap_block_pp0_stage0 = !esl_seteq<1,1,1>(ap_const_boolean_1, ap_const_boolean_1);
}

void pix_threshold::thread_ap_block_pp0_stage0_01001() {
    ap_block_pp0_stage0_01001 = ((esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp0_iter1.read()) && 
  esl_seteq<1,1,1>(tmp_reg_468.read(), ap_const_lv1_0) && 
  esl_seteq<1,1,1>(ap_const_logic_0, StreamIn_V_Data_V0_status.read())) || (esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp0_iter2.read()) && 
  esl_seteq<1,1,1>(ap_const_lv1_0, tmp_reg_468_pp0_iter1_reg.read()) && 
  esl_seteq<1,1,1>(ap_const_logic_0, StreamOut_V_Data_V1_status.read())));
}

void pix_threshold::thread_ap_block_pp0_stage0_11001() {
    ap_block_pp0_stage0_11001 = ((esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp0_iter1.read()) && 
  esl_seteq<1,1,1>(tmp_reg_468.read(), ap_const_lv1_0) && 
  esl_seteq<1,1,1>(ap_const_logic_0, StreamIn_V_Data_V0_status.read())) || (esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp0_iter2.read()) && 
  esl_seteq<1,1,1>(ap_const_lv1_0, tmp_reg_468_pp0_iter1_reg.read()) && 
  esl_seteq<1,1,1>(ap_const_logic_0, StreamOut_V_Data_V1_status.read())));
}

void pix_threshold::thread_ap_block_pp0_stage0_subdone() {
    ap_block_pp0_stage0_subdone = ((esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp0_iter1.read()) && 
  esl_seteq<1,1,1>(tmp_reg_468.read(), ap_const_lv1_0) && 
  esl_seteq<1,1,1>(ap_const_logic_0, StreamIn_V_Data_V0_status.read())) || (esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp0_iter2.read()) && 
  esl_seteq<1,1,1>(ap_const_lv1_0, tmp_reg_468_pp0_iter1_reg.read()) && 
  esl_seteq<1,1,1>(ap_const_logic_0, StreamOut_V_Data_V1_status.read())));
}

void pix_threshold::thread_ap_block_state1() {
    ap_block_state1 = (esl_seteq<1,1,1>(ap_const_logic_0, real_start.read()) || esl_seteq<1,1,1>(ap_done_reg.read(), ap_const_logic_1));
}

void pix_threshold::thread_ap_block_state2_pp0_stage0_iter0() {
    ap_block_state2_pp0_stage0_iter0 = !esl_seteq<1,1,1>(ap_const_boolean_1, ap_const_boolean_1);
}

void pix_threshold::thread_ap_block_state3_pp0_stage0_iter1() {
    ap_block_state3_pp0_stage0_iter1 = (esl_seteq<1,1,1>(tmp_reg_468.read(), ap_const_lv1_0) && esl_seteq<1,1,1>(ap_const_logic_0, StreamIn_V_Data_V0_status.read()));
}

void pix_threshold::thread_ap_block_state4_pp0_stage0_iter2() {
    ap_block_state4_pp0_stage0_iter2 = (esl_seteq<1,1,1>(ap_const_lv1_0, tmp_reg_468_pp0_iter1_reg.read()) && esl_seteq<1,1,1>(ap_const_logic_0, StreamOut_V_Data_V1_status.read()));
}

void pix_threshold::thread_ap_condition_pp0_exit_iter0_state2() {
    if (esl_seteq<1,1,1>(tmp_fu_177_p2.read(), ap_const_lv1_1)) {
        ap_condition_pp0_exit_iter0_state2 = ap_const_logic_1;
    } else {
        ap_condition_pp0_exit_iter0_state2 = ap_const_logic_0;
    }
}

void pix_threshold::thread_ap_done() {
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state5.read())) {
        ap_done = ap_const_logic_1;
    } else {
        ap_done = ap_done_reg.read();
    }
}

void pix_threshold::thread_ap_enable_pp0() {
    ap_enable_pp0 = (ap_idle_pp0.read() ^ ap_const_logic_1);
}

void pix_threshold::thread_ap_idle() {
    if ((esl_seteq<1,1,1>(ap_const_logic_0, real_start.read()) && 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read()))) {
        ap_idle = ap_const_logic_1;
    } else {
        ap_idle = ap_const_logic_0;
    }
}

void pix_threshold::thread_ap_idle_pp0() {
    if ((esl_seteq<1,1,1>(ap_const_logic_0, ap_enable_reg_pp0_iter0.read()) && 
         esl_seteq<1,1,1>(ap_const_logic_0, ap_enable_reg_pp0_iter1.read()) && 
         esl_seteq<1,1,1>(ap_const_logic_0, ap_enable_reg_pp0_iter2.read()))) {
        ap_idle_pp0 = ap_const_logic_1;
    } else {
        ap_idle_pp0 = ap_const_logic_0;
    }
}

void pix_threshold::thread_ap_ready() {
    ap_ready = internal_ap_ready.read();
}

void pix_threshold::thread_i_2_fu_183_p2() {
    i_2_fu_183_p2 = (!i_reg_166.read().is_01() || !ap_const_lv14_1.is_01())? sc_lv<14>(): (sc_biguint<14>(i_reg_166.read()) + sc_biguint<14>(ap_const_lv14_1));
}

void pix_threshold::thread_icmp1_fu_315_p2() {
    icmp1_fu_315_p2 = (!tmp_13_fu_305_p4.read().is_01() || !ap_const_lv5_0.is_01())? sc_lv<1>(): sc_lv<1>(tmp_13_fu_305_p4.read() != ap_const_lv5_0);
}

void pix_threshold::thread_icmp2_fu_341_p2() {
    icmp2_fu_341_p2 = (!tmp_14_fu_331_p4.read().is_01() || !ap_const_lv5_0.is_01())? sc_lv<1>(): sc_lv<1>(tmp_14_fu_331_p4.read() != ap_const_lv5_0);
}

void pix_threshold::thread_icmp3_fu_237_p2() {
    icmp3_fu_237_p2 = (!tmp_10_fu_227_p4.read().is_01() || !ap_const_lv5_0.is_01())? sc_lv<1>(): sc_lv<1>(tmp_10_fu_227_p4.read() != ap_const_lv5_0);
}

void pix_threshold::thread_icmp4_fu_367_p2() {
    icmp4_fu_367_p2 = (!tmp_15_fu_357_p4.read().is_01() || !ap_const_lv5_0.is_01())? sc_lv<1>(): sc_lv<1>(tmp_15_fu_357_p4.read() != ap_const_lv5_0);
}

void pix_threshold::thread_icmp5_fu_393_p2() {
    icmp5_fu_393_p2 = (!tmp_16_fu_383_p4.read().is_01() || !ap_const_lv5_0.is_01())? sc_lv<1>(): sc_lv<1>(tmp_16_fu_383_p4.read() != ap_const_lv5_0);
}

void pix_threshold::thread_icmp6_fu_263_p2() {
    icmp6_fu_263_p2 = (!tmp_11_fu_253_p4.read().is_01() || !ap_const_lv5_0.is_01())? sc_lv<1>(): sc_lv<1>(tmp_11_fu_253_p4.read() != ap_const_lv5_0);
}

void pix_threshold::thread_icmp9_fu_289_p2() {
    icmp9_fu_289_p2 = (!tmp_12_fu_279_p4.read().is_01() || !ap_const_lv5_0.is_01())? sc_lv<1>(): sc_lv<1>(tmp_12_fu_279_p4.read() != ap_const_lv5_0);
}

void pix_threshold::thread_icmp_fu_211_p2() {
    icmp_fu_211_p2 = (!tmp_9_fu_201_p4.read().is_01() || !ap_const_lv5_0.is_01())? sc_lv<1>(): sc_lv<1>(tmp_9_fu_201_p4.read() != ap_const_lv5_0);
}

void pix_threshold::thread_internal_ap_ready() {
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state5.read())) {
        internal_ap_ready = ap_const_logic_1;
    } else {
        internal_ap_ready = ap_const_logic_0;
    }
}

void pix_threshold::thread_real_start() {
    if ((esl_seteq<1,1,1>(ap_const_logic_0, start_full_n.read()) && 
         esl_seteq<1,1,1>(ap_const_logic_0, start_once_reg.read()))) {
        real_start = ap_const_logic_0;
    } else {
        real_start = ap_start.read();
    }
}

void pix_threshold::thread_start_out() {
    start_out = real_start.read();
}

void pix_threshold::thread_start_write() {
    if ((esl_seteq<1,1,1>(ap_const_logic_0, start_once_reg.read()) && 
         esl_seteq<1,1,1>(ap_const_logic_1, real_start.read()))) {
        start_write = ap_const_logic_1;
    } else {
        start_write = ap_const_logic_0;
    }
}

void pix_threshold::thread_tmp_10_fu_227_p4() {
    tmp_10_fu_227_p4 = StreamIn_V_Data_V_dout.read().range(31, 27);
}

void pix_threshold::thread_tmp_11_fu_253_p4() {
    tmp_11_fu_253_p4 = StreamIn_V_Data_V_dout.read().range(47, 43);
}

void pix_threshold::thread_tmp_12_fu_279_p4() {
    tmp_12_fu_279_p4 = StreamIn_V_Data_V_dout.read().range(63, 59);
}

void pix_threshold::thread_tmp_13_fu_305_p4() {
    tmp_13_fu_305_p4 = StreamIn_V_Data_V_dout.read().range(79, 75);
}

void pix_threshold::thread_tmp_14_fu_331_p4() {
    tmp_14_fu_331_p4 = StreamIn_V_Data_V_dout.read().range(95, 91);
}

void pix_threshold::thread_tmp_15_fu_357_p4() {
    tmp_15_fu_357_p4 = StreamIn_V_Data_V_dout.read().range(111, 107);
}

void pix_threshold::thread_tmp_16_fu_383_p4() {
    tmp_16_fu_383_p4 = StreamIn_V_Data_V_dout.read().range(127, 123);
}

void pix_threshold::thread_tmp_8_fu_197_p1() {
    tmp_8_fu_197_p1 = StreamIn_V_Data_V_dout.read().range(16-1, 0);
}

void pix_threshold::thread_tmp_9_fu_201_p4() {
    tmp_9_fu_201_p4 = StreamIn_V_Data_V_dout.read().range(15, 11);
}

void pix_threshold::thread_tmp_V_0_trunc_fu_399_p3() {
    tmp_V_0_trunc_fu_399_p3 = (!icmp_reg_487.read()[0].is_01())? sc_lv<16>(): ((icmp_reg_487.read()[0].to_bool())? tmp_8_reg_482.read(): ap_const_lv16_0);
}

void pix_threshold::thread_tmp_V_1_trunc_fu_405_p3() {
    tmp_V_1_trunc_fu_405_p3 = (!icmp3_reg_497.read()[0].is_01())? sc_lv<16>(): ((icmp3_reg_497.read()[0].to_bool())? p_Result_1_reg_492.read(): ap_const_lv16_0);
}

void pix_threshold::thread_tmp_V_2_trunc_fu_411_p3() {
    tmp_V_2_trunc_fu_411_p3 = (!icmp6_reg_507.read()[0].is_01())? sc_lv<16>(): ((icmp6_reg_507.read()[0].to_bool())? p_Result_2_reg_502.read(): ap_const_lv16_0);
}

void pix_threshold::thread_tmp_V_3_trunc_fu_417_p3() {
    tmp_V_3_trunc_fu_417_p3 = (!icmp9_reg_517.read()[0].is_01())? sc_lv<16>(): ((icmp9_reg_517.read()[0].to_bool())? p_Result_3_reg_512.read(): ap_const_lv16_0);
}

void pix_threshold::thread_tmp_V_4_trunc_fu_423_p3() {
    tmp_V_4_trunc_fu_423_p3 = (!icmp1_reg_527.read()[0].is_01())? sc_lv<16>(): ((icmp1_reg_527.read()[0].to_bool())? p_Result_4_reg_522.read(): ap_const_lv16_0);
}

void pix_threshold::thread_tmp_V_5_trunc_fu_429_p3() {
    tmp_V_5_trunc_fu_429_p3 = (!icmp2_reg_537.read()[0].is_01())? sc_lv<16>(): ((icmp2_reg_537.read()[0].to_bool())? p_Result_5_reg_532.read(): ap_const_lv16_0);
}

void pix_threshold::thread_tmp_V_6_trunc_fu_435_p3() {
    tmp_V_6_trunc_fu_435_p3 = (!icmp4_reg_547.read()[0].is_01())? sc_lv<16>(): ((icmp4_reg_547.read()[0].to_bool())? p_Result_6_reg_542.read(): ap_const_lv16_0);
}

void pix_threshold::thread_tmp_V_7_trunc_fu_441_p3() {
    tmp_V_7_trunc_fu_441_p3 = (!icmp5_reg_557.read()[0].is_01())? sc_lv<16>(): ((icmp5_reg_557.read()[0].to_bool())? p_Result_7_reg_552.read(): ap_const_lv16_0);
}

void pix_threshold::thread_tmp_fu_177_p2() {
    tmp_fu_177_p2 = (!i_reg_166.read().is_01() || !ap_const_lv14_2800.is_01())? sc_lv<1>(): sc_lv<1>(i_reg_166.read() == ap_const_lv14_2800);
}

void pix_threshold::thread_ap_NS_fsm() {
    switch (ap_CS_fsm.read().to_uint64()) {
        case 1 : 
            if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read()) && !(esl_seteq<1,1,1>(ap_const_logic_0, real_start.read()) || esl_seteq<1,1,1>(ap_done_reg.read(), ap_const_logic_1)))) {
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            } else {
                ap_NS_fsm = ap_ST_fsm_state1;
            }
            break;
        case 2 : 
            if ((!(esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp0_iter2.read()) && esl_seteq<1,1,1>(ap_block_pp0_stage0_subdone.read(), ap_const_boolean_0) && esl_seteq<1,1,1>(ap_enable_reg_pp0_iter1.read(), ap_const_logic_0)) && !(esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp0_iter0.read()) && esl_seteq<1,1,1>(ap_block_pp0_stage0_subdone.read(), ap_const_boolean_0) && esl_seteq<1,1,1>(tmp_fu_177_p2.read(), ap_const_lv1_1) && esl_seteq<1,1,1>(ap_enable_reg_pp0_iter1.read(), ap_const_logic_0)))) {
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            } else if (((esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp0_iter2.read()) && 
  esl_seteq<1,1,1>(ap_block_pp0_stage0_subdone.read(), ap_const_boolean_0) && 
  esl_seteq<1,1,1>(ap_enable_reg_pp0_iter1.read(), ap_const_logic_0)) || (esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp0_iter0.read()) && 
  esl_seteq<1,1,1>(ap_block_pp0_stage0_subdone.read(), ap_const_boolean_0) && 
  esl_seteq<1,1,1>(tmp_fu_177_p2.read(), ap_const_lv1_1) && 
  esl_seteq<1,1,1>(ap_enable_reg_pp0_iter1.read(), ap_const_logic_0)))) {
                ap_NS_fsm = ap_ST_fsm_state5;
            } else {
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            }
            break;
        case 4 : 
            ap_NS_fsm = ap_ST_fsm_state1;
            break;
        default : 
            ap_NS_fsm = "XXX";
            break;
    }
}

}

