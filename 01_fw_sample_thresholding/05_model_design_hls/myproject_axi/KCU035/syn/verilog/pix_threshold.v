// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2018.3
// Copyright (C) 1986-2018 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

module pix_threshold (
        ap_clk,
        ap_rst,
        ap_start,
        start_full_n,
        ap_done,
        ap_continue,
        ap_idle,
        ap_ready,
        start_out,
        start_write,
        StreamIn_V_Data_V_dout,
        StreamIn_V_Data_V_empty_n,
        StreamIn_V_Data_V_read,
        StreamIn_V_User_V_dout,
        StreamIn_V_User_V_empty_n,
        StreamIn_V_User_V_read,
        StreamOut_V_Data_V_din,
        StreamOut_V_Data_V_full_n,
        StreamOut_V_Data_V_write,
        StreamOut_V_User_V_din,
        StreamOut_V_User_V_full_n,
        StreamOut_V_User_V_write
);

parameter    ap_ST_fsm_state1 = 3'd1;
parameter    ap_ST_fsm_pp0_stage0 = 3'd2;
parameter    ap_ST_fsm_state5 = 3'd4;

input   ap_clk;
input   ap_rst;
input   ap_start;
input   start_full_n;
output   ap_done;
input   ap_continue;
output   ap_idle;
output   ap_ready;
output   start_out;
output   start_write;
input  [127:0] StreamIn_V_Data_V_dout;
input   StreamIn_V_Data_V_empty_n;
output   StreamIn_V_Data_V_read;
input  [3:0] StreamIn_V_User_V_dout;
input   StreamIn_V_User_V_empty_n;
output   StreamIn_V_User_V_read;
output  [127:0] StreamOut_V_Data_V_din;
input   StreamOut_V_Data_V_full_n;
output   StreamOut_V_Data_V_write;
output  [3:0] StreamOut_V_User_V_din;
input   StreamOut_V_User_V_full_n;
output   StreamOut_V_User_V_write;

reg ap_done;
reg ap_idle;
reg start_write;

reg    real_start;
reg    start_once_reg;
reg    ap_done_reg;
(* fsm_encoding = "none" *) reg   [2:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
reg    internal_ap_ready;
reg    StreamIn_V_Data_V_blk_n;
wire    ap_CS_fsm_pp0_stage0;
reg    ap_enable_reg_pp0_iter1;
wire    ap_block_pp0_stage0;
reg   [0:0] tmp_reg_468;
reg    StreamIn_V_User_V_blk_n;
reg    StreamOut_V_Data_V_blk_n;
reg    ap_enable_reg_pp0_iter2;
reg   [0:0] tmp_reg_468_pp0_iter1_reg;
reg    StreamOut_V_User_V_blk_n;
reg   [13:0] i_reg_166;
wire   [0:0] tmp_fu_177_p2;
wire    ap_block_state2_pp0_stage0_iter0;
wire    StreamIn_V_Data_V0_status;
reg    ap_block_state3_pp0_stage0_iter1;
wire    StreamOut_V_Data_V1_status;
reg    ap_block_state4_pp0_stage0_iter2;
reg    ap_block_pp0_stage0_11001;
wire   [13:0] i_2_fu_183_p2;
reg    ap_enable_reg_pp0_iter0;
reg   [3:0] tmp_User_V_reg_477;
wire   [15:0] tmp_8_fu_197_p1;
reg   [15:0] tmp_8_reg_482;
wire   [0:0] icmp_fu_211_p2;
reg   [0:0] icmp_reg_487;
reg   [15:0] p_Result_1_reg_492;
wire   [0:0] icmp3_fu_237_p2;
reg   [0:0] icmp3_reg_497;
reg   [15:0] p_Result_2_reg_502;
wire   [0:0] icmp6_fu_263_p2;
reg   [0:0] icmp6_reg_507;
reg   [15:0] p_Result_3_reg_512;
wire   [0:0] icmp9_fu_289_p2;
reg   [0:0] icmp9_reg_517;
reg   [15:0] p_Result_4_reg_522;
wire   [0:0] icmp1_fu_315_p2;
reg   [0:0] icmp1_reg_527;
reg   [15:0] p_Result_5_reg_532;
wire   [0:0] icmp2_fu_341_p2;
reg   [0:0] icmp2_reg_537;
reg   [15:0] p_Result_6_reg_542;
wire   [0:0] icmp4_fu_367_p2;
reg   [0:0] icmp4_reg_547;
reg   [15:0] p_Result_7_reg_552;
wire   [0:0] icmp5_fu_393_p2;
reg   [0:0] icmp5_reg_557;
reg    ap_block_state1;
reg    ap_block_pp0_stage0_subdone;
reg    ap_condition_pp0_exit_iter0_state2;
reg    StreamIn_V_Data_V0_update;
reg    StreamOut_V_Data_V1_update;
reg    ap_block_pp0_stage0_01001;
wire   [4:0] tmp_9_fu_201_p4;
wire   [4:0] tmp_10_fu_227_p4;
wire   [4:0] tmp_11_fu_253_p4;
wire   [4:0] tmp_12_fu_279_p4;
wire   [4:0] tmp_13_fu_305_p4;
wire   [4:0] tmp_14_fu_331_p4;
wire   [4:0] tmp_15_fu_357_p4;
wire   [4:0] tmp_16_fu_383_p4;
wire   [15:0] tmp_V_7_trunc_fu_441_p3;
wire   [15:0] tmp_V_6_trunc_fu_435_p3;
wire   [15:0] tmp_V_5_trunc_fu_429_p3;
wire   [15:0] tmp_V_4_trunc_fu_423_p3;
wire   [15:0] tmp_V_3_trunc_fu_417_p3;
wire   [15:0] tmp_V_2_trunc_fu_411_p3;
wire   [15:0] tmp_V_1_trunc_fu_405_p3;
wire   [15:0] tmp_V_0_trunc_fu_399_p3;
wire    ap_CS_fsm_state5;
reg   [2:0] ap_NS_fsm;
reg    ap_idle_pp0;
wire    ap_enable_pp0;

// power-on initialization
initial begin
#0 start_once_reg = 1'b0;
#0 ap_done_reg = 1'b0;
#0 ap_CS_fsm = 3'd1;
#0 ap_enable_reg_pp0_iter1 = 1'b0;
#0 ap_enable_reg_pp0_iter2 = 1'b0;
#0 ap_enable_reg_pp0_iter0 = 1'b0;
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_done_reg <= 1'b0;
    end else begin
        if ((ap_continue == 1'b1)) begin
            ap_done_reg <= 1'b0;
        end else if ((1'b1 == ap_CS_fsm_state5)) begin
            ap_done_reg <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter0 <= 1'b0;
    end else begin
        if (((1'b1 == ap_CS_fsm_pp0_stage0) & (1'b1 == ap_condition_pp0_exit_iter0_state2) & (1'b0 == ap_block_pp0_stage0_subdone))) begin
            ap_enable_reg_pp0_iter0 <= 1'b0;
        end else if ((~((real_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
            ap_enable_reg_pp0_iter0 <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter1 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            if ((1'b1 == ap_condition_pp0_exit_iter0_state2)) begin
                ap_enable_reg_pp0_iter1 <= (1'b1 ^ ap_condition_pp0_exit_iter0_state2);
            end else if ((1'b1 == 1'b1)) begin
                ap_enable_reg_pp0_iter1 <= ap_enable_reg_pp0_iter0;
            end
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter2 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter2 <= ap_enable_reg_pp0_iter1;
        end else if ((~((real_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
            ap_enable_reg_pp0_iter2 <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        start_once_reg <= 1'b0;
    end else begin
        if (((internal_ap_ready == 1'b0) & (real_start == 1'b1))) begin
            start_once_reg <= 1'b1;
        end else if ((internal_ap_ready == 1'b1)) begin
            start_once_reg <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (tmp_fu_177_p2 == 1'd0) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_enable_reg_pp0_iter0 == 1'b1))) begin
        i_reg_166 <= i_2_fu_183_p2;
    end else if ((~((real_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
        i_reg_166 <= 14'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (tmp_reg_468 == 1'd0) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        icmp1_reg_527 <= icmp1_fu_315_p2;
        icmp2_reg_537 <= icmp2_fu_341_p2;
        icmp3_reg_497 <= icmp3_fu_237_p2;
        icmp4_reg_547 <= icmp4_fu_367_p2;
        icmp5_reg_557 <= icmp5_fu_393_p2;
        icmp6_reg_507 <= icmp6_fu_263_p2;
        icmp9_reg_517 <= icmp9_fu_289_p2;
        icmp_reg_487 <= icmp_fu_211_p2;
        p_Result_1_reg_492 <= {{StreamIn_V_Data_V_dout[31:16]}};
        p_Result_2_reg_502 <= {{StreamIn_V_Data_V_dout[47:32]}};
        p_Result_3_reg_512 <= {{StreamIn_V_Data_V_dout[63:48]}};
        p_Result_4_reg_522 <= {{StreamIn_V_Data_V_dout[79:64]}};
        p_Result_5_reg_532 <= {{StreamIn_V_Data_V_dout[95:80]}};
        p_Result_6_reg_542 <= {{StreamIn_V_Data_V_dout[111:96]}};
        p_Result_7_reg_552 <= {{StreamIn_V_Data_V_dout[127:112]}};
        tmp_8_reg_482 <= tmp_8_fu_197_p1;
        tmp_User_V_reg_477 <= StreamIn_V_User_V_dout;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        tmp_reg_468 <= tmp_fu_177_p2;
        tmp_reg_468_pp0_iter1_reg <= tmp_reg_468;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (tmp_reg_468 == 1'd0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        StreamIn_V_Data_V0_update = 1'b1;
    end else begin
        StreamIn_V_Data_V0_update = 1'b0;
    end
end

always @ (*) begin
    if (((tmp_reg_468 == 1'd0) & (1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        StreamIn_V_Data_V_blk_n = StreamIn_V_Data_V_empty_n;
    end else begin
        StreamIn_V_Data_V_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((tmp_reg_468 == 1'd0) & (1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        StreamIn_V_User_V_blk_n = StreamIn_V_User_V_empty_n;
    end else begin
        StreamIn_V_User_V_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (tmp_reg_468_pp0_iter1_reg == 1'd0) & (ap_enable_reg_pp0_iter2 == 1'b1))) begin
        StreamOut_V_Data_V1_update = 1'b1;
    end else begin
        StreamOut_V_Data_V1_update = 1'b0;
    end
end

always @ (*) begin
    if (((tmp_reg_468_pp0_iter1_reg == 1'd0) & (1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter2 == 1'b1))) begin
        StreamOut_V_Data_V_blk_n = StreamOut_V_Data_V_full_n;
    end else begin
        StreamOut_V_Data_V_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((tmp_reg_468_pp0_iter1_reg == 1'd0) & (1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter2 == 1'b1))) begin
        StreamOut_V_User_V_blk_n = StreamOut_V_User_V_full_n;
    end else begin
        StreamOut_V_User_V_blk_n = 1'b1;
    end
end

always @ (*) begin
    if ((tmp_fu_177_p2 == 1'd1)) begin
        ap_condition_pp0_exit_iter0_state2 = 1'b1;
    end else begin
        ap_condition_pp0_exit_iter0_state2 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state5)) begin
        ap_done = 1'b1;
    end else begin
        ap_done = ap_done_reg;
    end
end

always @ (*) begin
    if (((real_start == 1'b0) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter2 == 1'b0) & (ap_enable_reg_pp0_iter1 == 1'b0) & (ap_enable_reg_pp0_iter0 == 1'b0))) begin
        ap_idle_pp0 = 1'b1;
    end else begin
        ap_idle_pp0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state5)) begin
        internal_ap_ready = 1'b1;
    end else begin
        internal_ap_ready = 1'b0;
    end
end

always @ (*) begin
    if (((start_once_reg == 1'b0) & (start_full_n == 1'b0))) begin
        real_start = 1'b0;
    end else begin
        real_start = ap_start;
    end
end

always @ (*) begin
    if (((start_once_reg == 1'b0) & (real_start == 1'b1))) begin
        start_write = 1'b1;
    end else begin
        start_write = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if ((~((real_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_pp0_stage0 : begin
            if ((~((tmp_fu_177_p2 == 1'd1) & (ap_enable_reg_pp0_iter1 == 1'b0) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b0 == ap_block_pp0_stage0_subdone)) & ~((ap_enable_reg_pp0_iter1 == 1'b0) & (ap_enable_reg_pp0_iter2 == 1'b1) & (1'b0 == ap_block_pp0_stage0_subdone)))) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end else if ((((ap_enable_reg_pp0_iter1 == 1'b0) & (ap_enable_reg_pp0_iter2 == 1'b1) & (1'b0 == ap_block_pp0_stage0_subdone)) | ((tmp_fu_177_p2 == 1'd1) & (ap_enable_reg_pp0_iter1 == 1'b0) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b0 == ap_block_pp0_stage0_subdone)))) begin
                ap_NS_fsm = ap_ST_fsm_state5;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end
        end
        ap_ST_fsm_state5 : begin
            ap_NS_fsm = ap_ST_fsm_state1;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign StreamIn_V_Data_V0_status = (StreamIn_V_User_V_empty_n & StreamIn_V_Data_V_empty_n);

assign StreamIn_V_Data_V_read = StreamIn_V_Data_V0_update;

assign StreamIn_V_User_V_read = StreamIn_V_Data_V0_update;

assign StreamOut_V_Data_V1_status = (StreamOut_V_User_V_full_n & StreamOut_V_Data_V_full_n);

assign StreamOut_V_Data_V_din = {{{{{{{{tmp_V_7_trunc_fu_441_p3}, {tmp_V_6_trunc_fu_435_p3}}, {tmp_V_5_trunc_fu_429_p3}}, {tmp_V_4_trunc_fu_423_p3}}, {tmp_V_3_trunc_fu_417_p3}}, {tmp_V_2_trunc_fu_411_p3}}, {tmp_V_1_trunc_fu_405_p3}}, {tmp_V_0_trunc_fu_399_p3}};

assign StreamOut_V_Data_V_write = StreamOut_V_Data_V1_update;

assign StreamOut_V_User_V_din = tmp_User_V_reg_477;

assign StreamOut_V_User_V_write = StreamOut_V_Data_V1_update;

assign ap_CS_fsm_pp0_stage0 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state5 = ap_CS_fsm[32'd2];

assign ap_block_pp0_stage0 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_pp0_stage0_01001 = (((tmp_reg_468_pp0_iter1_reg == 1'd0) & (1'b0 == StreamOut_V_Data_V1_status) & (ap_enable_reg_pp0_iter2 == 1'b1)) | ((tmp_reg_468 == 1'd0) & (1'b0 == StreamIn_V_Data_V0_status) & (ap_enable_reg_pp0_iter1 == 1'b1)));
end

always @ (*) begin
    ap_block_pp0_stage0_11001 = (((tmp_reg_468_pp0_iter1_reg == 1'd0) & (1'b0 == StreamOut_V_Data_V1_status) & (ap_enable_reg_pp0_iter2 == 1'b1)) | ((tmp_reg_468 == 1'd0) & (1'b0 == StreamIn_V_Data_V0_status) & (ap_enable_reg_pp0_iter1 == 1'b1)));
end

always @ (*) begin
    ap_block_pp0_stage0_subdone = (((tmp_reg_468_pp0_iter1_reg == 1'd0) & (1'b0 == StreamOut_V_Data_V1_status) & (ap_enable_reg_pp0_iter2 == 1'b1)) | ((tmp_reg_468 == 1'd0) & (1'b0 == StreamIn_V_Data_V0_status) & (ap_enable_reg_pp0_iter1 == 1'b1)));
end

always @ (*) begin
    ap_block_state1 = ((real_start == 1'b0) | (ap_done_reg == 1'b1));
end

assign ap_block_state2_pp0_stage0_iter0 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_state3_pp0_stage0_iter1 = ((tmp_reg_468 == 1'd0) & (1'b0 == StreamIn_V_Data_V0_status));
end

always @ (*) begin
    ap_block_state4_pp0_stage0_iter2 = ((tmp_reg_468_pp0_iter1_reg == 1'd0) & (1'b0 == StreamOut_V_Data_V1_status));
end

assign ap_enable_pp0 = (ap_idle_pp0 ^ 1'b1);

assign ap_ready = internal_ap_ready;

assign i_2_fu_183_p2 = (i_reg_166 + 14'd1);

assign icmp1_fu_315_p2 = ((tmp_13_fu_305_p4 != 5'd0) ? 1'b1 : 1'b0);

assign icmp2_fu_341_p2 = ((tmp_14_fu_331_p4 != 5'd0) ? 1'b1 : 1'b0);

assign icmp3_fu_237_p2 = ((tmp_10_fu_227_p4 != 5'd0) ? 1'b1 : 1'b0);

assign icmp4_fu_367_p2 = ((tmp_15_fu_357_p4 != 5'd0) ? 1'b1 : 1'b0);

assign icmp5_fu_393_p2 = ((tmp_16_fu_383_p4 != 5'd0) ? 1'b1 : 1'b0);

assign icmp6_fu_263_p2 = ((tmp_11_fu_253_p4 != 5'd0) ? 1'b1 : 1'b0);

assign icmp9_fu_289_p2 = ((tmp_12_fu_279_p4 != 5'd0) ? 1'b1 : 1'b0);

assign icmp_fu_211_p2 = ((tmp_9_fu_201_p4 != 5'd0) ? 1'b1 : 1'b0);

assign start_out = real_start;

assign tmp_10_fu_227_p4 = {{StreamIn_V_Data_V_dout[31:27]}};

assign tmp_11_fu_253_p4 = {{StreamIn_V_Data_V_dout[47:43]}};

assign tmp_12_fu_279_p4 = {{StreamIn_V_Data_V_dout[63:59]}};

assign tmp_13_fu_305_p4 = {{StreamIn_V_Data_V_dout[79:75]}};

assign tmp_14_fu_331_p4 = {{StreamIn_V_Data_V_dout[95:91]}};

assign tmp_15_fu_357_p4 = {{StreamIn_V_Data_V_dout[111:107]}};

assign tmp_16_fu_383_p4 = {{StreamIn_V_Data_V_dout[127:123]}};

assign tmp_8_fu_197_p1 = StreamIn_V_Data_V_dout[15:0];

assign tmp_9_fu_201_p4 = {{StreamIn_V_Data_V_dout[15:11]}};

assign tmp_V_0_trunc_fu_399_p3 = ((icmp_reg_487[0:0] === 1'b1) ? tmp_8_reg_482 : 16'd0);

assign tmp_V_1_trunc_fu_405_p3 = ((icmp3_reg_497[0:0] === 1'b1) ? p_Result_1_reg_492 : 16'd0);

assign tmp_V_2_trunc_fu_411_p3 = ((icmp6_reg_507[0:0] === 1'b1) ? p_Result_2_reg_502 : 16'd0);

assign tmp_V_3_trunc_fu_417_p3 = ((icmp9_reg_517[0:0] === 1'b1) ? p_Result_3_reg_512 : 16'd0);

assign tmp_V_4_trunc_fu_423_p3 = ((icmp1_reg_527[0:0] === 1'b1) ? p_Result_4_reg_522 : 16'd0);

assign tmp_V_5_trunc_fu_429_p3 = ((icmp2_reg_537[0:0] === 1'b1) ? p_Result_5_reg_532 : 16'd0);

assign tmp_V_6_trunc_fu_435_p3 = ((icmp4_reg_547[0:0] === 1'b1) ? p_Result_6_reg_542 : 16'd0);

assign tmp_V_7_trunc_fu_441_p3 = ((icmp5_reg_557[0:0] === 1'b1) ? p_Result_7_reg_552 : 16'd0);

assign tmp_fu_177_p2 = ((i_reg_166 == 14'd10240) ? 1'b1 : 1'b0);

endmodule //pix_threshold
