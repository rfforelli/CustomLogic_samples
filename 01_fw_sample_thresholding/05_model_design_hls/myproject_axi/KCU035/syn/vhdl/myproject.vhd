-- ==============================================================
-- RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
-- Version: 2018.3
-- Copyright (C) 1986-2018 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity myproject is
port (
    VideoIn_TDATA : IN STD_LOGIC_VECTOR (127 downto 0);
    VideoIn_TUSER : IN STD_LOGIC_VECTOR (3 downto 0);
    VideoOut_TDATA : OUT STD_LOGIC_VECTOR (127 downto 0);
    VideoOut_TUSER : OUT STD_LOGIC_VECTOR (3 downto 0);
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    VideoIn_TVALID : IN STD_LOGIC;
    VideoIn_TREADY : OUT STD_LOGIC;
    ap_start : IN STD_LOGIC;
    VideoOut_TVALID : OUT STD_LOGIC;
    VideoOut_TREADY : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_continue : IN STD_LOGIC );
end;


architecture behav of myproject is 
    constant ap_const_lv128_lc_1 : STD_LOGIC_VECTOR (127 downto 0) := "00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_const_lv4_0 : STD_LOGIC_VECTOR (3 downto 0) := "0000";
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';

    signal read_pixel_data_U0_ap_start : STD_LOGIC;
    signal read_pixel_data_U0_ap_done : STD_LOGIC;
    signal read_pixel_data_U0_ap_continue : STD_LOGIC;
    signal read_pixel_data_U0_ap_idle : STD_LOGIC;
    signal read_pixel_data_U0_ap_ready : STD_LOGIC;
    signal read_pixel_data_U0_start_out : STD_LOGIC;
    signal read_pixel_data_U0_start_write : STD_LOGIC;
    signal read_pixel_data_U0_VideoIn_TREADY : STD_LOGIC;
    signal read_pixel_data_U0_StreamOut_V_Data_V_din : STD_LOGIC_VECTOR (127 downto 0);
    signal read_pixel_data_U0_StreamOut_V_Data_V_write : STD_LOGIC;
    signal read_pixel_data_U0_StreamOut_V_User_V_din : STD_LOGIC_VECTOR (3 downto 0);
    signal read_pixel_data_U0_StreamOut_V_User_V_write : STD_LOGIC;
    signal pix_threshold_U0_ap_start : STD_LOGIC;
    signal pix_threshold_U0_ap_done : STD_LOGIC;
    signal pix_threshold_U0_ap_continue : STD_LOGIC;
    signal pix_threshold_U0_ap_idle : STD_LOGIC;
    signal pix_threshold_U0_ap_ready : STD_LOGIC;
    signal pix_threshold_U0_start_out : STD_LOGIC;
    signal pix_threshold_U0_start_write : STD_LOGIC;
    signal pix_threshold_U0_StreamIn_V_Data_V_read : STD_LOGIC;
    signal pix_threshold_U0_StreamIn_V_User_V_read : STD_LOGIC;
    signal pix_threshold_U0_StreamOut_V_Data_V_din : STD_LOGIC_VECTOR (127 downto 0);
    signal pix_threshold_U0_StreamOut_V_Data_V_write : STD_LOGIC;
    signal pix_threshold_U0_StreamOut_V_User_V_din : STD_LOGIC_VECTOR (3 downto 0);
    signal pix_threshold_U0_StreamOut_V_User_V_write : STD_LOGIC;
    signal send_output_U0_ap_start : STD_LOGIC;
    signal send_output_U0_ap_done : STD_LOGIC;
    signal send_output_U0_ap_continue : STD_LOGIC;
    signal send_output_U0_ap_idle : STD_LOGIC;
    signal send_output_U0_ap_ready : STD_LOGIC;
    signal send_output_U0_StreamIn_V_Data_V_read : STD_LOGIC;
    signal send_output_U0_StreamIn_V_User_V_read : STD_LOGIC;
    signal send_output_U0_VideoOut_TDATA : STD_LOGIC_VECTOR (127 downto 0);
    signal send_output_U0_VideoOut_TVALID : STD_LOGIC;
    signal send_output_U0_VideoOut_TUSER : STD_LOGIC_VECTOR (3 downto 0);
    signal ap_sync_continue : STD_LOGIC;
    signal VideoBuffer_V_Data_V_full_n : STD_LOGIC;
    signal VideoBuffer_V_Data_V_dout : STD_LOGIC_VECTOR (127 downto 0);
    signal VideoBuffer_V_Data_V_empty_n : STD_LOGIC;
    signal VideoBuffer_V_User_V_full_n : STD_LOGIC;
    signal VideoBuffer_V_User_V_dout : STD_LOGIC_VECTOR (3 downto 0);
    signal VideoBuffer_V_User_V_empty_n : STD_LOGIC;
    signal ThresholdOut_V_Data_s_full_n : STD_LOGIC;
    signal ThresholdOut_V_Data_s_dout : STD_LOGIC_VECTOR (127 downto 0);
    signal ThresholdOut_V_Data_s_empty_n : STD_LOGIC;
    signal ThresholdOut_V_User_s_full_n : STD_LOGIC;
    signal ThresholdOut_V_User_s_dout : STD_LOGIC_VECTOR (3 downto 0);
    signal ThresholdOut_V_User_s_empty_n : STD_LOGIC;
    signal ap_sync_done : STD_LOGIC;
    signal ap_sync_ready : STD_LOGIC;
    signal start_for_pix_threshold_U0_din : STD_LOGIC_VECTOR (0 downto 0);
    signal start_for_pix_threshold_U0_full_n : STD_LOGIC;
    signal start_for_pix_threshold_U0_dout : STD_LOGIC_VECTOR (0 downto 0);
    signal start_for_pix_threshold_U0_empty_n : STD_LOGIC;
    signal start_for_send_output_U0_din : STD_LOGIC_VECTOR (0 downto 0);
    signal start_for_send_output_U0_full_n : STD_LOGIC;
    signal start_for_send_output_U0_dout : STD_LOGIC_VECTOR (0 downto 0);
    signal start_for_send_output_U0_empty_n : STD_LOGIC;
    signal send_output_U0_start_full_n : STD_LOGIC;
    signal send_output_U0_start_write : STD_LOGIC;

    component read_pixel_data IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        start_full_n : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_continue : IN STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        start_out : OUT STD_LOGIC;
        start_write : OUT STD_LOGIC;
        VideoIn_TDATA : IN STD_LOGIC_VECTOR (127 downto 0);
        VideoIn_TVALID : IN STD_LOGIC;
        VideoIn_TREADY : OUT STD_LOGIC;
        VideoIn_TUSER : IN STD_LOGIC_VECTOR (3 downto 0);
        StreamOut_V_Data_V_din : OUT STD_LOGIC_VECTOR (127 downto 0);
        StreamOut_V_Data_V_full_n : IN STD_LOGIC;
        StreamOut_V_Data_V_write : OUT STD_LOGIC;
        StreamOut_V_User_V_din : OUT STD_LOGIC_VECTOR (3 downto 0);
        StreamOut_V_User_V_full_n : IN STD_LOGIC;
        StreamOut_V_User_V_write : OUT STD_LOGIC );
    end component;


    component pix_threshold IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        start_full_n : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_continue : IN STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        start_out : OUT STD_LOGIC;
        start_write : OUT STD_LOGIC;
        StreamIn_V_Data_V_dout : IN STD_LOGIC_VECTOR (127 downto 0);
        StreamIn_V_Data_V_empty_n : IN STD_LOGIC;
        StreamIn_V_Data_V_read : OUT STD_LOGIC;
        StreamIn_V_User_V_dout : IN STD_LOGIC_VECTOR (3 downto 0);
        StreamIn_V_User_V_empty_n : IN STD_LOGIC;
        StreamIn_V_User_V_read : OUT STD_LOGIC;
        StreamOut_V_Data_V_din : OUT STD_LOGIC_VECTOR (127 downto 0);
        StreamOut_V_Data_V_full_n : IN STD_LOGIC;
        StreamOut_V_Data_V_write : OUT STD_LOGIC;
        StreamOut_V_User_V_din : OUT STD_LOGIC_VECTOR (3 downto 0);
        StreamOut_V_User_V_full_n : IN STD_LOGIC;
        StreamOut_V_User_V_write : OUT STD_LOGIC );
    end component;


    component send_output IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_continue : IN STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        StreamIn_V_Data_V_dout : IN STD_LOGIC_VECTOR (127 downto 0);
        StreamIn_V_Data_V_empty_n : IN STD_LOGIC;
        StreamIn_V_Data_V_read : OUT STD_LOGIC;
        StreamIn_V_User_V_dout : IN STD_LOGIC_VECTOR (3 downto 0);
        StreamIn_V_User_V_empty_n : IN STD_LOGIC;
        StreamIn_V_User_V_read : OUT STD_LOGIC;
        VideoOut_TDATA : OUT STD_LOGIC_VECTOR (127 downto 0);
        VideoOut_TVALID : OUT STD_LOGIC;
        VideoOut_TREADY : IN STD_LOGIC;
        VideoOut_TUSER : OUT STD_LOGIC_VECTOR (3 downto 0) );
    end component;


    component fifo_w128_d10240_A IS
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        if_read_ce : IN STD_LOGIC;
        if_write_ce : IN STD_LOGIC;
        if_din : IN STD_LOGIC_VECTOR (127 downto 0);
        if_full_n : OUT STD_LOGIC;
        if_write : IN STD_LOGIC;
        if_dout : OUT STD_LOGIC_VECTOR (127 downto 0);
        if_empty_n : OUT STD_LOGIC;
        if_read : IN STD_LOGIC );
    end component;


    component fifo_w4_d10240_A IS
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        if_read_ce : IN STD_LOGIC;
        if_write_ce : IN STD_LOGIC;
        if_din : IN STD_LOGIC_VECTOR (3 downto 0);
        if_full_n : OUT STD_LOGIC;
        if_write : IN STD_LOGIC;
        if_dout : OUT STD_LOGIC_VECTOR (3 downto 0);
        if_empty_n : OUT STD_LOGIC;
        if_read : IN STD_LOGIC );
    end component;


    component start_for_pix_threshold_U0 IS
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        if_read_ce : IN STD_LOGIC;
        if_write_ce : IN STD_LOGIC;
        if_din : IN STD_LOGIC_VECTOR (0 downto 0);
        if_full_n : OUT STD_LOGIC;
        if_write : IN STD_LOGIC;
        if_dout : OUT STD_LOGIC_VECTOR (0 downto 0);
        if_empty_n : OUT STD_LOGIC;
        if_read : IN STD_LOGIC );
    end component;


    component start_for_send_output_U0 IS
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        if_read_ce : IN STD_LOGIC;
        if_write_ce : IN STD_LOGIC;
        if_din : IN STD_LOGIC_VECTOR (0 downto 0);
        if_full_n : OUT STD_LOGIC;
        if_write : IN STD_LOGIC;
        if_dout : OUT STD_LOGIC_VECTOR (0 downto 0);
        if_empty_n : OUT STD_LOGIC;
        if_read : IN STD_LOGIC );
    end component;



begin
    read_pixel_data_U0 : component read_pixel_data
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        ap_start => read_pixel_data_U0_ap_start,
        start_full_n => start_for_pix_threshold_U0_full_n,
        ap_done => read_pixel_data_U0_ap_done,
        ap_continue => read_pixel_data_U0_ap_continue,
        ap_idle => read_pixel_data_U0_ap_idle,
        ap_ready => read_pixel_data_U0_ap_ready,
        start_out => read_pixel_data_U0_start_out,
        start_write => read_pixel_data_U0_start_write,
        VideoIn_TDATA => VideoIn_TDATA,
        VideoIn_TVALID => VideoIn_TVALID,
        VideoIn_TREADY => read_pixel_data_U0_VideoIn_TREADY,
        VideoIn_TUSER => VideoIn_TUSER,
        StreamOut_V_Data_V_din => read_pixel_data_U0_StreamOut_V_Data_V_din,
        StreamOut_V_Data_V_full_n => VideoBuffer_V_Data_V_full_n,
        StreamOut_V_Data_V_write => read_pixel_data_U0_StreamOut_V_Data_V_write,
        StreamOut_V_User_V_din => read_pixel_data_U0_StreamOut_V_User_V_din,
        StreamOut_V_User_V_full_n => VideoBuffer_V_User_V_full_n,
        StreamOut_V_User_V_write => read_pixel_data_U0_StreamOut_V_User_V_write);

    pix_threshold_U0 : component pix_threshold
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        ap_start => pix_threshold_U0_ap_start,
        start_full_n => start_for_send_output_U0_full_n,
        ap_done => pix_threshold_U0_ap_done,
        ap_continue => pix_threshold_U0_ap_continue,
        ap_idle => pix_threshold_U0_ap_idle,
        ap_ready => pix_threshold_U0_ap_ready,
        start_out => pix_threshold_U0_start_out,
        start_write => pix_threshold_U0_start_write,
        StreamIn_V_Data_V_dout => VideoBuffer_V_Data_V_dout,
        StreamIn_V_Data_V_empty_n => VideoBuffer_V_Data_V_empty_n,
        StreamIn_V_Data_V_read => pix_threshold_U0_StreamIn_V_Data_V_read,
        StreamIn_V_User_V_dout => VideoBuffer_V_User_V_dout,
        StreamIn_V_User_V_empty_n => VideoBuffer_V_User_V_empty_n,
        StreamIn_V_User_V_read => pix_threshold_U0_StreamIn_V_User_V_read,
        StreamOut_V_Data_V_din => pix_threshold_U0_StreamOut_V_Data_V_din,
        StreamOut_V_Data_V_full_n => ThresholdOut_V_Data_s_full_n,
        StreamOut_V_Data_V_write => pix_threshold_U0_StreamOut_V_Data_V_write,
        StreamOut_V_User_V_din => pix_threshold_U0_StreamOut_V_User_V_din,
        StreamOut_V_User_V_full_n => ThresholdOut_V_User_s_full_n,
        StreamOut_V_User_V_write => pix_threshold_U0_StreamOut_V_User_V_write);

    send_output_U0 : component send_output
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        ap_start => send_output_U0_ap_start,
        ap_done => send_output_U0_ap_done,
        ap_continue => send_output_U0_ap_continue,
        ap_idle => send_output_U0_ap_idle,
        ap_ready => send_output_U0_ap_ready,
        StreamIn_V_Data_V_dout => ThresholdOut_V_Data_s_dout,
        StreamIn_V_Data_V_empty_n => ThresholdOut_V_Data_s_empty_n,
        StreamIn_V_Data_V_read => send_output_U0_StreamIn_V_Data_V_read,
        StreamIn_V_User_V_dout => ThresholdOut_V_User_s_dout,
        StreamIn_V_User_V_empty_n => ThresholdOut_V_User_s_empty_n,
        StreamIn_V_User_V_read => send_output_U0_StreamIn_V_User_V_read,
        VideoOut_TDATA => send_output_U0_VideoOut_TDATA,
        VideoOut_TVALID => send_output_U0_VideoOut_TVALID,
        VideoOut_TREADY => VideoOut_TREADY,
        VideoOut_TUSER => send_output_U0_VideoOut_TUSER);

    VideoBuffer_V_Data_V_U : component fifo_w128_d10240_A
    port map (
        clk => ap_clk,
        reset => ap_rst,
        if_read_ce => ap_const_logic_1,
        if_write_ce => ap_const_logic_1,
        if_din => read_pixel_data_U0_StreamOut_V_Data_V_din,
        if_full_n => VideoBuffer_V_Data_V_full_n,
        if_write => read_pixel_data_U0_StreamOut_V_Data_V_write,
        if_dout => VideoBuffer_V_Data_V_dout,
        if_empty_n => VideoBuffer_V_Data_V_empty_n,
        if_read => pix_threshold_U0_StreamIn_V_Data_V_read);

    VideoBuffer_V_User_V_U : component fifo_w4_d10240_A
    port map (
        clk => ap_clk,
        reset => ap_rst,
        if_read_ce => ap_const_logic_1,
        if_write_ce => ap_const_logic_1,
        if_din => read_pixel_data_U0_StreamOut_V_User_V_din,
        if_full_n => VideoBuffer_V_User_V_full_n,
        if_write => read_pixel_data_U0_StreamOut_V_User_V_write,
        if_dout => VideoBuffer_V_User_V_dout,
        if_empty_n => VideoBuffer_V_User_V_empty_n,
        if_read => pix_threshold_U0_StreamIn_V_User_V_read);

    ThresholdOut_V_Data_s_U : component fifo_w128_d10240_A
    port map (
        clk => ap_clk,
        reset => ap_rst,
        if_read_ce => ap_const_logic_1,
        if_write_ce => ap_const_logic_1,
        if_din => pix_threshold_U0_StreamOut_V_Data_V_din,
        if_full_n => ThresholdOut_V_Data_s_full_n,
        if_write => pix_threshold_U0_StreamOut_V_Data_V_write,
        if_dout => ThresholdOut_V_Data_s_dout,
        if_empty_n => ThresholdOut_V_Data_s_empty_n,
        if_read => send_output_U0_StreamIn_V_Data_V_read);

    ThresholdOut_V_User_s_U : component fifo_w4_d10240_A
    port map (
        clk => ap_clk,
        reset => ap_rst,
        if_read_ce => ap_const_logic_1,
        if_write_ce => ap_const_logic_1,
        if_din => pix_threshold_U0_StreamOut_V_User_V_din,
        if_full_n => ThresholdOut_V_User_s_full_n,
        if_write => pix_threshold_U0_StreamOut_V_User_V_write,
        if_dout => ThresholdOut_V_User_s_dout,
        if_empty_n => ThresholdOut_V_User_s_empty_n,
        if_read => send_output_U0_StreamIn_V_User_V_read);

    start_for_pix_threshold_U0_U : component start_for_pix_threshold_U0
    port map (
        clk => ap_clk,
        reset => ap_rst,
        if_read_ce => ap_const_logic_1,
        if_write_ce => ap_const_logic_1,
        if_din => start_for_pix_threshold_U0_din,
        if_full_n => start_for_pix_threshold_U0_full_n,
        if_write => read_pixel_data_U0_start_write,
        if_dout => start_for_pix_threshold_U0_dout,
        if_empty_n => start_for_pix_threshold_U0_empty_n,
        if_read => pix_threshold_U0_ap_ready);

    start_for_send_output_U0_U : component start_for_send_output_U0
    port map (
        clk => ap_clk,
        reset => ap_rst,
        if_read_ce => ap_const_logic_1,
        if_write_ce => ap_const_logic_1,
        if_din => start_for_send_output_U0_din,
        if_full_n => start_for_send_output_U0_full_n,
        if_write => pix_threshold_U0_start_write,
        if_dout => start_for_send_output_U0_dout,
        if_empty_n => start_for_send_output_U0_empty_n,
        if_read => send_output_U0_ap_ready);




    VideoIn_TREADY <= read_pixel_data_U0_VideoIn_TREADY;
    VideoOut_TDATA <= send_output_U0_VideoOut_TDATA;
    VideoOut_TUSER <= send_output_U0_VideoOut_TUSER;
    VideoOut_TVALID <= send_output_U0_VideoOut_TVALID;
    ap_done <= send_output_U0_ap_done;
    ap_idle <= (send_output_U0_ap_idle and read_pixel_data_U0_ap_idle and pix_threshold_U0_ap_idle);
    ap_ready <= read_pixel_data_U0_ap_ready;
    ap_sync_continue <= ap_continue;
    ap_sync_done <= send_output_U0_ap_done;
    ap_sync_ready <= read_pixel_data_U0_ap_ready;
    pix_threshold_U0_ap_continue <= ap_const_logic_1;
    pix_threshold_U0_ap_start <= start_for_pix_threshold_U0_empty_n;
    read_pixel_data_U0_ap_continue <= ap_const_logic_1;
    read_pixel_data_U0_ap_start <= ap_start;
    send_output_U0_ap_continue <= ap_continue;
    send_output_U0_ap_start <= start_for_send_output_U0_empty_n;
    send_output_U0_start_full_n <= ap_const_logic_1;
    send_output_U0_start_write <= ap_const_logic_0;
    start_for_pix_threshold_U0_din <= (0=>ap_const_logic_1, others=>'-');
    start_for_send_output_U0_din <= (0=>ap_const_logic_1, others=>'-');
end behav;
